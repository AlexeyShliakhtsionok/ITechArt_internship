{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\UpdateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { DateFormat } from '../../Functions/DateFormat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UpdateOrderModal extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n    var singleData = this.props.singleResponseData;\n    var orderInfoArea;\n    var actionButtons;\n    var minDate = DateFormat(Date());\n    var currentDate = new Date();\n    var maxDate = DateFormat(new Date(currentDate.setDate(currentDate.getDate() + 30)));\n    var orderToUpdate = '';\n    var clientName = '';\n    var employeeName = '';\n    var procedure = '';\n    var procedureType = '';\n    var orderDate = Date();\n    var orderTime = Date();\n\n    if (singleData !== '') {\n      if (this.props.activeDate !== '') {\n        orderTime = this.props.activeTime;\n        orderDate = String(this.props.activeDate);\n        orderDate = orderDate.substring(0, 10);\n      } else {\n        orderTime = singleData.dateOfService;\n        orderDate = String(singleData.dateOfService);\n        orderDate = orderDate.substring(0, 10);\n      }\n\n      orderToUpdate = {\n        orderId: this.props.activeId,\n        dateOfService: orderTime,\n        client: singleData.client,\n        procedure: this.props.activeProcedure,\n        employee: this.props.activeEmployee\n      };\n      clientName = data[this.props.activeId].clientFullName;\n      employeeName = this.props.singleResponseData.employee.firstName + this.props.singleResponseData.employee.lastName;\n      procedure = this.props.singleResponseData.procedure.procedureName;\n      orderDate = this.props.singleResponseData.dateOfService.substr(0, 10);\n      orderTime = this.props.singleResponseData.dateOfService.substr(11, 5);\n      this.props.responseDataList.procedures.forEach(procedure => {\n        if (procedure.procedureName === this.props.singleResponseData.procedure.procedureName) {\n          procedureType = procedure.procedureType.procedureTypeName;\n        }\n      });\n    }\n\n    var clientList = [];\n    var procedureTypesList = [];\n    var procedureList = [];\n    var employeeList = [];\n    data.clientsSelectList.forEach(element => {\n      clientList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    data.procedureTypesSelectList.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n\n    if (this.props.procedures !== '') {\n      this.props.procedures.forEach(element => {\n        procedureList.push({\n          value: element.procedureId,\n          label: element.procedureName\n        });\n      });\n    }\n\n    if (this.props.employees !== '') {\n      this.props.employees.forEach(element => {\n        employeeList.push({\n          value: element.employeeId,\n          label: element.firstName + ' ' + element.lastName\n        });\n      });\n    }\n\n    var scheduleTimesList = [];\n\n    if (this.props.schedule !== '') {\n      this.props.schedule.forEach(time => {\n        scheduleTimesList.push({\n          value: time,\n          label: time.substr(11)\n        });\n      });\n    }\n\n    if (!this.props.isEditing) {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editUserInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: this.props.onEdit,\n          children: \"Edit order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.onDelete(this.props.activeId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n          },\n          children: \"Delete order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this);\n      orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date of service: \", orderDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Client name: \", clientName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Procedure type:\", procedureType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Procedure:\", procedure]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Employee: \", employeeName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time of service: \", orderTime, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this);\n    } else {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmUserInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.onEdit();\n              this.props.setUpdateModalState();\n              this.props.onUpdate(this.props.activeMenu, orderToUpdate);\n            },\n            children: \"Save changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this);\n      orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Date of service:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              min: minDate,\n              max: maxDate,\n              defaultValue: orderDate,\n              onChange: e => {\n                this.props.setOrdersDate(e.target.value);\n                orderToUpdate.dateOfService = this.props.activeDate;\n                this.props.resetSelected();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Client name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              maxMenuHeight: 100,\n              options: clientList,\n              defaultInputValue: clientName,\n              onChange: data => {\n                this.props.setOrdersClient(data.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Procedure type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.procedureType,\n              maxMenuHeight: 100,\n              options: procedureTypesList,\n              onChange: data => {\n                this.props.setSelectedValue('orderProcedureType');\n                this.props.getProcedures(data.value);\n                this.props.getEmployees(data.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Procedure:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.procedure,\n              isDisabled: this.props.procedureInputStatus,\n              maxMenuHeight: 100,\n              onChange: data => {\n                this.props.setSelectedValue('orderProcedure');\n                this.props.setOrdersProcedure(data.value);\n              },\n              options: procedureList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Employee:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.employee,\n              isDisabled: this.props.procedureInputStatus,\n              maxMenuHeight: 100,\n              onChange: data => {\n                this.props.setSelectedValue('orderEmployee');\n                this.props.setOrdersEmployee(data.value);\n                this.props.getSchedule(data.value, this.props.activeDate, this.props.activeProcedure.procedureId, this.props.openTime, this.props.closeTime);\n              },\n              options: employeeList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Time of service:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.orderTime,\n              hideSelectedOptions: true,\n              isDisabled: this.props.procedureInputStatus,\n              maxMenuHeight: 100,\n              onChange: data => {\n                this.props.setSelectedValue('orderTime');\n                this.props.setOrdersTime(data.value);\n              },\n              options: scheduleTimesList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          maxWidth: 'fit-content',\n          background: '#6c3636',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          border: '6px solid #f7f6f6',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.updateModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setUpdateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: orderInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    updateModalOpen: state.updateModalOpen,\n    pagedTablesData: state.pagedTablesData,\n    singleResponseData: state.singleResponseData,\n    isEditing: state.isEditing,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    schedule: state.schedule,\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    // For order creation\n    client: state.client,\n    orderTime: state.orderTime,\n    procedure: state.procedure,\n    procedureType: state.procedureType,\n    employee: state.employee,\n    //-----All procedures of certain procedure type\n    procedures: state.procedures,\n    //-----All employees of certain procedure type\n    employees: state.employees,\n    // Flag for enabling some of inputs\n    procedureInputStatus: state.procedureInputStatus,\n    // active orders objects\n    activeProcedure: state.activeProcedure,\n    activeDate: state.activeDate,\n    activeTime: state.activeTime,\n    activeClient: state.activeClient,\n    activeEmployee: state.activeEmployee\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    onEdit: () => dispatch(actions.SetEditModalState()),\n    onDelete: (id, menu) => {\n      dispatch(actions.DeleteData(id, menu));\n    },\n    onUpdate: (activeMenu, data) => dispatch(actions.UpdateData(activeMenu, data)),\n    getProcedures: typeId => dispatch(actions.GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(actions.GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setOrdersDate: date => dispatch(actions.SetActiveDate(date)),\n    setOrdersTime: date => dispatch(actions.SetActiveTime(date)),\n    setOrdersProcedure: data => dispatch(actions.SetActiveProcedure(data)),\n    setOrdersClient: data => dispatch(actions.SetActiveClient(data)),\n    setOrdersEmployee: data => dispatch(actions.SetActiveEmployee(data)),\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\n    setSelectedValue: inputName => dispatch(actions.SetSelectedValue(inputName))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/UpdateOrderModal.js"],"names":["React","connect","Modal","actions","Select","DateFormat","UpdateOrderModal","PureComponent","render","data","props","pagedTablesData","singleData","singleResponseData","orderInfoArea","actionButtons","minDate","Date","currentDate","maxDate","setDate","getDate","orderToUpdate","clientName","employeeName","procedure","procedureType","orderDate","orderTime","activeDate","activeTime","String","substring","dateOfService","orderId","activeId","client","activeProcedure","employee","activeEmployee","clientFullName","firstName","lastName","procedureName","substr","responseDataList","procedures","forEach","procedureTypeName","clientList","procedureTypesList","procedureList","employeeList","clientsSelectList","element","push","value","label","text","procedureTypesSelectList","procedureId","employees","employeeId","scheduleTimesList","schedule","time","isEditing","onEdit","onDelete","activeMenu","setUpdateModalState","onUpdate","e","setOrdersDate","target","resetSelected","setOrdersClient","setSelectedValue","getProcedures","getEmployees","procedureInputStatus","setOrdersProcedure","setOrdersEmployee","getSchedule","openTime","closeTime","setOrdersTime","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","updateModalOpen","mapStateToProps","state","activeClient","mapDispatchToProps","dispatch","SetUpdateModalState","SetEditModalState","id","menu","DeleteData","UpdateData","typeId","GetProceduresByType","GetEmployeesByProcedureType","open","close","GetAvaliableTimes","date","SetActiveDate","SetActiveTime","SetActiveProcedure","SetActiveClient","SetActiveEmployee","ResetSelectedValues","inputName","SetSelectedValue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\nimport { DateFormat } from '../../Functions/DateFormat.js';\r\n\r\nclass UpdateOrderModal extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    var singleData = this.props.singleResponseData;\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var minDate = DateFormat(Date());\r\n    var currentDate = new Date();\r\n    var maxDate = DateFormat(\r\n      new Date(currentDate.setDate(currentDate.getDate() + 30)),\r\n    );\r\n    var orderToUpdate = '';\r\n    var clientName = '';\r\n    var employeeName = '';\r\n    var procedure = '';\r\n    var procedureType = '';\r\n    var orderDate = Date();\r\n    var orderTime = Date();\r\n    if (singleData !== '') {\r\n      if (this.props.activeDate !== '') {\r\n        orderTime = this.props.activeTime;\r\n        orderDate = String(this.props.activeDate);\r\n        orderDate = orderDate.substring(0, 10);\r\n      } else {\r\n        orderTime = singleData.dateOfService;\r\n        orderDate = String(singleData.dateOfService);\r\n        orderDate = orderDate.substring(0, 10);\r\n      }\r\n\r\n      orderToUpdate = {\r\n        orderId: this.props.activeId,\r\n        dateOfService: orderTime,\r\n        client: singleData.client,\r\n        procedure: this.props.activeProcedure,\r\n        employee: this.props.activeEmployee,\r\n      };\r\n      clientName = data[this.props.activeId].clientFullName;\r\n\r\n      employeeName =\r\n        this.props.singleResponseData.employee.firstName +\r\n        this.props.singleResponseData.employee.lastName;\r\n      procedure = this.props.singleResponseData.procedure.procedureName;\r\n      orderDate = this.props.singleResponseData.dateOfService.substr(0, 10);\r\n      orderTime = this.props.singleResponseData.dateOfService.substr(11, 5);\r\n      this.props.responseDataList.procedures.forEach((procedure) => {\r\n        if (\r\n          procedure.procedureName ===\r\n          this.props.singleResponseData.procedure.procedureName\r\n        ) {\r\n          procedureType = procedure.procedureType.procedureTypeName;\r\n        }\r\n      });\r\n    }\r\n\r\n    var clientList = [];\r\n    var procedureTypesList = [];\r\n    var procedureList = [];\r\n    var employeeList = [];\r\n\r\n    data.clientsSelectList.forEach((element) => {\r\n      clientList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n    data.procedureTypesSelectList.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    if (this.props.procedures !== '') {\r\n      this.props.procedures.forEach((element) => {\r\n        procedureList.push({\r\n          value: element.procedureId,\r\n          label: element.procedureName,\r\n        });\r\n      });\r\n    }\r\n\r\n    if (this.props.employees !== '') {\r\n      this.props.employees.forEach((element) => {\r\n        employeeList.push({\r\n          value: element.employeeId,\r\n          label: element.firstName + ' ' + element.lastName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var scheduleTimesList = [];\r\n    if (this.props.schedule !== '') {\r\n      this.props.schedule.forEach((time) => {\r\n        scheduleTimesList.push({\r\n          value: time,\r\n          label: time.substr(11),\r\n        });\r\n      });\r\n    }\r\n\r\n    if (!this.props.isEditing) {\r\n      actionButtons = (\r\n        <div className=\"editUserInfo\">\r\n          <button className=\"modalButton\" onClick={this.props.onEdit}>\r\n            Edit order\r\n          </button>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.onDelete(this.props.activeId, this.props.activeMenu);\r\n              this.props.setUpdateModalState();\r\n            }}\r\n          >\r\n            Delete order\r\n          </button>\r\n        </div>\r\n      );\r\n\r\n      orderInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <p>Date of service: {orderDate}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Client name: {clientName}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>\r\n              Procedure type:\r\n              {procedureType}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>\r\n              Procedure:\r\n              {procedure}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Employee: {employeeName}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Time of service: {orderTime} </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      actionButtons = (\r\n        <div className=\"confirmUserInfo\">\r\n          <div>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.onEdit();\r\n                this.props.setUpdateModalState();\r\n                this.props.onUpdate(this.props.activeMenu, orderToUpdate);\r\n              }}\r\n            >\r\n              Save changes\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      orderInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Date of service:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <input\r\n                type=\"date\"\r\n                min={minDate}\r\n                max={maxDate}\r\n                defaultValue={orderDate}\r\n                onChange={(e) => {\r\n                  this.props.setOrdersDate(e.target.value);\r\n                  orderToUpdate.dateOfService = this.props.activeDate;\r\n                  this.props.resetSelected();\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Client name:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                maxMenuHeight={100}\r\n                options={clientList}\r\n                defaultInputValue={clientName}\r\n                onChange={(data) => {\r\n                  this.props.setOrdersClient(data.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Procedure type:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.procedureType}\r\n                maxMenuHeight={100}\r\n                options={procedureTypesList}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderProcedureType');\r\n                  this.props.getProcedures(data.value);\r\n                  this.props.getEmployees(data.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Procedure:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.procedure}\r\n                isDisabled={this.props.procedureInputStatus}\r\n                maxMenuHeight={100}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderProcedure');\r\n                  this.props.setOrdersProcedure(data.value);\r\n                }}\r\n                options={procedureList}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Employee:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.employee}\r\n                isDisabled={this.props.procedureInputStatus}\r\n                maxMenuHeight={100}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderEmployee');\r\n                  this.props.setOrdersEmployee(data.value);\r\n                  this.props.getSchedule(\r\n                    data.value,\r\n                    this.props.activeDate,\r\n                    this.props.activeProcedure.procedureId,\r\n                    this.props.openTime,\r\n                    this.props.closeTime,\r\n                  );\r\n                }}\r\n                options={employeeList}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Time of service:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.orderTime}\r\n                hideSelectedOptions={true}\r\n                isDisabled={this.props.procedureInputStatus}\r\n                maxMenuHeight={100}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderTime');\r\n                  this.props.setOrdersTime(data.value);\r\n                }}\r\n                options={scheduleTimesList}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            maxWidth: 'fit-content',\r\n            background: '#6c3636',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            border: '6px solid #f7f6f6',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.updateModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setUpdateModalState}\r\n      >\r\n        <>\r\n          <div className=\"profileBody\">{orderInfoArea}</div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    updateModalOpen: state.updateModalOpen,\r\n    pagedTablesData: state.pagedTablesData,\r\n    singleResponseData: state.singleResponseData,\r\n    isEditing: state.isEditing,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    schedule: state.schedule,\r\n\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // For order creation\r\n    client: state.client,\r\n    orderTime: state.orderTime,\r\n    procedure: state.procedure,\r\n    procedureType: state.procedureType,\r\n    employee: state.employee,\r\n\r\n    //-----All procedures of certain procedure type\r\n    procedures: state.procedures,\r\n\r\n    //-----All employees of certain procedure type\r\n    employees: state.employees,\r\n\r\n    // Flag for enabling some of inputs\r\n    procedureInputStatus: state.procedureInputStatus,\r\n\r\n    // active orders objects\r\n    activeProcedure: state.activeProcedure,\r\n    activeDate: state.activeDate,\r\n    activeTime: state.activeTime,\r\n    activeClient: state.activeClient,\r\n    activeEmployee: state.activeEmployee,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    onEdit: () => dispatch(actions.SetEditModalState()),\r\n    onDelete: (id, menu) => {\r\n      dispatch(actions.DeleteData(id, menu));\r\n    },\r\n    onUpdate: (activeMenu, data) =>\r\n      dispatch(actions.UpdateData(activeMenu, data)),\r\n    getProcedures: (typeId) => dispatch(actions.GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) =>\r\n      dispatch(actions.GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n    setOrdersDate: (date) => dispatch(actions.SetActiveDate(date)),\r\n    setOrdersTime: (date) => dispatch(actions.SetActiveTime(date)),\r\n    setOrdersProcedure: (data) => dispatch(actions.SetActiveProcedure(data)),\r\n    setOrdersClient: (data) => dispatch(actions.SetActiveClient(data)),\r\n    setOrdersEmployee: (data) => dispatch(actions.SetActiveEmployee(data)),\r\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\r\n    setSelectedValue: (inputName) =>\r\n      dispatch(actions.SetSelectedValue(inputName)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
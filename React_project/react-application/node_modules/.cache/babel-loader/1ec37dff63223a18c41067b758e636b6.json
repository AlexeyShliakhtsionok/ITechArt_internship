{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\UpdateServiceModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport { SetUpdateModalState, SetEditState, DeleteData, UpdateData } from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UpdateServiceModal extends React.PureComponent {\n  render() {\n    var procedureName = this.props.singleResponseData.procedureName;\n    var procedureDescription = this.props.singleResponseData.procedureDescription;\n    var timeAmount = this.props.singleResponseData.timeAmount;\n    var price = this.props.singleResponseData.procedurePrice;\n    var serviceInfoArea;\n    var actionButtons;\n    var serviceToUpdate = {\n      procedureName: this.props.singleResponseData.procedureName,\n      procedureDescription: this.props.singleResponseData.procedureDescription,\n      timeAmount: this.props.singleResponseData.timeAmount,\n      procedurePrice: this.props.singleResponseData.procedurePrice,\n      procedureType: this.props.singleResponseData.procedureType,\n      materials: this.props.singleResponseData.materials\n    };\n    var procedureTypesList = [];\n    this.props.responseDataList.procedureTypesList.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var materialList = [];\n    this.props.responseDataList.materialsList.forEach(element => {\n      materialList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n\n    if (!this.props.isEditing) {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editUserInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: this.props.onEdit,\n          children: \"Edit service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.onDelete(this.props.activeId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n          },\n          children: \"Delete service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this);\n      serviceInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Service name: \", procedureName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Service description: \", procedureDescription]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time amount: \", timeAmount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Price: \", price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this);\n    } else {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmUserInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.onEdit();\n              this.props.setUpdateModalState();\n              this.props.onUpdate(this.props.activeMenu, serviceToUpdate);\n            },\n            children: \"Save changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this);\n      serviceInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Service name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              defaultValue: procedureName,\n              onChange: e => {\n                serviceToUpdate.procedureName = e.target.value;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Service description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              defaultValue: procedureDescription,\n              onChange: e => {\n                serviceToUpdate.procedureDescription = e.target.value;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Price:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              defaultValue: price,\n              onChange: e => {\n                serviceToUpdate.procedurePrice = e.target.value;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Time amount:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"tel\",\n              defaultValue: timeAmount,\n              onChange: e => {\n                serviceToUpdate.timeAmount = e.target.value;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Materials:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              isMulti: true,\n              maxMenuHeight: 100,\n              options: materialList,\n              onChange: data => {\n                serviceToUpdate.materials = [];\n                this.props.responseDataList.materials.forEach(element => {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i].value == element.materialId) serviceToUpdate.materials.push(element);\n                  }\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"ProcedureType:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              options: procedureTypesList,\n              onChange: data => {\n                this.props.responseDataList.procedureTypes.forEach(element => {\n                  if (element.procedureTypeName === data.label) {\n                    serviceToUpdate.procedureType = element;\n                  }\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          background: 'wheat',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          fontSize: '45px',\n          border: '3px solid black',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.updateModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setUpdateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: serviceInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    updateModalOpen: state.updateModalOpen,\n    responseDataList: state.responseDataList,\n    singleResponseData: state.singleResponseData,\n    isEditing: state.isEditing,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(SetUpdateModalState()),\n    onEdit: () => dispatch(SetEditState()),\n    onDelete: (id, menu) => {\n      dispatch(DeleteData(id, menu));\n    },\n    onUpdate: (activeMenu, data) => dispatch(UpdateData(activeMenu, data))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateServiceModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/UpdateServiceModal.js"],"names":["React","connect","Modal","SetUpdateModalState","SetEditState","DeleteData","UpdateData","Select","UpdateServiceModal","PureComponent","render","procedureName","props","singleResponseData","procedureDescription","timeAmount","price","procedurePrice","serviceInfoArea","actionButtons","serviceToUpdate","procedureType","materials","procedureTypesList","responseDataList","forEach","element","push","value","label","text","materialList","materialsList","isEditing","onEdit","onDelete","activeId","activeMenu","setUpdateModalState","onUpdate","e","target","data","i","length","materialId","procedureTypes","procedureTypeName","modal","background","fontFamily","alignItems","textAlign","fontSize","border","borderRadius","updateModalOpen","mapStateToProps","state","mapDispatchToProps","dispatch","id","menu"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport {\r\n  SetUpdateModalState,\r\n  SetEditState,\r\n  DeleteData,\r\n  UpdateData,\r\n} from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\n\r\nclass UpdateServiceModal extends React.PureComponent {\r\n  render() {\r\n    var procedureName = this.props.singleResponseData.procedureName;\r\n    var procedureDescription =\r\n      this.props.singleResponseData.procedureDescription;\r\n    var timeAmount = this.props.singleResponseData.timeAmount;\r\n    var price = this.props.singleResponseData.procedurePrice;\r\n    var serviceInfoArea;\r\n    var actionButtons;\r\n    var serviceToUpdate = {\r\n      procedureName: this.props.singleResponseData.procedureName,\r\n      procedureDescription: this.props.singleResponseData.procedureDescription,\r\n      timeAmount: this.props.singleResponseData.timeAmount,\r\n      procedurePrice: this.props.singleResponseData.procedurePrice,\r\n      procedureType: this.props.singleResponseData.procedureType,\r\n      materials: this.props.singleResponseData.materials,\r\n    };\r\n\r\n    var procedureTypesList = [];\r\n    this.props.responseDataList.procedureTypesList.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var materialList = [];\r\n    this.props.responseDataList.materialsList.forEach((element) => {\r\n      materialList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    if (!this.props.isEditing) {\r\n      actionButtons = (\r\n        <div className=\"editUserInfo\">\r\n          <button className=\"modalButton\" onClick={this.props.onEdit}>\r\n            Edit service\r\n          </button>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.onDelete(this.props.activeId, this.props.activeMenu);\r\n              this.props.setUpdateModalState();\r\n            }}\r\n          >\r\n            Delete service\r\n          </button>\r\n        </div>\r\n      );\r\n\r\n      serviceInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <p>Service name: {procedureName}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Service description: {procedureDescription}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Time amount: {timeAmount}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Price: {price}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      actionButtons = (\r\n        <div className=\"confirmUserInfo\">\r\n          <div>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.onEdit();\r\n                this.props.setUpdateModalState();\r\n                this.props.onUpdate(this.props.activeMenu, serviceToUpdate);\r\n              }}\r\n            >\r\n              Save changes\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      serviceInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Service name:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <input\r\n                type=\"text\"\r\n                defaultValue={procedureName}\r\n                onChange={(e) => {\r\n                  serviceToUpdate.procedureName = e.target.value;\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Service description:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <input\r\n                type=\"text\"\r\n                defaultValue={procedureDescription}\r\n                onChange={(e) => {\r\n                  serviceToUpdate.procedureDescription = e.target.value;\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Price:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <input\r\n                type=\"text\"\r\n                defaultValue={price}\r\n                onChange={(e) => {\r\n                  serviceToUpdate.procedurePrice = e.target.value;\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Time amount:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <input\r\n                type=\"tel\"\r\n                defaultValue={timeAmount}\r\n                onChange={(e) => {\r\n                  serviceToUpdate.timeAmount = e.target.value;\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Materials:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                isMulti={true}\r\n                maxMenuHeight={100}\r\n                options={materialList}\r\n                onChange={(data) => {\r\n                  serviceToUpdate.materials = [];\r\n                  this.props.responseDataList.materials.forEach((element) => {\r\n                    for (var i = 0; i < data.length; i++) {\r\n                      if (data[i].value == element.materialId)\r\n                        serviceToUpdate.materials.push(element);\r\n                    }\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>ProcedureType:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                options={procedureTypesList}\r\n                onChange={(data) => {\r\n                  this.props.responseDataList.procedureTypes.forEach(\r\n                    (element) => {\r\n                      if (element.procedureTypeName === data.label) {\r\n                        serviceToUpdate.procedureType = element;\r\n                      }\r\n                    },\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            background: 'wheat',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            fontSize: '45px',\r\n            border: '3px solid black',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.updateModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setUpdateModalState}\r\n      >\r\n        <>\r\n          <div className=\"profileBody\">{serviceInfoArea}</div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    updateModalOpen: state.updateModalOpen,\r\n    responseDataList: state.responseDataList,\r\n    singleResponseData: state.singleResponseData,\r\n    isEditing: state.isEditing,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(SetUpdateModalState()),\r\n    onEdit: () => dispatch(SetEditState()),\r\n    onDelete: (id, menu) => {\r\n      dispatch(DeleteData(id, menu));\r\n    },\r\n    onUpdate: (activeMenu, data) => dispatch(UpdateData(activeMenu, data)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateServiceModal);\r\n"]},"metadata":{},"sourceType":"module"}
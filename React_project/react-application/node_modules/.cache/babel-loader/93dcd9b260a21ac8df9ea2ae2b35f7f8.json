{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_1 = require(\"react\");\n\nvar loadImageProps_1 = require(\"./loadImageProps\");\n\nvar isDefined_1 = require(\"./isDefined\");\n\nvar constants_1 = require(\"./constants\");\n\nvar transparentGIF_1 = require(\"./transparentGIF\");\n\nvar ImageTemplate_1 = require(\"./ImageTemplate\");\n/**\n * Chooses a different src string depending on\n * the status provided.\n * That is, returns the loadingURL src if the status is\n * `LOADING`, the errorURL src if the status is `ERROR`,\n * the emptyURL src if the status is `EMPTY`, and the\n * default src for any other status\n * @param status the status, `LOADING`, `ERROR`, `EMPTY` or `DONE`\n * @param src the default src string, to be used on DONE status, or if other URLS are not available\n * @param urls an object of three urls, loadingURL,errorURL,emptyURL, all optional\n */\n\n\nexports.getSRC = function (status, src, props) {\n  if (!props) {\n    return src || '';\n  }\n\n  ;\n  var loadingURL = props.loadingURL,\n      errorURL = props.errorURL,\n      emptyURL = props.emptyURL;\n  var ret = status === constants_1.LOADING && loadingURL ? loadingURL : status === constants_1.ERROR && errorURL ? errorURL : status === constants_1.EMPTY && emptyURL ? emptyURL : src || '';\n  return ret;\n};\n/**\n * Returns the status\n * @param props\n */\n\n\nexports.getStatus = function (props) {\n  return props.status || constants_1.DONE;\n};\n/**\n * returns the crop type\n * @param props\n */\n\n\nexports.getCrop = function (props) {\n  return props && props.crop ? props.crop : 'contain';\n};\n/**\n * Returns a data-x string, where 'x' is the status\n * useful for css targeting\n * @param status the status of the image loader\n */\n\n\nexports.statusAsAttr = function (status) {\n  return \"data-status-\" + (status || 'unknown').toLowerCase();\n};\n\nvar ImageLoader =\n/** @class */\nfunction (_super) {\n  __extends(ImageLoader, _super);\n\n  function ImageLoader(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    ;\n    _this.state = {\n      src: transparentGIF_1.transparentGIF,\n      alt: '',\n      status: constants_1.EMPTY,\n      width: 0,\n      height: 0\n    };\n    return _this;\n  }\n\n  ;\n\n  ImageLoader.prototype.load = function (props) {\n    var _this = this;\n\n    this.setState({\n      status: constants_1.LOADING\n    });\n    ;\n    loadImageProps_1.loadImageProps(props, function (error, _a) {\n      var src = _a.src,\n          alt = _a.alt,\n          width = _a.width,\n          height = _a.height;\n      return error ? _this.setState({\n        status: constants_1.ERROR,\n        error: error\n      }) : _this.setState({\n        status: constants_1.DONE,\n        src: src,\n        alt: alt,\n        width: width,\n        height: height\n      });\n    });\n  };\n\n  ;\n\n  ImageLoader.prototype.componentDidMount = function () {\n    if (this.props.file) {\n      this.load(this.props.file);\n    }\n  };\n\n  ;\n\n  ImageLoader.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.file !== this.props.file) {\n      if (nextProps.file) {\n        this.load(nextProps.file);\n      } else if (nextProps.file == null) {\n        this.setState({\n          src: transparentGIF_1.transparentGIF\n        });\n      }\n    }\n  };\n\n  ;\n\n  ImageLoader.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    return isDefined_1.isDefined(nextProps.file) && nextProps.file !== this.props.file || isDefined_1.isDefined(nextProps.alt) && nextProps.alt !== this.props.alt || isDefined_1.isDefined(nextProps.template) && nextProps.template !== this.props.template || nextState.src !== this.state.src;\n  };\n\n  ;\n\n  ImageLoader.prototype.render = function () {\n    var _a = this.state,\n        src = _a.src,\n        imgWidth = _a.width,\n        imgHeight = _a.height;\n    var _b = this.props,\n        template = _b.template,\n        width = _b.width,\n        height = _b.height,\n        className = _b.className;\n    var alt = this.props.alt || this.state.alt || '';\n    ;\n    var crop = exports.getCrop(this.props);\n    var status = exports.getStatus(this.state);\n    var statusAttr = exports.statusAsAttr(status);\n\n    var props = __assign({}, this.props, {\n      src: exports.getSRC(status, src, this.props),\n      alt: alt,\n      width: width,\n      height: height,\n      imgWidth: imgWidth,\n      imgHeight: imgHeight,\n      crop: crop,\n      status: status,\n      statusAttr: statusAttr,\n      className: className\n    });\n\n    return React.createElement(template, props);\n  };\n\n  ImageLoader.defaultProps = {\n    template: ImageTemplate_1.ImageTemplate,\n    crop: 'contain',\n    emptyURL: transparentGIF_1.transparentGIF\n  };\n  return ImageLoader;\n}(react_1.Component);\n\nexports.ImageLoader = ImageLoader;\nexports.default = ImageLoader;","map":{"version":3,"sources":["C:\\Users\\aries\\Desktop\\React project\\react-application\\node_modules\\react-image-file\\src\\ImageLoader.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Component } from 'react'\nimport { loadImageProps, ImageProps } from './loadImageProps'\nimport { isDefined } from './isDefined'\nimport { EMPTY, DONE, ERROR, LOADING, ImageLoaderLoadStatus } from './constants'\nimport { transparentGIF } from './transparentGIF'\nimport { ImageTemplate } from './ImageTemplate'\n\n/** \n * A type representing the crop option\n */\nexport type CropAttribute = 'cover' | 'contain'\n\nexport interface ImageLoaderProps \n  { template?: any\n  ; file?: string | File | Blob\n  ; alt?: string\n  ; crop?: CropAttribute\n  ; loadingURL?: string\n  ; errorURL?: string\n  ; emptyURL?: string\n  ; width?: number\n  ; height?: number\n  ; className?: string\n  }\n\nexport interface ImageLoaderState\n  { src?: string\n  ; alt?: string\n  ; status?: ImageLoaderLoadStatus\n  ; width: number\n  ; height: number\n  ; error?: Error | DOMError\n  }\n\nexport interface ImageTemplateProps extends ImageLoaderProps\n  { src: string\n  ; alt: string\n  ; width?: number\n  ; height?: number\n  ; imgWidth: number\n  ; imgHeight: number\n  ; status: ImageLoaderLoadStatus\n  ; statusAttr: string\n  ; children?: any\n  ; className?: string\n  }\n\n/**\n * Chooses a different src string depending on\n * the status provided.\n * That is, returns the loadingURL src if the status is \n * `LOADING`, the errorURL src if the status is `ERROR`,\n * the emptyURL src if the status is `EMPTY`, and the\n * default src for any other status  \n * @param status the status, `LOADING`, `ERROR`, `EMPTY` or `DONE`\n * @param src the default src string, to be used on DONE status, or if other URLS are not available\n * @param urls an object of three urls, loadingURL,errorURL,emptyURL, all optional\n */\nexport const getSRC = \n  ( status?: ImageLoaderLoadStatus, src?: string, props?: ImageLoaderProps )=>\n  { if( !props ){ return src || '' }\n  ; const { loadingURL, errorURL, emptyURL } = props\n  ; const ret =\n    ( status === LOADING && loadingURL\n    ? loadingURL\n    : ( status === ERROR && errorURL\n      ? errorURL\n      : ( status === EMPTY && emptyURL\n        ? emptyURL\n        : src || ''\n        )\n      )\n    )\n  ; return ret\n  }\n\n/**\n * Returns the status\n * @param props \n */\nexport const getStatus = \n  ( props: ImageLoaderState ): ImageLoaderLoadStatus => \n  ( props.status || DONE )\n\n/**\n * returns the crop type\n * @param props \n */\nexport const getCrop = \n  ( props: ImageLoaderProps ): CropAttribute => \n  ( props && props.crop ? props.crop : 'contain' )\n\n/**\n * Returns a data-x string, where 'x' is the status\n * useful for css targeting\n * @param status the status of the image loader\n */\nexport const statusAsAttr = \n  ( status?: ImageLoaderLoadStatus ) => \n  ( `data-status-${(status||'unknown').toLowerCase()}` )\n\nexport class ImageLoader extends Component< ImageLoaderProps, ImageLoaderState >\n  { static defaultProps:ImageLoaderProps = \n    { template: ImageTemplate\n    ,  crop:'contain'\n    ,  emptyURL:transparentGIF\n    }\n  ; constructor(props:ImageLoaderProps,context:any)\n    { super( props, context );\n    ; this.state =\n      { src:transparentGIF\n      ,  alt:''\n      ,  status:EMPTY\n      ,  width:0\n      ,  height:0\n      }\n    }\n  ; load( props: File | Blob | string )\n    { this.setState( { status: LOADING } );\n    ; loadImageProps\n        ( props\n        , ( error: Error | DOMError | null\n          , { src, alt, width, height }: ImageProps\n          ) =>\n          ( error\n          ? this.setState({status:ERROR,error})\n          : this.setState({\n              status:DONE\n            ,  src\n            ,  alt\n            ,  width\n            ,  height\n            })\n          )\n        )\n    }\n  ; componentDidMount()\n    { if( this.props.file )\n      { this.load( this.props.file )\n      }\n    }\n  ; componentWillReceiveProps( nextProps: ImageLoaderProps )\n    { if( nextProps.file !== this.props.file )\n      { if( nextProps.file )\n        { this.load( nextProps.file )\n        }\n        else if( nextProps.file == null )\n        { this.setState( { src: transparentGIF } )\n        }\n      }\n    }\n  ; shouldComponentUpdate( nextProps: ImageLoaderProps, nextState: ImageLoaderState ): boolean\n    { return (\n      ( isDefined( nextProps.file ) && nextProps.file !== this.props.file ) ||\n      ( isDefined( nextProps.alt ) && nextProps.alt !== this.props.alt ) ||\n      ( isDefined( nextProps.template ) && nextProps.template !== this.props.template ) ||\n      ( nextState.src !== this.state.src )\n    )\n  }\n  ; render()\n  { const \n    { src\n    , width: imgWidth\n    , height: imgHeight\n    } = this.state\n  ; const \n    { template\n    , width\n    , height\n    , className\n    } = this.props\n  ; const alt = this.props.alt || this.state.alt || '';\n  ; const crop = getCrop( this.props ) \n  ; const status = getStatus( this.state )\n  ; const statusAttr = statusAsAttr( status )\n  ; const props:ImageTemplateProps = \n    {...this.props\n    , src:getSRC( status, src, this.props )\n    , alt\n    , width\n    , height\n    , imgWidth\n    , imgHeight\n    , crop\n    , status\n    , statusAttr\n    , className\n    }\n  ; return React.createElement( template, props );\n  }\n}\n\nexport default ImageLoader"]},"metadata":{},"sourceType":"script"}
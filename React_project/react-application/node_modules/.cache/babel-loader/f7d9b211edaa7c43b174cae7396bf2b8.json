{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\UpdateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport { SetUpdateModalState, SetEditState, DeleteData, UpdateData } from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UpdateOrderModal extends React.PureComponent {\n  render() {\n    var orderInfoArea;\n    var actionButtons;\n    var clientName = '';\n    var employeeName = '';\n    var procedure = '';\n    var procedureType = '';\n    var orderDate = this.props.singleResponseData.dateOfService.substr(0, 10);\n    var orderTime = this.props.singleResponseData.dateOfService.substr(11, 5);\n\n    if (this.props.singleResponseData !== '') {\n      clientName = this.props.singleResponseData.client.firstName + this.props.singleResponseData.client.lastName;\n      employeeName = this.props.singleResponseData.employee.firstName + this.props.singleResponseData.employee.lastName;\n      procedure = this.props.singleResponseData.procedure.procedureName;\n    }\n\n    var orderToUpdate = {\n      dateOfService: this.props.activeDate,\n      client: this.props.activeClient,\n      procedure: this.props.activeProcedure,\n      employee: this.props.activeEmployee\n    };\n    var clientList = [];\n    this.props.responseDataList.clients.forEach(element => {\n      clientList.push({\n        value: element.clientId,\n        label: element.firstName + ' ' + element.lastName\n      });\n    });\n    var procedureTypesList = [];\n    this.props.responseDataList.procedureTypes.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var procedureList = [];\n    this.props.responseDataList.procedures.forEach(element => {\n      procedureList.push({\n        value: element.procedureId,\n        label: element.procedureName\n      });\n    });\n    var employeeList = [];\n    this.props.responseDataList.employees.forEach(element => {\n      employeeList.push({\n        value: element.employeeId,\n        label: element.firstName + ' ' + element.lastName\n      });\n    });\n\n    if (this.props.schedule !== '') {\n      var scheduleTimesList = [];\n      this.props.schedule.forEach(time => {\n        scheduleTimesList.push({\n          value: time,\n          label: time.substr(11)\n        });\n      });\n    }\n\n    if (!this.props.isEditing) {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editUserInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: this.props.onEdit,\n          children: \"Edit order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.onDelete(this.props.activeId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n          },\n          children: \"Delete order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this);\n      orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date of service: \", orderDate + ' ' + orderTime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Client name: \", clientName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Procedure:\", procedure]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Employee: \", employeeName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time of service: \", orderDate, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this);\n    } else {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmUserInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.onEdit();\n              this.props.setUpdateModalState();\n              this.props.onUpdate(this.props.activeMenu, orderToUpdate);\n            },\n            children: \"Save changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this);\n      orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Date of service:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              defaultValue: orderDate,\n              onChange: e => {\n                orderToUpdate.dateOfService = e.target.value;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Client name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              onChange: data => {\n                this.props.responseDataList.clients.forEach(client => {\n                  if (client.clientId === data.value) orderToUpdate.client = client;\n                });\n              },\n              options: clientList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Procedure type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              onChange: data => {\n                this.props.responseDataList.procedureTypes.forEach(type => {\n                  if (type.procedureTypeId === data.value) orderToUpdate.procedureType = type;\n                });\n              },\n              options: procedureTypesList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Procedure:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              onChange: data => {\n                this.props.responseDataList.procedures.forEach(procedure => {\n                  if (procedure.procedureId === data.value) orderToUpdate.procedure = procedure;\n                });\n              },\n              options: procedureList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Employee:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              onChange: data => {\n                this.props.responseDataList.employees.forEach(employee => {\n                  if (employee.employeeId === data.value) orderToUpdate.employee = employee;\n                });\n              },\n              options: employeeList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Time of service:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              onChange: data => {\n                orderToUpdate.employee = data.value;\n              },\n              options: scheduleTimesList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          maxWidth: 'fit-content',\n          background: '#6c3636',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          border: '6px solid #f7f6f6',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.updateModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setUpdateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: orderInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    updateModalOpen: state.updateModalOpen,\n    responseDataList: state.responseDataList,\n    singleResponseData: state.singleResponseData,\n    isEditing: state.isEditing,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    schedule: state.schedule\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(SetUpdateModalState()),\n    onEdit: () => dispatch(SetEditState()),\n    onDelete: (id, menu) => {\n      dispatch(DeleteData(id, menu));\n    },\n    onUpdate: (activeMenu, data) => dispatch(UpdateData(activeMenu, data))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/UpdateOrderModal.js"],"names":["React","connect","Modal","SetUpdateModalState","SetEditState","DeleteData","UpdateData","Select","UpdateOrderModal","PureComponent","render","orderInfoArea","actionButtons","clientName","employeeName","procedure","procedureType","orderDate","props","singleResponseData","dateOfService","substr","orderTime","client","firstName","lastName","employee","procedureName","orderToUpdate","activeDate","activeClient","activeProcedure","activeEmployee","clientList","responseDataList","clients","forEach","element","push","value","clientId","label","procedureTypesList","procedureTypes","text","procedureList","procedures","procedureId","employeeList","employees","employeeId","schedule","scheduleTimesList","time","isEditing","onEdit","onDelete","activeId","activeMenu","setUpdateModalState","onUpdate","e","target","data","type","procedureTypeId","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","updateModalOpen","mapStateToProps","state","mapDispatchToProps","dispatch","id","menu"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport {\r\n  SetUpdateModalState,\r\n  SetEditState,\r\n  DeleteData,\r\n  UpdateData,\r\n} from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\n\r\nclass UpdateOrderModal extends React.PureComponent {\r\n  render() {\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var clientName = '';\r\n    var employeeName = '';\r\n    var procedure = '';\r\n    var procedureType = '';\r\n    var orderDate = this.props.singleResponseData.dateOfService.substr(0, 10);\r\n    var orderTime = this.props.singleResponseData.dateOfService.substr(11, 5);\r\n    if (this.props.singleResponseData !== '') {\r\n      clientName =\r\n        this.props.singleResponseData.client.firstName +\r\n        this.props.singleResponseData.client.lastName;\r\n      employeeName =\r\n        this.props.singleResponseData.employee.firstName +\r\n        this.props.singleResponseData.employee.lastName;\r\n      procedure = this.props.singleResponseData.procedure.procedureName;\r\n    }\r\n\r\n    var orderToUpdate = {\r\n      dateOfService: this.props.activeDate,\r\n      client: this.props.activeClient,\r\n      procedure: this.props.activeProcedure,\r\n      employee: this.props.activeEmployee,\r\n    };\r\n\r\n    var clientList = [];\r\n    this.props.responseDataList.clients.forEach((element) => {\r\n      clientList.push({\r\n        value: element.clientId,\r\n        label: element.firstName + ' ' + element.lastName,\r\n      });\r\n    });\r\n\r\n    var procedureTypesList = [];\r\n    this.props.responseDataList.procedureTypes.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var procedureList = [];\r\n    this.props.responseDataList.procedures.forEach((element) => {\r\n      procedureList.push({\r\n        value: element.procedureId,\r\n        label: element.procedureName,\r\n      });\r\n    });\r\n\r\n    var employeeList = [];\r\n\r\n    this.props.responseDataList.employees.forEach((element) => {\r\n      employeeList.push({\r\n        value: element.employeeId,\r\n        label: element.firstName + ' ' + element.lastName,\r\n      });\r\n    });\r\n\r\n    if (this.props.schedule !== '') {\r\n      var scheduleTimesList = [];\r\n      this.props.schedule.forEach((time) => {\r\n        scheduleTimesList.push({\r\n          value: time,\r\n          label: time.substr(11),\r\n        });\r\n      });\r\n    }\r\n\r\n    if (!this.props.isEditing) {\r\n      actionButtons = (\r\n        <div className=\"editUserInfo\">\r\n          <button className=\"modalButton\" onClick={this.props.onEdit}>\r\n            Edit order\r\n          </button>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.onDelete(this.props.activeId, this.props.activeMenu);\r\n              this.props.setUpdateModalState();\r\n            }}\r\n          >\r\n            Delete order\r\n          </button>\r\n        </div>\r\n      );\r\n\r\n      orderInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <p>Date of service: {orderDate + ' ' + orderTime}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Client name: {clientName}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>\r\n              Procedure type:\r\n              {/* {this.props.singleResponseData.procedureType.procedureTypeName} */}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>\r\n              Procedure:\r\n              {procedure}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Employee: {employeeName}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Time of service: {orderDate} </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      actionButtons = (\r\n        <div className=\"confirmUserInfo\">\r\n          <div>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.onEdit();\r\n                this.props.setUpdateModalState();\r\n                this.props.onUpdate(this.props.activeMenu, orderToUpdate);\r\n              }}\r\n            >\r\n              Save changes\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      orderInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Date of service:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <input\r\n                type=\"text\"\r\n                defaultValue={orderDate}\r\n                onChange={(e) => {\r\n                  orderToUpdate.dateOfService = e.target.value;\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Client name:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                onChange={(data) => {\r\n                  this.props.responseDataList.clients.forEach((client) => {\r\n                    if (client.clientId === data.value)\r\n                      orderToUpdate.client = client;\r\n                  });\r\n                }}\r\n                options={clientList}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Procedure type:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                onChange={(data) => {\r\n                  this.props.responseDataList.procedureTypes.forEach((type) => {\r\n                    if (type.procedureTypeId === data.value)\r\n                      orderToUpdate.procedureType = type;\r\n                  });\r\n                }}\r\n                options={procedureTypesList}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Procedure:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                onChange={(data) => {\r\n                  this.props.responseDataList.procedures.forEach(\r\n                    (procedure) => {\r\n                      if (procedure.procedureId === data.value)\r\n                        orderToUpdate.procedure = procedure;\r\n                    },\r\n                  );\r\n                }}\r\n                options={procedureList}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Employee:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                onChange={(data) => {\r\n                  this.props.responseDataList.employees.forEach((employee) => {\r\n                    if (employee.employeeId === data.value)\r\n                      orderToUpdate.employee = employee;\r\n                  });\r\n                }}\r\n                options={employeeList}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Time of service:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                onChange={(data) => {\r\n                  orderToUpdate.employee = data.value;\r\n                }}\r\n                options={scheduleTimesList}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            maxWidth: 'fit-content',\r\n            background: '#6c3636',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            border: '6px solid #f7f6f6',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.updateModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setUpdateModalState}\r\n      >\r\n        <>\r\n          <div className=\"profileBody\">{orderInfoArea}</div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    updateModalOpen: state.updateModalOpen,\r\n    responseDataList: state.responseDataList,\r\n    singleResponseData: state.singleResponseData,\r\n    isEditing: state.isEditing,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    schedule: state.schedule,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(SetUpdateModalState()),\r\n    onEdit: () => dispatch(SetEditState()),\r\n    onDelete: (id, menu) => {\r\n      dispatch(DeleteData(id, menu));\r\n    },\r\n    onUpdate: (activeMenu, data) => dispatch(UpdateData(activeMenu, data)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
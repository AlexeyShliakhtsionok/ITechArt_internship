{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isString_1 = require(\"./isString\");\n\nvar isBlob_1 = require(\"./isBlob\");\n\nvar isFile_1 = require(\"./isFile\");\n/**\n * This is a dumb function that essentially takes a string and assigns it to an object\n * of shape `{src:string}`. It exists only so the `loadAnything` function, which accepts\n * blobs, files, or strings, works with whatever it is given\n * @param src a string\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if `src` is empty, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n */\n\n\nexports.loadString = function (src, cb) {\n  return src ? cb(null, {\n    src: src\n  }) : cb(new Error(\"src is empty\"));\n};\n/**\n * Creates a suitable data string to use from a dom File object\n * @param file a dom File object\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and an `alt` property containing the file name\n */\n\n\nexports.loadFile = function (file, cb) {\n  var reader = new FileReader();\n\n  reader.onload = function (evt) {\n    cb(null, {\n      src: reader.result,\n      alt: file.name\n    });\n  };\n\n  reader.onerror = function (evt) {\n    return cb(reader.error);\n  };\n\n  reader.readAsDataURL(file);\n};\n/**\n * Creates a data string from a blob, that you can use in an image.\n * Don't forget to call `done` once you've used it to free the memory\n * @param blob the blob\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\n\n\nexports.loadBlob = function (blob, cb) {\n  try {\n    var src_1 = URL.createObjectURL(blob);\n\n    var done = function () {\n      return URL.revokeObjectURL(src_1);\n    };\n\n    cb(null, {\n      src: src_1\n    }, done);\n  } catch (err) {\n    return cb(err);\n  }\n};\n/**\n * Loads a Blob, or a File in a way that makes it suitable to be used in a node image\n * Does nothing to strings, but accepts them in order to make it easy to use this function everywhere\n *\n * @param prop the src to load\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and possibly an `alt` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\n\n\nexports.loadAnything = function (prop, cb) {\n  return isString_1.isString(prop) ? exports.loadString(prop, cb) : isBlob_1.isBlob(prop) ? exports.loadBlob(prop, cb) : isFile_1.isFile(prop) ? exports.loadFile(prop, cb) : cb(new Error(\"prop `\" + prop + \"` is not a valid loadable object\"));\n};\n\nexports.default = exports.loadAnything;","map":{"version":3,"sources":["C:\\Users\\aries\\Desktop\\React project\\react-application\\node_modules\\react-image-file\\src\\load.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAyBA;;;;;;;;AAQG;;;AACU,OAAA,CAAA,UAAA,GACX,UAAC,GAAD,EAAY,EAAZ,EAA2B;AAC3B,SAAE,GAAG,GACH,EAAE,CAAC,IAAD,EAAM;AAAC,IAAA,GAAG,EAAA;AAAJ,GAAN,CADC,GAEH,EAAE,CAAC,IAAI,KAAJ,CAAU,cAAV,CAAD,CAFJ;AAGC,CALU;AAOb;;;;;;AAMG;;;AACU,OAAA,CAAA,QAAA,GACX,UAAC,IAAD,EAAW,EAAX,EAA0B;AACxB,MAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;AACA,EAAA,MAAM,CAAC,MAAP,GAAgB,UAAC,GAAD,EAAkB;AAChC,IAAA,EAAE,CAAE,IAAF,EACF;AAAE,MAAA,GAAG,EAAC,MAAM,CAAC,MAAb;AACE,MAAA,GAAG,EAAC,IAAI,CAAC;AADX,KADE,CAAF;AAID,GALD;;AAMA,EAAA,MAAM,CAAC,OAAP,GAAiB,UAAC,GAAD,EAAe;AAAK,WAAA,EAAE,CAAC,MAAM,CAAT,KAAE,CAAF;AAAgB,GAArD;;AACA,EAAA,MAAM,CAAC,aAAP,CAAqB,IAArB;AACD,CAXU;AAab;;;;;;;;AAQG;;;AACU,OAAA,CAAA,QAAA,GACX,UAAE,IAAF,EAAc,EAAd,EAA8B;AAC5B,MACA;AAAE,QAAM,KAAG,GAAG,GAAG,CAAC,eAAJ,CAAqB,IAArB,CAAZ;;AACA,QAAM,IAAI,GAAG,YAAA;AAAM,aAAA,GAAG,CAAC,eAAJ,CAAA,KAAA,CAAA;AAA0B,KAA7C;;AACA,IAAA,EAAE,CAAE,IAAF,EAAQ;AAAE,MAAA,GAAG,EAAA;AAAL,KAAR,EAAyC,IAAzC,CAAF;AACD,GAJD,CAKA,OAAO,GAAP,EACA;AAAE,WAAO,EAAE,CAAE,GAAF,CAAT;AACD;AACF,CAVU;AAYb;;;;;;;;;AASG;;;AACU,OAAA,CAAA,YAAA,GAAe,UAAE,IAAF,EAA8B,EAA9B,EAA8C;AACxE,SAAE,UAAA,CAAA,QAAA,CAAU,IAAV,IACA,OAAA,CAAA,UAAA,CAAY,IAAZ,EAAkB,EAAlB,CADA,GAEE,QAAA,CAAA,MAAA,CAAQ,IAAR,IACA,OAAA,CAAA,QAAA,CAAU,IAAV,EAAgB,EAAhB,CADA,GAEE,QAAA,CAAA,MAAA,CAAQ,IAAR,IACA,OAAA,CAAA,QAAA,CAAU,IAAV,EAAgB,EAAhB,CADA,GAEA,EAAE,CAAE,IAAI,KAAJ,CAAW,WAAU,IAAV,GAAc,kCAAzB,CAAF,CANR;AASC,CAVU;;AAYb,OAAA,CAAA,OAAA,GAAe,OAAA,CAAA,YAAf","sourcesContent":["import { isString } from './isString'\nimport { isBlob } from './isBlob'\nimport { isFile } from './isFile'\n\nexport interface ImageContentFromString{\n  src:string\n}\n\nexport interface ImageContentFromFile{\n  src:string\n  alt:string\n}\n\nexport interface ImageContentFromBlob{\n  src:string\n}\n\nexport type ImageContent = ImageContentFromBlob | ImageContentFromFile | ImageContentFromString\n\nexport interface LoadCallback{\n  (err:null,res:ImageContentFromString):void\n  (err:null,res:ImageContentFromFile):void\n  (err:null,res:ImageContentFromBlob,done:()=>void):void\n  (err:null,res:ImageContent,done?:()=>void):void\n  (err:Error|DOMError):void\n}\n\n/**\n * This is a dumb function that essentially takes a string and assigns it to an object\n * of shape `{src:string}`. It exists only so the `loadAnything` function, which accepts\n * blobs, files, or strings, works with whatever it is given\n * @param src a string\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if `src` is empty, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n */\nexport const loadString = \n  (src:string,cb:LoadCallback) =>\n  ( src\n  ? cb(null,{src} as ImageContentFromString)\n  : cb(new Error(`src is empty`))\n  )\n\n/**\n * Creates a suitable data string to use from a dom File object\n * @param file a dom File object\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and an `alt` property containing the file name\n */\nexport const loadFile = \n  (file:File,cb:LoadCallback) => \n  { const reader = new FileReader()\n  ; reader.onload = (evt:ProgressEvent) =>\n    { cb( null,\n      { src:reader.result\n      , alt:file.name\n      } as ImageContentFromFile)\n    }\n  ; reader.onerror = (evt:ErrorEvent) => cb(reader.error)\n  ; reader.readAsDataURL(file);\n  }\n\n/**\n * Creates a data string from a blob, that you can use in an image.\n * Don't forget to call `done` once you've used it to free the memory\n * @param blob the blob\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexport const loadBlob = \n  ( blob: Blob, cb: LoadCallback ) =>\n  { try\n    { const src = URL.createObjectURL( blob )\n    ; const done = () => URL.revokeObjectURL( src )\n    ; cb( null, { src } as ImageContentFromBlob, done );\n    }\n    catch( err )\n    { return cb( err )\n    }\n  }\n\n/**\n * Loads a Blob, or a File in a way that makes it suitable to be used in a node image\n * Does nothing to strings, but accepts them in order to make it easy to use this function everywhere\n * \n * @param prop the src to load\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and possibly an `alt` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexport const loadAnything = ( prop: File | Blob | string, cb: LoadCallback ) =>\n  ( isString( prop )\n  ? loadString( prop, cb )\n  : ( isBlob( prop )\n    ? loadBlob( prop, cb )\n    : ( isFile( prop )\n      ? loadFile( prop, cb )\n      : cb( new Error( `prop \\`${prop}\\` is not a valid loadable object` ) )\n      )\n    )\n  )\n\nexport default loadAnything"]},"metadata":{},"sourceType":"script"}
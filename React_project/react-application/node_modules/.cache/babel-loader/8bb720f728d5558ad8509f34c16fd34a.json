{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\Orders.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass OrdersList extends React.PureComponent {\n  render() {\n    if (this.props.responseDataList !== '') {\n      var elements = [];\n      var element;\n\n      var header = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date of service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client phone number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this);\n\n      for (let i = 0; i < 5; i++) {\n        element = '';\n        element = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: this.props.responseDataList[i][0],\n          onClick: async () => {\n            this.props.setActiveId(this.props.responseDataList[i][0]);\n            await this.props.getOrder(this.props.responseDataList[i].key, this.props.activeMenu);\n            this.props.setUpdateModalState();\n            this.props.getSchedule(this.props.responseDataList.orders[i].employee.employeeId, this.props.responseDataList.orders[i].dateOfService, this.props.responseDataList.orders[i].procedure.procedureId, this.props.openTime, this.props.closeTime);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList[i].value[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList[i].value[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList[i].value[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList[i].value[3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList[i].value[4]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList[i].value[5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList[i].value[6]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, this.props.responseDataList[i][0], true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this);\n        elements = elements.concat(element);\n      }\n    }\n\n    if (this.props.responseDataList !== '') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.setCreateModalState();\n          },\n          children: \"New order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataTable\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"tableStyle\",\n            children: header\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There is no Data in DB...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    responseDataList: state.responseDataList,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    openTime: state.openTime,\n    closeTime: state.closeTime\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getOrder: (id, activeMenu) => dispatch(actions.FetchSingleData(id, activeMenu)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/Orders.js"],"names":["React","connect","actions","CreateOrderModal","UpdateOrderModal","OrdersList","PureComponent","render","props","responseDataList","elements","element","header","i","setActiveId","getOrder","key","activeMenu","setUpdateModalState","getSchedule","orders","employee","employeeId","dateOfService","procedure","procedureId","openTime","closeTime","value","concat","setCreateModalState","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","FetchSingleData","open","close","GetAvaliableTimes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\r\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\r\n\r\nclass OrdersList extends React.PureComponent {\r\n  render() {\r\n    if (this.props.responseDataList !== '') {\r\n      var elements = [];\r\n      var element;\r\n      var header = (\r\n        <thead>\r\n          <tr>\r\n            <th>Date of service</th>\r\n            <th>Client name</th>\r\n            <th>Client phone number</th>\r\n            <th>Client email</th>\r\n            <th>Procedure name</th>\r\n            <th>Procedure cost</th>\r\n            <th>Employee</th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n\r\n      for (let i = 0; i < 5; i++) {\r\n        element = '';\r\n        element = (\r\n          <tr\r\n            key={this.props.responseDataList[i][0]}\r\n            id={this.props.responseDataList[i][0]}\r\n            onClick={async () => {\r\n              this.props.setActiveId(this.props.responseDataList[i][0]);\r\n              await this.props.getOrder(\r\n                this.props.responseDataList[i].key,\r\n                this.props.activeMenu,\r\n              );\r\n              this.props.setUpdateModalState();\r\n              this.props.getSchedule(\r\n                this.props.responseDataList.orders[i].employee.employeeId,\r\n                this.props.responseDataList.orders[i].dateOfService,\r\n                this.props.responseDataList.orders[i].procedure.procedureId,\r\n                this.props.openTime,\r\n                this.props.closeTime,\r\n              );\r\n            }}\r\n          >\r\n            <td>{this.props.responseDataList[i].value[0]}</td>\r\n            <td>{this.props.responseDataList[i].value[1]}</td>\r\n            <td>{this.props.responseDataList[i].value[2]}</td>\r\n            <td>{this.props.responseDataList[i].value[3]}</td>\r\n            <td>{this.props.responseDataList[i].value[4]}</td>\r\n            <td>{this.props.responseDataList[i].value[5]}</td>\r\n            <td>{this.props.responseDataList[i].value[6]}</td>\r\n          </tr>\r\n        );\r\n        elements = elements.concat(element);\r\n      }\r\n    }\r\n\r\n    if (this.props.responseDataList !== '') {\r\n      return (\r\n        <>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.setCreateModalState();\r\n            }}\r\n          >\r\n            New order\r\n          </button>\r\n          <div className=\"dataTable\">\r\n            <table className=\"tableStyle\">\r\n              {header}\r\n              {/* <tbody>{elements}</tbody> */}\r\n              {/* <CreateOrderModal />\r\n              <UpdateOrderModal /> */}\r\n            </table>\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <p>There is no Data in DB...</p>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    responseDataList: state.responseDataList,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getOrder: (id, activeMenu) =>\r\n      dispatch(actions.FetchSingleData(id, activeMenu)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);\r\n"]},"metadata":{},"sourceType":"module"}
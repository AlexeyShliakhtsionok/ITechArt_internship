{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\CompletedOrdersTable.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport RecordsPerPage from './PagesCountAndNavigationComponrnts/RecordsPerPageButtons';\nimport PageButtons from './PagesCountAndNavigationComponrnts/PagesButtons';\nimport SearchInput from './PagesCountAndNavigationComponrnts/SearchInput.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CompletedOrdersList extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.MaterialsWriteOff = id => {\n      var dataDiv = document.getElementById(id);\n      var materialNames = dataDiv.getElementsByClassName('materialName');\n      var materialAmounts = dataDiv.getElementsByClassName('materialAmount');\n      var result = [];\n\n      for (let i = 0; i < materialNames.length; i++) {\n        result = result.concat([materialNames[i].innerHTML, materialAmounts[i].value]);\n      }\n\n      console.log(result);\n      this.props.onAmountUpdate(result);\n    };\n  }\n\n  render() {\n    var data = this.props.pagedTablesData;\n\n    if (data.orders !== '') {\n      var elements = [];\n      let materialsAmount = [];\n      var element;\n\n      var header = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date of service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client phone number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Material\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this);\n\n      for (let i = 0; i < data.orders.length; i++) {\n        materialsAmount = []; // eslint-disable-next-line no-loop-func\n\n        data.materials.forEach((material, index) => {\n          material.procedures.forEach(procedure => {\n            if (procedure.procedureId === data.orders[i].procedureId) {\n              materialsAmount = materialsAmount.concat( /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    fontSize: '20px'\n                  },\n                  name: \"materialName\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"materialName\",\n                    children: material.materialName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 51,\n                    columnNumber: 21\n                  }, this), ' ', \",mg/pcs.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"materialAmount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 19\n                }, this), ' ']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 17\n              }, this));\n            }\n          });\n        });\n        var serviceDateInfo = String(data.orders[i].dateOfService).substring(0, 10) + ' ' + String(data.orders[i].dateOfService).substring(11, 16);\n        element = '';\n        element = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: data.orders[i].orderId + data.orders[i].isCompleted // eslint-disable-next-line no-loop-func\n          ,\n          onClick: () => {\n            if (this.props.isEditing) {\n              this.props.onEdit();\n            }\n\n            this.props.setActiveId(data.orders[i].orderId);\n            this.props.getOrder(data.orders[i].orderId, this.props.activeMenu);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: serviceDateInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].clientFullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].clientPhoneNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].procedureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].employeeFullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [materialsAmount, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modalButton\",\n                id: data.orders[i].orderId,\n                style: {\n                  fontSize: '10px',\n                  width: '60px',\n                  height: '20px'\n                },\n                onClick: e => {\n                  this.MaterialsWriteOff(e.target.id);\n                },\n                children: \"Write off\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, data.orders[i].orderId + data.orders[i].isCompleted, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this);\n        elements = elements.concat(element);\n      }\n\n      if (data !== '') {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tableFunctionality\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"Completed orders\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RecordsPerPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dataTable\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"tableStyle\",\n              children: [header, /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: elements\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(PageButtons, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"There is no Data in DB...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      }\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pagedTablesData: state.pagedTablesData,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    isEditing: state.isEditing\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onAmountUpdate: data => dispatch(actions.UpdateMaterialAmount(data)),\n    //!!!!!!!!!!!!!!1\n    getOrders: (rowsPerPage, pageNumber) => dispatch(actions.FeetchMainTableData('ordersPage', rowsPerPage, pageNumber)),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getOrder: (id, activeMenu) => dispatch(actions.FetchActiveRecordData(id, activeMenu))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CompletedOrdersList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/CompletedOrdersTable.js"],"names":["React","connect","actions","RecordsPerPage","PageButtons","SearchInput","CompletedOrdersList","PureComponent","MaterialsWriteOff","id","dataDiv","document","getElementById","materialNames","getElementsByClassName","materialAmounts","result","i","length","concat","innerHTML","value","console","log","props","onAmountUpdate","render","data","pagedTablesData","orders","elements","materialsAmount","element","header","materials","forEach","material","index","procedures","procedure","procedureId","fontSize","materialName","serviceDateInfo","String","dateOfService","substring","orderId","isCompleted","isEditing","onEdit","setActiveId","getOrder","activeMenu","clientFullName","clientPhoneNumber","procedureName","employeeFullName","width","height","e","target","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","UpdateMaterialAmount","getOrders","rowsPerPage","pageNumber","FeetchMainTableData","SetActiveIdentifier","FetchActiveRecordData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport RecordsPerPage from './PagesCountAndNavigationComponrnts/RecordsPerPageButtons';\r\nimport PageButtons from './PagesCountAndNavigationComponrnts/PagesButtons';\r\nimport SearchInput from './PagesCountAndNavigationComponrnts/SearchInput.js';\r\n\r\nclass CompletedOrdersList extends React.PureComponent {\r\n  MaterialsWriteOff = (id) => {\r\n    var dataDiv = document.getElementById(id);\r\n    var materialNames = dataDiv.getElementsByClassName('materialName');\r\n    var materialAmounts = dataDiv.getElementsByClassName('materialAmount');\r\n    var result = [];\r\n    for (let i = 0; i < materialNames.length; i++) {\r\n      result = result.concat([\r\n        materialNames[i].innerHTML,\r\n        materialAmounts[i].value,\r\n      ]);\r\n    }\r\n    console.log(result);\r\n    this.props.onAmountUpdate(result);\r\n  };\r\n\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    if (data.orders !== '') {\r\n      var elements = [];\r\n      let materialsAmount = [];\r\n      var element;\r\n      var header = (\r\n        <thead>\r\n          <tr>\r\n            <th>Date of service</th>\r\n            <th>Client name</th>\r\n            <th>Client phone number</th>\r\n            <th>Procedure name</th>\r\n            <th>Employee</th>\r\n            <th>Material</th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n      for (let i = 0; i < data.orders.length; i++) {\r\n        materialsAmount = [];\r\n        // eslint-disable-next-line no-loop-func\r\n        data.materials.forEach((material, index) => {\r\n          material.procedures.forEach((procedure) => {\r\n            if (procedure.procedureId === data.orders[i].procedureId) {\r\n              materialsAmount = materialsAmount.concat(\r\n                <div>\r\n                  <p style={{ fontSize: '20px' }} name=\"materialName\">\r\n                    <span className=\"materialName\">\r\n                      {material.materialName}\r\n                    </span>{' '}\r\n                    ,mg/pcs.\r\n                  </p>\r\n                  <input type=\"text\" className=\"materialAmount\" />{' '}\r\n                </div>,\r\n              );\r\n            }\r\n          });\r\n        });\r\n\r\n        var serviceDateInfo =\r\n          String(data.orders[i].dateOfService).substring(0, 10) +\r\n          ' ' +\r\n          String(data.orders[i].dateOfService).substring(11, 16);\r\n\r\n        element = '';\r\n        element = (\r\n          <tr\r\n            key={data.orders[i].orderId + data.orders[i].isCompleted}\r\n            id={data.orders[i].orderId + data.orders[i].isCompleted}\r\n            // eslint-disable-next-line no-loop-func\r\n            onClick={() => {\r\n              if (this.props.isEditing) {\r\n                this.props.onEdit();\r\n              }\r\n              this.props.setActiveId(data.orders[i].orderId);\r\n              this.props.getOrder(\r\n                data.orders[i].orderId,\r\n                this.props.activeMenu,\r\n              );\r\n            }}\r\n          >\r\n            <td>{serviceDateInfo}</td>\r\n            <td>{data.orders[i].clientFullName}</td>\r\n            <td>{data.orders[i].clientPhoneNumber}</td>\r\n            <td>{data.orders[i].procedureName}</td>\r\n            <td>{data.orders[i].employeeFullName}</td>\r\n            <td>\r\n              <>\r\n                {materialsAmount}{' '}\r\n                <button\r\n                  className=\"modalButton\"\r\n                  id={data.orders[i].orderId}\r\n                  style={{ fontSize: '10px', width: '60px', height: '20px' }}\r\n                  onClick={(e) => {\r\n                    this.MaterialsWriteOff(e.target.id);\r\n                  }}\r\n                >\r\n                  Write off\r\n                </button>\r\n              </>\r\n            </td>\r\n          </tr>\r\n        );\r\n        elements = elements.concat(element);\r\n      }\r\n      if (data !== '') {\r\n        return (\r\n          <>\r\n            <div className=\"tableFunctionality\">\r\n              <p className=\"title\">Completed orders</p>\r\n              <RecordsPerPage />\r\n              <SearchInput />\r\n            </div>\r\n\r\n            <div className=\"dataTable\">\r\n              <table className=\"tableStyle\">\r\n                {header}\r\n                <tbody>{elements}</tbody>\r\n                <PageButtons />\r\n              </table>\r\n            </div>\r\n          </>\r\n        );\r\n      } else {\r\n        return (\r\n          <>\r\n            <p>There is no Data in DB...</p>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pagedTablesData: state.pagedTablesData,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    isEditing: state.isEditing,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onAmountUpdate: (data) => dispatch(actions.UpdateMaterialAmount(data)), //!!!!!!!!!!!!!!1\r\n    getOrders: (rowsPerPage, pageNumber) =>\r\n      dispatch(\r\n        actions.FeetchMainTableData('ordersPage', rowsPerPage, pageNumber),\r\n      ),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getOrder: (id, activeMenu) =>\r\n      dispatch(actions.FetchActiveRecordData(id, activeMenu)),\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(CompletedOrdersList);\r\n"]},"metadata":{},"sourceType":"module"}
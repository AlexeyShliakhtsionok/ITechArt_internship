{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\OrdersTable.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\nimport RecordsPerPage from './PagesCountAndNavigationComponrnts/RecordsPerPageButtons';\nimport PageButtons from './PagesCountAndNavigationComponrnts/PagesButtons';\nimport SearchInput from './PagesCountAndNavigationComponrnts/SearchInput.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass OrdersList extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n\n    if (data.orders !== '') {\n      var elements = [];\n      var element;\n\n      var header = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Date of service\", ' ', /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Client name\", /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Client phone number\", /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Client email\", /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Procedure name\", /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Procedure cost\", /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this);\n\n      for (let i = 0; i < data.orders.length; i++) {\n        var serviceDateInfo = String(data.orders[i].dateOfService).substring(0, 10) + ' ' + String(data.orders[i].dateOfService).substring(11, 16);\n        var serviceDate = String(data.orders[i].dateOfService).substring(0, 10);\n        element = '';\n        element = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: data.orders[i].orderId // eslint-disable-next-line no-loop-func\n          ,\n          onClick: () => {\n            if (this.props.isEditing) {\n              this.props.onEdit();\n            }\n\n            this.props.setActiveId(data.orders[i].orderId);\n            this.props.getOrder(data.orders[i].orderId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n            this.props.getSchedule(data.orders[i].employeeId, serviceDate, data.orders[i].procedureId, this.props.openTime, this.props.closeTime);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: serviceDateInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].clientFullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].clientPhoneNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].clientEmail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].procedureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].procedureCost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].employeeFullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, data.orders[i].orderId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this);\n        elements = elements.concat(element);\n      }\n\n      if (data !== '') {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tableFunctionality\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"Orders\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"modalButton\",\n              onClick: () => {\n                this.props.setCreateModalState();\n              },\n              children: \"New order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RecordsPerPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dataTable\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"tableStyle\",\n              children: [header, /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: elements\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CreateOrderModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(UpdateOrderModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(PageButtons, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"There is no Data in DB...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      }\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pagedTablesData: state.pagedTablesData,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    isEditing: state.isEditing\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onEdit: () => dispatch(actions.SetEditModalState()),\n    getOrders: (rowsPerPage, pageNumber) => dispatch(actions.FeetchMainTableData('ordersPage', rowsPerPage, pageNumber)),\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getOrder: (id, activeMenu) => dispatch(actions.FetchActiveRecordData(id, activeMenu)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/OrdersTable.js"],"names":["React","connect","actions","CreateOrderModal","UpdateOrderModal","RecordsPerPage","PageButtons","SearchInput","OrdersList","PureComponent","render","data","props","pagedTablesData","orders","elements","element","header","i","length","serviceDateInfo","String","dateOfService","substring","serviceDate","orderId","isEditing","onEdit","setActiveId","getOrder","activeMenu","setUpdateModalState","getSchedule","employeeId","procedureId","openTime","closeTime","clientFullName","clientPhoneNumber","clientEmail","procedureName","procedureCost","employeeFullName","concat","setCreateModalState","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetEditModalState","getOrders","rowsPerPage","pageNumber","FeetchMainTableData","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","FetchActiveRecordData","open","close","GetAvaliableTimes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\r\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\r\nimport RecordsPerPage from './PagesCountAndNavigationComponrnts/RecordsPerPageButtons';\r\nimport PageButtons from './PagesCountAndNavigationComponrnts/PagesButtons';\r\nimport SearchInput from './PagesCountAndNavigationComponrnts/SearchInput.js';\r\n\r\nclass OrdersList extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    if (data.orders !== '') {\r\n      var elements = [];\r\n      var element;\r\n      var header = (\r\n        <thead>\r\n          <tr>\r\n            <th>\r\n              Date of service{' '}\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>\r\n              Client name\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>\r\n              Client phone number\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>\r\n              Client email\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>\r\n              Procedure name\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>\r\n              Procedure cost\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>Employee</th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n      for (let i = 0; i < data.orders.length; i++) {\r\n        var serviceDateInfo =\r\n          String(data.orders[i].dateOfService).substring(0, 10) +\r\n          ' ' +\r\n          String(data.orders[i].dateOfService).substring(11, 16);\r\n\r\n        var serviceDate = String(data.orders[i].dateOfService).substring(0, 10);\r\n\r\n        element = '';\r\n        element = (\r\n          <tr\r\n            key={data.orders[i].orderId}\r\n            id={data.orders[i].orderId}\r\n            // eslint-disable-next-line no-loop-func\r\n            onClick={() => {\r\n              if (this.props.isEditing) {\r\n                this.props.onEdit();\r\n              }\r\n              this.props.setActiveId(data.orders[i].orderId);\r\n              this.props.getOrder(\r\n                data.orders[i].orderId,\r\n                this.props.activeMenu,\r\n              );\r\n              this.props.setUpdateModalState();\r\n              this.props.getSchedule(\r\n                data.orders[i].employeeId,\r\n                serviceDate,\r\n                data.orders[i].procedureId,\r\n                this.props.openTime,\r\n                this.props.closeTime,\r\n              );\r\n            }}\r\n          >\r\n            <td>{serviceDateInfo}</td>\r\n            <td>{data.orders[i].clientFullName}</td>\r\n            <td>{data.orders[i].clientPhoneNumber}</td>\r\n            <td>{data.orders[i].clientEmail}</td>\r\n            <td>{data.orders[i].procedureName}</td>\r\n            <td>{data.orders[i].procedureCost}</td>\r\n            <td>{data.orders[i].employeeFullName}</td>\r\n          </tr>\r\n        );\r\n        elements = elements.concat(element);\r\n      }\r\n      if (data !== '') {\r\n        return (\r\n          <>\r\n            <div className=\"tableFunctionality\">\r\n              <p className=\"title\">Orders</p>\r\n              <button\r\n                className=\"modalButton\"\r\n                onClick={() => {\r\n                  this.props.setCreateModalState();\r\n                }}\r\n              >\r\n                New order\r\n              </button>\r\n              <RecordsPerPage />\r\n              <SearchInput />\r\n            </div>\r\n\r\n            <div className=\"dataTable\">\r\n              <table className=\"tableStyle\">\r\n                {header}\r\n                <tbody>{elements}</tbody>\r\n                <CreateOrderModal />\r\n                <UpdateOrderModal />\r\n                <PageButtons />\r\n              </table>\r\n            </div>\r\n          </>\r\n        );\r\n      } else {\r\n        return (\r\n          <>\r\n            <p>There is no Data in DB...</p>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pagedTablesData: state.pagedTablesData,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    isEditing: state.isEditing,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onEdit: () => dispatch(actions.SetEditModalState()),\r\n    getOrders: (rowsPerPage, pageNumber) =>\r\n      dispatch(\r\n        actions.FeetchMainTableData('ordersPage', rowsPerPage, pageNumber),\r\n      ),\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getOrder: (id, activeMenu) =>\r\n      dispatch(actions.FetchActiveRecordData(id, activeMenu)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);\r\n"]},"metadata":{},"sourceType":"module"}
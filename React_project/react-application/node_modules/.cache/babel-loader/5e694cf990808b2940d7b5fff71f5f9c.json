{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\UnauthenticatedMainMenu\\\\Booking\\\\CreateNewOrder.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../Redux/Actions/actions';\nimport Select from 'react-select';\nimport { DateFormat } from '../../../Functions/DateFormat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateNewOrder extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n    var orderInfoArea;\n    var actionButtons;\n    var minDate = DateFormat(Date());\n    var currentDate = new Date();\n    var maxDate = DateFormat(new Date(currentDate.setDate(currentDate.getDate() + 30)));\n    var orderToCreate = {\n      dateOfService: this.props.activeTime,\n      client: this.props.singleResponseData,\n      procedure: this.props.activeProcedure,\n      employee: this.props.activeEmployee\n    }; // // Lists for the Select-dropdown\n    // var clientList = [];\n    // data.clientsSelectList.forEach((element) => {\n    //   clientList.push({\n    //     value: element.clientId,\n    //     label: element.firstName + ' ' + element.lastName,\n    //   });\n    // });\n    // var procedureTypesList = [];\n    // data.procedureTypesSelectList.forEach((element) => {\n    //   procedureTypesList.push({\n    //     value: element.value,\n    //     label: element.text,\n    //   });\n    // });\n    // var procedureList = [];\n    // if (this.props.procedures !== '') {\n    //   this.props.procedures.forEach((element) => {\n    //     procedureList.push({\n    //       value: element.procedureId,\n    //       label: element.procedureName,\n    //     });\n    //   });\n    // }\n    // var employeeList = [];\n    // if (this.props.employees !== '') {\n    //   this.props.employees.forEach((element) => {\n    //     employeeList.push({\n    //       value: element.employeeId,\n    //       label: element.firstName + ' ' + element.lastName,\n    //     });\n    //   });\n    // }\n    // var scheduleTimesList = [];\n    // if (this.props.schedule !== '') {\n    //   this.props.schedule.forEach((time) => {\n    //     scheduleTimesList.push({\n    //       value: time,\n    //       label: time.substr(11),\n    //     });\n    //   });\n    // }\n    // Buttons and main area of modal menu\n\n    actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmUserInfo\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.onCreate(orderToCreate);\n            this.props.setOrderStatus();\n          },\n          children: \"Book now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n    orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileText clientOrder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clientOrderHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tagLine clientOrderText\",\n          children: 'Welcome, ' + '!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tagLine clientOrderText\",\n          children: \"Please, make your order.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Date of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: minDate,\n            max: maxDate,\n            placeholder: \"Date...\",\n            onChange: e => {\n              this.props.setOrdersDate(e.target.value);\n              this.props.resetSelected();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.procedureType,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderProcedureType');\n              this.props.getProcedures(data.value);\n              this.props.getEmployees(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.procedure,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderProcedure');\n              this.props.procedures.forEach(procedure => {\n                if (procedure.procedureId === data.value) {\n                  orderToCreate.procedure = procedure;\n                  this.props.setOrdersProcedure(procedure);\n                }\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Employee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.employee,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderEmployee');\n              this.props.employees.forEach(employee => {\n                if (employee.employeeId === data.value) {\n                  this.props.setOrdersEmployee(employee);\n                }\n\n                this.props.getSchedule(data.value, this.props.activeDate, this.props.activeProcedure.procedureId, this.props.openTime, this.props.closeTime);\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Time of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.orderTime,\n            hideSelectedOptions: true,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderTime');\n              this.props.setOrdersTime(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileBody\",\n        children: orderInfoArea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), actionButtons]\n    }, void 0, true);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    // Get all data\n    pagedDataTable: state.pagedDataTable,\n    activeMenu: state.activeMenu,\n    // Get single data (unneccessary here???)\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    // For order creation\n    client: state.client,\n    orderTime: state.orderTime,\n    procedure: state.procedure,\n    procedureType: state.procedureType,\n    employee: state.employee,\n    //-----All procedures of certain procedure type\n    procedures: state.procedures,\n    //-----All employees of certain procedure type\n    employees: state.employees,\n    // Flag for enabling some of inputs\n    procedureInputStatus: state.procedureInputStatus,\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\n    schedule: state.schedule,\n    // active orders objects\n    activeProcedure: state.activeProcedure,\n    activeDate: state.activeDate,\n    activeTime: state.activeTime,\n    activeClient: state.activeClient,\n    activeEmployee: state.activeEmployee\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onCreate: data => dispatch(actions.AddOrder(data)),\n    getProcedures: typeId => dispatch(actions.GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(actions.GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setOrdersDate: date => dispatch(actions.SetActiveDate(date)),\n    setOrdersTime: date => dispatch(actions.SetActiveTime(date)),\n    setOrdersProcedure: data => dispatch(actions.SetActiveProcedure(data)),\n    setOrdersEmployee: data => dispatch(actions.SetActiveEmployee(data)),\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\n    setSelectedValue: inputName => dispatch(actions.SetSelectedValue(inputName)),\n    setOrderStatus: () => dispatch(actions.SetOrderStatus())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateNewOrder);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/UnauthenticatedMainMenu/Booking/CreateNewOrder.js"],"names":["React","connect","actions","Select","DateFormat","CreateNewOrder","PureComponent","render","data","props","pagedTablesData","orderInfoArea","actionButtons","minDate","Date","currentDate","maxDate","setDate","getDate","orderToCreate","dateOfService","activeTime","client","singleResponseData","procedure","activeProcedure","employee","activeEmployee","onCreate","setOrderStatus","e","setOrdersDate","target","value","resetSelected","procedureType","setSelectedValue","getProcedures","getEmployees","procedureInputStatus","procedures","forEach","procedureId","setOrdersProcedure","employees","employeeId","setOrdersEmployee","getSchedule","activeDate","openTime","closeTime","orderTime","setOrdersTime","mapStateToProps","state","pagedDataTable","activeMenu","activeId","schedule","activeClient","mapDispatchToProps","dispatch","AddOrder","typeId","GetProceduresByType","GetEmployeesByProcedureType","open","close","GetAvaliableTimes","date","SetActiveDate","SetActiveTime","SetActiveProcedure","SetActiveEmployee","ResetSelectedValues","inputName","SetSelectedValue","SetOrderStatus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../Redux/Actions/actions';\r\nimport Select from 'react-select';\r\nimport { DateFormat } from '../../../Functions/DateFormat';\r\n\r\nclass CreateNewOrder extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var minDate = DateFormat(Date());\r\n    var currentDate = new Date();\r\n    var maxDate = DateFormat(\r\n      new Date(currentDate.setDate(currentDate.getDate() + 30)),\r\n    );\r\n    var orderToCreate = {\r\n      dateOfService: this.props.activeTime,\r\n      client: this.props.singleResponseData,\r\n      procedure: this.props.activeProcedure,\r\n      employee: this.props.activeEmployee,\r\n    };\r\n\r\n    // // Lists for the Select-dropdown\r\n    // var clientList = [];\r\n    // data.clientsSelectList.forEach((element) => {\r\n    //   clientList.push({\r\n    //     value: element.clientId,\r\n    //     label: element.firstName + ' ' + element.lastName,\r\n    //   });\r\n    // });\r\n\r\n    // var procedureTypesList = [];\r\n    // data.procedureTypesSelectList.forEach((element) => {\r\n    //   procedureTypesList.push({\r\n    //     value: element.value,\r\n    //     label: element.text,\r\n    //   });\r\n    // });\r\n\r\n    // var procedureList = [];\r\n    // if (this.props.procedures !== '') {\r\n    //   this.props.procedures.forEach((element) => {\r\n    //     procedureList.push({\r\n    //       value: element.procedureId,\r\n    //       label: element.procedureName,\r\n    //     });\r\n    //   });\r\n    // }\r\n\r\n    // var employeeList = [];\r\n    // if (this.props.employees !== '') {\r\n    //   this.props.employees.forEach((element) => {\r\n    //     employeeList.push({\r\n    //       value: element.employeeId,\r\n    //       label: element.firstName + ' ' + element.lastName,\r\n    //     });\r\n    //   });\r\n    // }\r\n\r\n    // var scheduleTimesList = [];\r\n    // if (this.props.schedule !== '') {\r\n    //   this.props.schedule.forEach((time) => {\r\n    //     scheduleTimesList.push({\r\n    //       value: time,\r\n    //       label: time.substr(11),\r\n    //     });\r\n    //   });\r\n    // }\r\n\r\n    // Buttons and main area of modal menu\r\n    actionButtons = (\r\n      <div className=\"confirmUserInfo\">\r\n        <div>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.onCreate(orderToCreate);\r\n              this.props.setOrderStatus();\r\n            }}\r\n          >\r\n            Book now\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    orderInfoArea = (\r\n      <div className=\"profileText clientOrder\">\r\n        <div className=\"clientOrderHeader\">\r\n          <p className=\"tagLine clientOrderText\">{'Welcome, ' + '!'}</p>\r\n          <p className=\"tagLine clientOrderText\">Please, make your order.</p>\r\n        </div>\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Date of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <input\r\n              type=\"date\"\r\n              min={minDate}\r\n              max={maxDate}\r\n              placeholder=\"Date...\"\r\n              onChange={(e) => {\r\n                this.props.setOrdersDate(e.target.value);\r\n                this.props.resetSelected();\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure type:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.procedureType}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderProcedureType');\r\n                this.props.getProcedures(data.value);\r\n                this.props.getEmployees(data.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.procedure}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderProcedure');\r\n                this.props.procedures.forEach((procedure) => {\r\n                  if (procedure.procedureId === data.value) {\r\n                    orderToCreate.procedure = procedure;\r\n                    this.props.setOrdersProcedure(procedure);\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Employee:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.employee}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderEmployee');\r\n                this.props.employees.forEach((employee) => {\r\n                  if (employee.employeeId === data.value) {\r\n                    this.props.setOrdersEmployee(employee);\r\n                  }\r\n                  this.props.getSchedule(\r\n                    data.value,\r\n                    this.props.activeDate,\r\n                    this.props.activeProcedure.procedureId,\r\n                    this.props.openTime,\r\n                    this.props.closeTime,\r\n                  );\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Time of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.orderTime}\r\n              hideSelectedOptions={true}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderTime');\r\n                this.props.setOrdersTime(data.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <div className=\"profileBody\">{orderInfoArea}</div>\r\n        {actionButtons}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // Get all data\r\n    pagedDataTable: state.pagedDataTable,\r\n    activeMenu: state.activeMenu,\r\n    // Get single data (unneccessary here???)\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    // For order creation\r\n    client: state.client,\r\n    orderTime: state.orderTime,\r\n    procedure: state.procedure,\r\n    procedureType: state.procedureType,\r\n    employee: state.employee,\r\n    //-----All procedures of certain procedure type\r\n    procedures: state.procedures,\r\n    //-----All employees of certain procedure type\r\n    employees: state.employees,\r\n    // Flag for enabling some of inputs\r\n    procedureInputStatus: state.procedureInputStatus,\r\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\r\n    schedule: state.schedule,\r\n    // active orders objects\r\n    activeProcedure: state.activeProcedure,\r\n    activeDate: state.activeDate,\r\n    activeTime: state.activeTime,\r\n    activeClient: state.activeClient,\r\n    activeEmployee: state.activeEmployee,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onCreate: (data) => dispatch(actions.AddOrder(data)),\r\n    getProcedures: (typeId) => dispatch(actions.GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) =>\r\n      dispatch(actions.GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n    setOrdersDate: (date) => dispatch(actions.SetActiveDate(date)),\r\n    setOrdersTime: (date) => dispatch(actions.SetActiveTime(date)),\r\n    setOrdersProcedure: (data) => dispatch(actions.SetActiveProcedure(data)),\r\n    setOrdersEmployee: (data) => dispatch(actions.SetActiveEmployee(data)),\r\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\r\n    setSelectedValue: (inputName) =>\r\n      dispatch(actions.SetSelectedValue(inputName)),\r\n    setOrderStatus: () => dispatch(actions.SetOrderStatus()),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateNewOrder);\r\n"]},"metadata":{},"sourceType":"module"}
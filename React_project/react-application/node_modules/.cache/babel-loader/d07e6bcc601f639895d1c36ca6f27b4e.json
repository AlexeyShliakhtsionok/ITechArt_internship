{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\OrdersTable.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\nimport RecordsPerPage from './PagesCountAndNavigationComponrnts/RecordsPerPageButtons';\nimport PageButtons from './PagesCountAndNavigationComponrnts/PagesButtons';\nimport SearchInput from './PagesCountAndNavigationComponrnts/SearchInput.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass OrdersList extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n\n    if (data.orders !== '' || data.orders !== 0) {\n      var elements = [];\n      var element;\n\n      var header = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date of service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client phone number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Confirmed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this);\n\n      if (data.orders !== undefined) {\n        for (let i = 0; i < data.orders.length; i++) {\n          var confirmed;\n\n          if (data.orders[i].processedByAdmimistrator === false) {\n            confirmed = /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"modalButton\",\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 25\n            }, this);\n          } else {\n            confirmed = '';\n          }\n\n          var serviceDateInfo = String(data.orders[i].dateOfService).substring(0, 10) + ' ' + String(data.orders[i].dateOfService).substring(11, 16);\n          var serviceDate = String(data.orders[i].dateOfService).substring(0, 10);\n          element = '';\n          element = /*#__PURE__*/_jsxDEV(\"tr\", {\n            id: data.orders[i].orderId // eslint-disable-next-line no-loop-func\n            ,\n            onClick: () => {\n              if (this.props.isEditing) {\n                this.props.onEdit();\n              }\n\n              this.props.setActiveId(data.orders[i].orderId);\n              this.props.getOrder(data.orders[i].orderId, this.props.activeMenu);\n              this.props.setUpdateModalState();\n              this.props.getSchedule(data.orders[i].employeeId, serviceDate, data.orders[i].procedureId, this.props.openTime, this.props.closeTime);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: serviceDateInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.orders[i].clientFullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.orders[i].clientPhoneNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.orders[i].clientEmail\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.orders[i].procedureName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.orders[i].procedureCost\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.orders[i].employeeFullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: confirmed\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)]\n          }, data.orders[i].orderId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this);\n          elements = elements.concat(element);\n        }\n\n        if (data !== '') {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tableFunctionality\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"title\",\n                children: \"Active orders\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modalButton\",\n                onClick: () => {\n                  this.props.setCreateModalState();\n                },\n                children: \"New order\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"modalButton\",\n                  onClick: () => {\n                    this.props.getOrders('ordersPage');\n                  },\n                  children: \"Active orders\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"modalButton\",\n                  onClick: () => {\n                    this.props.getOrders('stagedOrdersPage');\n                  },\n                  children: \"Staged orders\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"modalButton\",\n                  onClick: () => {\n                    this.props.getOrders('donedOrdersPage');\n                  },\n                  children: \"Completed orders\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(RecordsPerPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(SearchInput, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataTable\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"tableStyle\",\n                children: [header, /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: elements\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(CreateOrderModal, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(UpdateOrderModal, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(PageButtons, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true);\n        }\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tableFunctionality\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"Orders\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"modalButton\",\n              onClick: () => {\n                this.props.setCreateModalState();\n              },\n              children: \"New order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dataTable\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"tableStyle\",\n              children: [header, /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: elements\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CreateOrderModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      }\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pagedTablesData: state.pagedTablesData,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    isEditing: state.isEditing\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onEdit: () => dispatch(actions.SetEditModalState()),\n    getOrders: (activePage, rowsPerPage, pageNumber) => dispatch(actions.FeetchMainTableData(activePage, rowsPerPage, pageNumber)),\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getOrder: (id, activeMenu) => dispatch(actions.FetchActiveRecordData(id, activeMenu)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/OrdersTable.js"],"names":["React","connect","actions","CreateOrderModal","UpdateOrderModal","RecordsPerPage","PageButtons","SearchInput","OrdersList","PureComponent","render","data","props","pagedTablesData","orders","elements","element","header","undefined","i","length","confirmed","processedByAdmimistrator","serviceDateInfo","String","dateOfService","substring","serviceDate","orderId","isEditing","onEdit","setActiveId","getOrder","activeMenu","setUpdateModalState","getSchedule","employeeId","procedureId","openTime","closeTime","clientFullName","clientPhoneNumber","clientEmail","procedureName","procedureCost","employeeFullName","concat","setCreateModalState","getOrders","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetEditModalState","activePage","rowsPerPage","pageNumber","FeetchMainTableData","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","FetchActiveRecordData","open","close","GetAvaliableTimes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\r\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\r\nimport RecordsPerPage from './PagesCountAndNavigationComponrnts/RecordsPerPageButtons';\r\nimport PageButtons from './PagesCountAndNavigationComponrnts/PagesButtons';\r\nimport SearchInput from './PagesCountAndNavigationComponrnts/SearchInput.js';\r\n\r\nclass OrdersList extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    if (data.orders !== '' || data.orders !== 0) {\r\n      var elements = [];\r\n      var element;\r\n      var header = (\r\n        <thead>\r\n          <tr>\r\n            <th>Date of service</th>\r\n            <th>Client name</th>\r\n            <th>Client phone number</th>\r\n            <th>Client email</th>\r\n            <th>Procedure name</th>\r\n            <th>Procedure cost</th>\r\n            <th>Employee</th>\r\n            <th>Confirmed</th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n\r\n      if (data.orders !== undefined) {\r\n        for (let i = 0; i < data.orders.length; i++) {\r\n          var confirmed;\r\n          if (data.orders[i].processedByAdmimistrator === false) {\r\n            confirmed = <button className=\"modalButton\">Confirm</button>;\r\n          } else {\r\n            confirmed = '';\r\n          }\r\n          var serviceDateInfo =\r\n            String(data.orders[i].dateOfService).substring(0, 10) +\r\n            ' ' +\r\n            String(data.orders[i].dateOfService).substring(11, 16);\r\n\r\n          var serviceDate = String(data.orders[i].dateOfService).substring(\r\n            0,\r\n            10,\r\n          );\r\n\r\n          element = '';\r\n          element = (\r\n            <tr\r\n              key={data.orders[i].orderId}\r\n              id={data.orders[i].orderId}\r\n              // eslint-disable-next-line no-loop-func\r\n              onClick={() => {\r\n                if (this.props.isEditing) {\r\n                  this.props.onEdit();\r\n                }\r\n                this.props.setActiveId(data.orders[i].orderId);\r\n                this.props.getOrder(\r\n                  data.orders[i].orderId,\r\n                  this.props.activeMenu,\r\n                );\r\n                this.props.setUpdateModalState();\r\n                this.props.getSchedule(\r\n                  data.orders[i].employeeId,\r\n                  serviceDate,\r\n                  data.orders[i].procedureId,\r\n                  this.props.openTime,\r\n                  this.props.closeTime,\r\n                );\r\n              }}\r\n            >\r\n              <td>{serviceDateInfo}</td>\r\n              <td>{data.orders[i].clientFullName}</td>\r\n              <td>{data.orders[i].clientPhoneNumber}</td>\r\n              <td>{data.orders[i].clientEmail}</td>\r\n              <td>{data.orders[i].procedureName}</td>\r\n              <td>{data.orders[i].procedureCost}</td>\r\n              <td>{data.orders[i].employeeFullName}</td>\r\n              <td>{confirmed}</td>\r\n            </tr>\r\n          );\r\n          elements = elements.concat(element);\r\n        }\r\n\r\n        if (data !== '') {\r\n          return (\r\n            <>\r\n              <div className=\"tableFunctionality\">\r\n                <p className=\"title\">Active orders</p>\r\n                <button\r\n                  className=\"modalButton\"\r\n                  onClick={() => {\r\n                    this.props.setCreateModalState();\r\n                  }}\r\n                >\r\n                  New order\r\n                </button>\r\n                <div>\r\n                  <button\r\n                    className=\"modalButton\"\r\n                    onClick={() => {\r\n                      this.props.getOrders('ordersPage');\r\n                    }}\r\n                  >\r\n                    Active orders\r\n                  </button>\r\n                  <button\r\n                    className=\"modalButton\"\r\n                    onClick={() => {\r\n                      this.props.getOrders('stagedOrdersPage');\r\n                    }}\r\n                  >\r\n                    Staged orders\r\n                  </button>\r\n                  <button\r\n                    className=\"modalButton\"\r\n                    onClick={() => {\r\n                      this.props.getOrders('donedOrdersPage');\r\n                    }}\r\n                  >\r\n                    Completed orders\r\n                  </button>\r\n                </div>\r\n\r\n                <RecordsPerPage />\r\n                <SearchInput />\r\n              </div>\r\n\r\n              <div className=\"dataTable\">\r\n                <table className=\"tableStyle\">\r\n                  {header}\r\n                  <tbody>{elements}</tbody>\r\n                  <CreateOrderModal />\r\n                  <UpdateOrderModal />\r\n                  <PageButtons />\r\n                </table>\r\n              </div>\r\n            </>\r\n          );\r\n        }\r\n      } else {\r\n        return (\r\n          <>\r\n            <div className=\"tableFunctionality\">\r\n              <p className=\"title\">Orders</p>\r\n              <button\r\n                className=\"modalButton\"\r\n                onClick={() => {\r\n                  this.props.setCreateModalState();\r\n                }}\r\n              >\r\n                New order\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"dataTable\">\r\n              <table className=\"tableStyle\">\r\n                {header}\r\n                <tbody>{elements}</tbody>\r\n                <CreateOrderModal />\r\n              </table>\r\n            </div>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pagedTablesData: state.pagedTablesData,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    isEditing: state.isEditing,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onEdit: () => dispatch(actions.SetEditModalState()),\r\n    getOrders: (activePage, rowsPerPage, pageNumber) =>\r\n      dispatch(\r\n        actions.FeetchMainTableData(activePage, rowsPerPage, pageNumber),\r\n      ),\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getOrder: (id, activeMenu) =>\r\n      dispatch(actions.FetchActiveRecordData(id, activeMenu)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);\r\n"]},"metadata":{},"sourceType":"module"}
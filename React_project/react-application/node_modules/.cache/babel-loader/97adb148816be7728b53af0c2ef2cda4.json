{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\CreateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { DateFormat } from '../../Functions/DateFormat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateOrderModal extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n    var orderInfoArea;\n    var actionButtons;\n    var minDate = DateFormat(Date());\n    var currentDate = new Date();\n    var maxDate = DateFormat(new Date(currentDate.setDate(currentDate.getDate() + 30)));\n    var orderToCreate = {\n      dateOfService: this.props.activeTime,\n      client: this.props.activeClient,\n      procedure: this.props.activeProcedure,\n      employee: this.props.activeEmployee,\n      isCompleted: false\n    };\n    var clientList = [];\n    var procedureTypesList = [];\n    var procedureList = [];\n    var employeeList = [];\n    data.clientsSelectList.forEach(element => {\n      clientList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    data.procedureTypesSelectList.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n\n    if (this.props.procedures !== '') {\n      this.props.procedures.forEach(element => {\n        procedureList.push({\n          value: element.procedureId,\n          label: element.procedureName\n        });\n      });\n    }\n\n    if (this.props.employees !== '') {\n      this.props.employees.forEach(element => {\n        employeeList.push({\n          value: element.employeeId,\n          label: element.firstName + ' ' + element.lastName\n        });\n      });\n    }\n\n    var scheduleTimesList = [];\n\n    if (this.props.schedule !== '') {\n      this.props.schedule.forEach(time => {\n        scheduleTimesList.push({\n          value: time,\n          label: time.substr(11)\n        });\n      });\n    }\n\n    orderInfoArea = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n\n        if ((this.props.activeTime || this.props.activeClient || this.props.activeProcedure || this.props.activeEmployee) === '') {\n          alert('Some of required fields is empty. Adding failed...');\n        } else {\n          this.props.setCreateModalState();\n          this.props.onCreate(this.props.activeMenu, orderToCreate);\n        }\n      },\n      className: \"profileText\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Date of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"date\",\n            min: minDate,\n            max: maxDate,\n            placeholder: \"Date...\",\n            onChange: e => {\n              this.props.setOrdersDate(e.target.value);\n              this.props.resetSelected();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"ClientName:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            maxMenuHeight: 100,\n            options: clientList,\n            onChange: data => {\n              this.props.setOrdersClient(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.procedureType,\n            maxMenuHeight: 100,\n            options: procedureTypesList,\n            onChange: data => {\n              this.props.setSelectedValue('orderProcedureType');\n              this.props.getProcedures(data.value);\n              this.props.getEmployees(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.procedure,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderProcedure');\n              this.props.setOrdersProcedure(data.value);\n            },\n            options: procedureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Employee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.employee,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderEmployee');\n              this.props.setOrdersEmployee(data.value);\n              this.props.getSchedule(data.value, this.props.activeDate, this.props.activeProcedure.procedureId, this.props.openTime, this.props.closeTime);\n            },\n            options: employeeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Time of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.orderTime,\n            hideSelectedOptions: true,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderTime');\n              this.props.setOrdersTime(data.value);\n            },\n            options: scheduleTimesList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmUserInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            className: \"modalButton\",\n            value: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          maxWidth: 'fit-content',\n          background: '#6c3636',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          border: '6px solid #f7f6f6',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.createModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setCreateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title\",\n          children: \"Create new order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: orderInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    // Modal window open/close states\n    createModalOpen: state.createModalOpen,\n    // Get all data\n    pagedTablesData: state.pagedTablesData,\n    activeMenu: state.activeMenu,\n    // Get single data (unneccessary here???)\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    // For order creation\n    client: state.client,\n    orderTime: state.orderTime,\n    procedure: state.procedure,\n    procedureType: state.procedureType,\n    employee: state.employee,\n    //-----All procedures of certain procedure type\n    procedures: state.procedures,\n    //-----All employees of certain procedure type\n    employees: state.employees,\n    // Flag for enabling some of inputs\n    procedureInputStatus: state.procedureInputStatus,\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\n    schedule: state.schedule,\n    // active orders objects\n    activeProcedure: state.activeProcedure,\n    activeDate: state.activeDate,\n    activeTime: state.activeTime,\n    activeClient: state.activeClient,\n    activeEmployee: state.activeEmployee\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\n    getProcedures: typeId => dispatch(actions.GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(actions.GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setOrdersDate: date => dispatch(actions.SetActiveDate(date)),\n    setOrdersTime: date => dispatch(actions.SetActiveTime(date)),\n    setOrdersProcedure: data => dispatch(actions.SetActiveProcedure(data)),\n    setOrdersClient: data => dispatch(actions.SetActiveClient(data)),\n    setOrdersEmployee: data => dispatch(actions.SetActiveEmployee(data)),\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\n    setSelectedValue: inputName => dispatch(actions.SetSelectedValue(inputName))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/CreateOrderModal.js"],"names":["React","connect","Modal","actions","Select","DateFormat","CreateOrderModal","PureComponent","render","data","props","pagedTablesData","orderInfoArea","actionButtons","minDate","Date","currentDate","maxDate","setDate","getDate","orderToCreate","dateOfService","activeTime","client","activeClient","procedure","activeProcedure","employee","activeEmployee","isCompleted","clientList","procedureTypesList","procedureList","employeeList","clientsSelectList","forEach","element","push","value","label","text","procedureTypesSelectList","procedures","procedureId","procedureName","employees","employeeId","firstName","lastName","scheduleTimesList","schedule","time","substr","e","preventDefault","alert","setCreateModalState","onCreate","activeMenu","setOrdersDate","target","resetSelected","setOrdersClient","procedureType","setSelectedValue","getProcedures","getEmployees","procedureInputStatus","setOrdersProcedure","setOrdersEmployee","getSchedule","activeDate","openTime","closeTime","orderTime","setOrdersTime","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","createModalOpen","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetCreateModalState","AddData","typeId","GetProceduresByType","GetEmployeesByProcedureType","open","close","GetAvaliableTimes","date","SetActiveDate","SetActiveTime","SetActiveProcedure","SetActiveClient","SetActiveEmployee","ResetSelectedValues","inputName","SetSelectedValue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\nimport { DateFormat } from '../../Functions/DateFormat.js';\r\n\r\nclass CreateOrderModal extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var minDate = DateFormat(Date());\r\n    var currentDate = new Date();\r\n    var maxDate = DateFormat(\r\n      new Date(currentDate.setDate(currentDate.getDate() + 30)),\r\n    );\r\n    var orderToCreate = {\r\n      dateOfService: this.props.activeTime,\r\n      client: this.props.activeClient,\r\n      procedure: this.props.activeProcedure,\r\n      employee: this.props.activeEmployee,\r\n      isCompleted: false,\r\n    };\r\n\r\n    var clientList = [];\r\n    var procedureTypesList = [];\r\n    var procedureList = [];\r\n    var employeeList = [];\r\n\r\n    data.clientsSelectList.forEach((element) => {\r\n      clientList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n    data.procedureTypesSelectList.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    if (this.props.procedures !== '') {\r\n      this.props.procedures.forEach((element) => {\r\n        procedureList.push({\r\n          value: element.procedureId,\r\n          label: element.procedureName,\r\n        });\r\n      });\r\n    }\r\n\r\n    if (this.props.employees !== '') {\r\n      this.props.employees.forEach((element) => {\r\n        employeeList.push({\r\n          value: element.employeeId,\r\n          label: element.firstName + ' ' + element.lastName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var scheduleTimesList = [];\r\n    if (this.props.schedule !== '') {\r\n      this.props.schedule.forEach((time) => {\r\n        scheduleTimesList.push({\r\n          value: time,\r\n          label: time.substr(11),\r\n        });\r\n      });\r\n    }\r\n\r\n    orderInfoArea = (\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          if (\r\n            (this.props.activeTime ||\r\n              this.props.activeClient ||\r\n              this.props.activeProcedure ||\r\n              this.props.activeEmployee) === ''\r\n          ) {\r\n            alert('Some of required fields is empty. Adding failed...');\r\n          } else {\r\n            this.props.setCreateModalState();\r\n            this.props.onCreate(this.props.activeMenu, orderToCreate);\r\n          }\r\n        }}\r\n        className=\"profileText\"\r\n      >\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Date of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <input\r\n              required\r\n              type=\"date\"\r\n              min={minDate}\r\n              max={maxDate}\r\n              placeholder=\"Date...\"\r\n              onChange={(e) => {\r\n                this.props.setOrdersDate(e.target.value);\r\n                this.props.resetSelected();\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>ClientName:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              maxMenuHeight={100}\r\n              options={clientList}\r\n              onChange={(data) => {\r\n                this.props.setOrdersClient(data.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure type:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.procedureType}\r\n              maxMenuHeight={100}\r\n              options={procedureTypesList}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderProcedureType');\r\n                this.props.getProcedures(data.value);\r\n                this.props.getEmployees(data.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.procedure}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderProcedure');\r\n                this.props.setOrdersProcedure(data.value);\r\n              }}\r\n              options={procedureList}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Employee:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.employee}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderEmployee');\r\n                this.props.setOrdersEmployee(data.value);\r\n                this.props.getSchedule(\r\n                  data.value,\r\n                  this.props.activeDate,\r\n                  this.props.activeProcedure.procedureId,\r\n                  this.props.openTime,\r\n                  this.props.closeTime,\r\n                );\r\n              }}\r\n              options={employeeList}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Time of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.orderTime}\r\n              hideSelectedOptions={true}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderTime');\r\n                this.props.setOrdersTime(data.value);\r\n              }}\r\n              options={scheduleTimesList}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"confirmUserInfo\">\r\n          <div>\r\n            <input type=\"submit\" className=\"modalButton\" value=\"Create\" />\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            maxWidth: 'fit-content',\r\n            background: '#6c3636',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            border: '6px solid #f7f6f6',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.createModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setCreateModalState}\r\n      >\r\n        <>\r\n          <p className=\"title\">Create new order</p>\r\n          <div className=\"profileBody\">{orderInfoArea}</div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // Modal window open/close states\r\n    createModalOpen: state.createModalOpen,\r\n    // Get all data\r\n    pagedTablesData: state.pagedTablesData,\r\n    activeMenu: state.activeMenu,\r\n    // Get single data (unneccessary here???)\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n\r\n    // For order creation\r\n    client: state.client,\r\n    orderTime: state.orderTime,\r\n    procedure: state.procedure,\r\n    procedureType: state.procedureType,\r\n    employee: state.employee,\r\n\r\n    //-----All procedures of certain procedure type\r\n    procedures: state.procedures,\r\n\r\n    //-----All employees of certain procedure type\r\n    employees: state.employees,\r\n\r\n    // Flag for enabling some of inputs\r\n    procedureInputStatus: state.procedureInputStatus,\r\n\r\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\r\n    schedule: state.schedule,\r\n\r\n    // active orders objects\r\n    activeProcedure: state.activeProcedure,\r\n    activeDate: state.activeDate,\r\n    activeTime: state.activeTime,\r\n    activeClient: state.activeClient,\r\n    activeEmployee: state.activeEmployee,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\r\n    getProcedures: (typeId) => dispatch(actions.GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) =>\r\n      dispatch(actions.GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n    setOrdersDate: (date) => dispatch(actions.SetActiveDate(date)),\r\n    setOrdersTime: (date) => dispatch(actions.SetActiveTime(date)),\r\n    setOrdersProcedure: (data) => dispatch(actions.SetActiveProcedure(data)),\r\n    setOrdersClient: (data) => dispatch(actions.SetActiveClient(data)),\r\n    setOrdersEmployee: (data) => dispatch(actions.SetActiveEmployee(data)),\r\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\r\n    setSelectedValue: (inputName) =>\r\n      dispatch(actions.SetSelectedValue(inputName)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
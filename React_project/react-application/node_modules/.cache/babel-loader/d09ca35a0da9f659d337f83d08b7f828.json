{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\CreateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport { SetCreateModalState, AddData, GetProceduresByType, GetEmployeesByProcedureType, GetAvaliableTimes, SetActiveDate, SetActiveProcedureId } from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateOrderModal extends React.PureComponent {\n  render() {\n    var orderInfoArea;\n    var actionButtons;\n    var orderToCreate = {\n      dateOfService: this.props.activeDate,\n      client: this.props.activeClient,\n      procedure: this.props.activeProcedure,\n      employee: this.props.activeEmployee\n    }; // Lists for the Select-dropdown\n\n    var clientList = [];\n    this.props.responseDataList.clients.forEach(element => {\n      clientList.push({\n        value: element.clientId,\n        label: element.firstName + ' ' + element.lastName\n      });\n    });\n    var procedureTypesList = [];\n    this.props.responseDataList.procedureTypes.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var procedureList = [];\n\n    if (this.props.procedures !== '') {\n      this.props.procedures.forEach(element => {\n        procedureList.push({\n          value: element.procedureId,\n          label: element.procedureName\n        });\n      });\n    }\n\n    var employeeList = [];\n\n    if (this.props.employees !== '') {\n      this.props.employees.forEach(element => {\n        employeeList.push({\n          value: element.employeeId,\n          label: element.firstName + ' ' + element.lastName\n        });\n      });\n    }\n\n    var scheduleTimesList = [];\n\n    if (this.props.schedule !== '') {\n      this.props.schedule.forEach(time => {\n        scheduleTimesList.push({\n          value: time,\n          label: time.substr(11)\n        });\n      });\n    } // Buttons and main area of modal menu\n\n\n    actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmUserInfo\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            console.log(orderToCreate);\n            this.props.setCreateModalState(); // close the modal\n\n            this.props.onCreate(this.props.activeMenu, orderToCreate);\n          },\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n    orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileText\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Date of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            placeholder: \"Date...\",\n            onChange: e => {\n              // ------- HERE!!!!!!\n              this.props.setDate(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"ClientName:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            maxMenuHeight: 100,\n            options: clientList,\n            onChange: data => {\n              this.props.responseDataList.clients.forEach(element => {\n                if (element.clientId === data.value) {\n                  // -------HERE!!!!!!!!!\n                  orderToCreate.client = element;\n                }\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            maxMenuHeight: 100,\n            options: procedureTypesList,\n            onChange: data => {\n              this.props.getProcedures(data.value);\n              this.props.getEmployees(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.procedures.forEach(procedure => {\n                if (procedure.procedureId === data.value) {\n                  orderToCreate.procedure = procedure; // this.props.setProcedure(procedure.procedureId);\n                  //-----HERE!!!!!\n\n                  this.props.setProcedure(procedure);\n                }\n              });\n            },\n            options: procedureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Employee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.employees.forEach(employee => {\n                if (employee.employeeId === data.value) //-------HERE!!!!!!!\n                  orderToCreate.employee = employee;\n              });\n              this.props.getSchedule(orderToCreate.employee.employeeId, this.props.activeDate, this.props.activeProcedureId, this.props.openTime, this.props.closeTime);\n            },\n            options: employeeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Time of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              //-------HERE!!!!!!!\n              orderToCreate.dateOfService = data.value;\n            },\n            options: scheduleTimesList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          background: 'wheat',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          fontSize: '45px',\n          border: '3px solid black',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.createModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setCreateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: orderInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    createModalOpen: state.createModalOpen,\n    responseDataList: state.responseDataList,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    procedures: state.procedures,\n    employees: state.employees,\n    procedureInputStatus: state.procedureInputStatus,\n    schedule: state.schedule,\n    activeProcedureId: state.activeProcedureId,\n    activeDate: state.activeDate\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCreateModalState: () => dispatch(SetCreateModalState()),\n    onCreate: (activeMenu, data) => dispatch(AddData(activeMenu, data)),\n    getProcedures: typeId => dispatch(GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setDate: date => dispatch(SetActiveDate(date)),\n    setProcedure: id => dispatch(SetActiveProcedureId(id))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/CreateOrderModal.js"],"names":["React","connect","Modal","SetCreateModalState","AddData","GetProceduresByType","GetEmployeesByProcedureType","GetAvaliableTimes","SetActiveDate","SetActiveProcedureId","Select","CreateOrderModal","PureComponent","render","orderInfoArea","actionButtons","orderToCreate","dateOfService","props","activeDate","client","activeClient","procedure","activeProcedure","employee","activeEmployee","clientList","responseDataList","clients","forEach","element","push","value","clientId","label","firstName","lastName","procedureTypesList","procedureTypes","text","procedureList","procedures","procedureId","procedureName","employeeList","employees","employeeId","scheduleTimesList","schedule","time","substr","console","log","setCreateModalState","onCreate","activeMenu","e","setDate","target","data","getProcedures","getEmployees","procedureInputStatus","setProcedure","getSchedule","activeProcedureId","openTime","closeTime","modal","background","padding","fontFamily","alignItems","textAlign","fontSize","border","borderRadius","createModalOpen","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","typeId","open","close","date","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport {\r\n  SetCreateModalState,\r\n  AddData,\r\n  GetProceduresByType,\r\n  GetEmployeesByProcedureType,\r\n  GetAvaliableTimes,\r\n  SetActiveDate,\r\n  SetActiveProcedureId,\r\n} from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\n\r\nclass CreateOrderModal extends React.PureComponent {\r\n  render() {\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var orderToCreate = {\r\n      dateOfService: this.props.activeDate,\r\n      client: this.props.activeClient,\r\n      procedure: this.props.activeProcedure,\r\n      employee: this.props.activeEmployee,\r\n    };\r\n\r\n    // Lists for the Select-dropdown\r\n    var clientList = [];\r\n    this.props.responseDataList.clients.forEach((element) => {\r\n      clientList.push({\r\n        value: element.clientId,\r\n        label: element.firstName + ' ' + element.lastName,\r\n      });\r\n    });\r\n\r\n    var procedureTypesList = [];\r\n    this.props.responseDataList.procedureTypes.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var procedureList = [];\r\n    if (this.props.procedures !== '') {\r\n      this.props.procedures.forEach((element) => {\r\n        procedureList.push({\r\n          value: element.procedureId,\r\n          label: element.procedureName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var employeeList = [];\r\n    if (this.props.employees !== '') {\r\n      this.props.employees.forEach((element) => {\r\n        employeeList.push({\r\n          value: element.employeeId,\r\n          label: element.firstName + ' ' + element.lastName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var scheduleTimesList = [];\r\n    if (this.props.schedule !== '') {\r\n      this.props.schedule.forEach((time) => {\r\n        scheduleTimesList.push({\r\n          value: time,\r\n          label: time.substr(11),\r\n        });\r\n      });\r\n    }\r\n\r\n    // Buttons and main area of modal menu\r\n    actionButtons = (\r\n      <div className=\"confirmUserInfo\">\r\n        <div>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              console.log(orderToCreate);\r\n              this.props.setCreateModalState(); // close the modal\r\n              this.props.onCreate(this.props.activeMenu, orderToCreate);\r\n            }}\r\n          >\r\n            Create\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    orderInfoArea = (\r\n      <div className=\"profileText\">\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Date of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <input\r\n              type=\"date\"\r\n              placeholder=\"Date...\"\r\n              onChange={(e) => {\r\n                // ------- HERE!!!!!!\r\n                this.props.setDate(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>ClientName:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              maxMenuHeight={100}\r\n              options={clientList}\r\n              onChange={(data) => {\r\n                this.props.responseDataList.clients.forEach((element) => {\r\n                  if (element.clientId === data.value) {\r\n                    // -------HERE!!!!!!!!!\r\n                    orderToCreate.client = element;\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure type:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              maxMenuHeight={100}\r\n              options={procedureTypesList}\r\n              onChange={(data) => {\r\n                this.props.getProcedures(data.value);\r\n                this.props.getEmployees(data.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.procedures.forEach((procedure) => {\r\n                  if (procedure.procedureId === data.value) {\r\n                    orderToCreate.procedure = procedure;\r\n                    // this.props.setProcedure(procedure.procedureId);\r\n\r\n                    //-----HERE!!!!!\r\n                    this.props.setProcedure(procedure);\r\n                  }\r\n                });\r\n              }}\r\n              options={procedureList}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Employee:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.employees.forEach((employee) => {\r\n                  if (employee.employeeId === data.value)\r\n                    //-------HERE!!!!!!!\r\n                    orderToCreate.employee = employee;\r\n                });\r\n                this.props.getSchedule(\r\n                  orderToCreate.employee.employeeId,\r\n                  this.props.activeDate,\r\n                  this.props.activeProcedureId,\r\n                  this.props.openTime,\r\n                  this.props.closeTime,\r\n                );\r\n              }}\r\n              options={employeeList}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Time of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                //-------HERE!!!!!!!\r\n                orderToCreate.dateOfService = data.value;\r\n              }}\r\n              options={scheduleTimesList}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            background: 'wheat',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            fontSize: '45px',\r\n            border: '3px solid black',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.createModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setCreateModalState}\r\n      >\r\n        <>\r\n          <div className=\"profileBody\">{orderInfoArea}</div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n\r\n    createModalOpen: state.createModalOpen,\r\n    responseDataList: state.responseDataList,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    procedures: state.procedures,\r\n    employees: state.employees,\r\n    procedureInputStatus: state.procedureInputStatus,\r\n    schedule: state.schedule,\r\n    activeProcedureId: state.activeProcedureId,\r\n    activeDate: state.activeDate,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setCreateModalState: () => dispatch(SetCreateModalState()),\r\n    onCreate: (activeMenu, data) => dispatch(AddData(activeMenu, data)),\r\n    getProcedures: (typeId) => dispatch(GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) => dispatch(GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close),\r\n      ),\r\n    setDate: (date) => dispatch(SetActiveDate(date)),\r\n    setProcedure: (id) => dispatch(SetActiveProcedureId(id)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
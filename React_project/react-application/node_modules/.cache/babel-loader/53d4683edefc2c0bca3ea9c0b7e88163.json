{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\OrdersTable.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass OrdersList extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData.orders;\n\n    if (data !== '') {\n      var elements = [];\n      var element;\n\n      var header = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date of service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client phone number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this);\n\n      for (let i = 0; i < data.length; i++) {\n        var serviceDateInfo = String(data[i].dateOfService).substring(0, 10) + ' ' + String(data[i].dateOfService).substring(12);\n        element = '';\n        element = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: data[i].orderId,\n          onClick: async () => {\n            this.props.setActiveId(data[i].orderId);\n            await this.props.getOrder(data[i].orderId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n            this.props.getSchedule(data[i].employyeId, data[i].dateOfService, data[i].procedureId, this.props.openTime, this.props.closeTime);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: serviceDateInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].clientFullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].clientPhoneNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].clientEmail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].procedureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].procedureCost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].employeeFullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, data[i].orderId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this);\n        elements = elements.concat(element);\n      }\n\n      if (data !== '') {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.setCreateModalState();\n            },\n            children: \"New order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dataTable\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"tableStyle\",\n              children: [header, /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: elements\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"There is no Data in DB...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      }\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pagedTablesData: state.pagedTablesData,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    openTime: state.openTime,\n    closeTime: state.closeTime\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getOrder: (id, activeMenu) => dispatch(actions.FetchActiveRecordData(id, activeMenu)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/OrdersTable.js"],"names":["React","connect","actions","CreateOrderModal","UpdateOrderModal","OrdersList","PureComponent","render","data","props","pagedTablesData","orders","elements","element","header","i","length","serviceDateInfo","String","dateOfService","substring","orderId","setActiveId","getOrder","activeMenu","setUpdateModalState","getSchedule","employyeId","procedureId","openTime","closeTime","clientFullName","clientPhoneNumber","clientEmail","procedureName","procedureCost","employeeFullName","concat","setCreateModalState","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","FetchActiveRecordData","employeeId","open","close","GetAvaliableTimes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\r\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\r\n\r\nclass OrdersList extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData.orders;\r\n    if (data !== '') {\r\n      var elements = [];\r\n      var element;\r\n      var header = (\r\n        <thead>\r\n          <tr>\r\n            <th>Date of service</th>\r\n            <th>Client name</th>\r\n            <th>Client phone number</th>\r\n            <th>Client email</th>\r\n            <th>Procedure name</th>\r\n            <th>Procedure cost</th>\r\n            <th>Employee</th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n      for (let i = 0; i < data.length; i++) {\r\n        var serviceDateInfo =\r\n          String(data[i].dateOfService).substring(0, 10) +\r\n          ' ' +\r\n          String(data[i].dateOfService).substring(12);\r\n\r\n        element = '';\r\n        element = (\r\n          <tr\r\n            key={data[i].orderId}\r\n            id={data[i].orderId}\r\n            onClick={async () => {\r\n              this.props.setActiveId(data[i].orderId);\r\n              await this.props.getOrder(data[i].orderId, this.props.activeMenu);\r\n              this.props.setUpdateModalState();\r\n              this.props.getSchedule(\r\n                data[i].employyeId,\r\n                data[i].dateOfService,\r\n                data[i].procedureId,\r\n                this.props.openTime,\r\n                this.props.closeTime,\r\n              );\r\n            }}\r\n          >\r\n            <td>{serviceDateInfo}</td>\r\n            <td>{data[i].clientFullName}</td>\r\n            <td>{data[i].clientPhoneNumber}</td>\r\n            <td>{data[i].clientEmail}</td>\r\n            <td>{data[i].procedureName}</td>\r\n            <td>{data[i].procedureCost}</td>\r\n            <td>{data[i].employeeFullName}</td>\r\n          </tr>\r\n        );\r\n        elements = elements.concat(element);\r\n      }\r\n\r\n      if (data !== '') {\r\n        return (\r\n          <>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.setCreateModalState();\r\n              }}\r\n            >\r\n              New order\r\n            </button>\r\n            <div className=\"dataTable\">\r\n              <table className=\"tableStyle\">\r\n                {header}\r\n                <tbody>{elements}</tbody>\r\n                {/* <CreateOrderModal /> */}\r\n                {/* <UpdateOrderModal /> */}\r\n              </table>\r\n            </div>\r\n          </>\r\n        );\r\n      } else {\r\n        return (\r\n          <>\r\n            <p>There is no Data in DB...</p>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pagedTablesData: state.pagedTablesData,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getOrder: (id, activeMenu) =>\r\n      dispatch(actions.FetchActiveRecordData(id, activeMenu)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);\r\n"]},"metadata":{},"sourceType":"module"}
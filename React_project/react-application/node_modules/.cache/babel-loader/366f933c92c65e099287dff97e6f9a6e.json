{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\project\\\\React_project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\UpdateServiceTypeModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UpdateServiceTypeModal extends React.PureComponent {\n  render() {\n    var procedureTypeInfoArea;\n    var actionButtons;\n    var singleData = this.props.singleResponseData;\n    var procedureTypeName = '';\n    if (singleData !== '') procedureTypeName = singleData.procedureTypeName;\n    var procedureTypeToUpdate = {\n      procedureTypeId: singleData.procedureTypeId,\n      procedureTypeName: singleData.procedureTypeName,\n      mediaFile: singleData.mediaFile\n    };\n\n    if (!this.props.isEditing) {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editProcedureTypeInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: this.props.onEdit,\n          children: \"Edit type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.onDelete(this.props.activeId);\n            this.props.setProcedureTypeUpdateModalState();\n          },\n          children: \"Delete type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this);\n      procedureTypeInfoArea = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileText\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Procedure type name: \", procedureTypeName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    } else {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmUserInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.onSubmit,\n            id: \"submForm\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"procedureTypePhotoInput\",\n              id: \"procedureTypePhoto\",\n              name: \"procedureTypePhoto\",\n              type: \"file\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"modalButton\",\n              type: \"submit\",\n              onClick: () => {\n                const formData = new FormData();\n                var procedureTypePhoto = document.getElementById('procedureTypePhoto');\n                formData.append('procedureTypePhoto', procedureTypePhoto.files[0]);\n                this.props.uploadPhoto(this.props.activeId, formData);\n                this.props.onEdit();\n                this.props.setProcedureTypeUpdateModalState();\n              },\n              children: \"Save photo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.onEdit();\n              this.props.setProcedureTypeUpdateModalState();\n              this.props.onUpdate(procedureTypeToUpdate);\n            },\n            children: \"Save changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n      procedureTypeInfoArea = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileText\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profileTextItem-left\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Service type name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profileTextItem-right\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: procedureTypeName,\n                onChange: e => {\n                  procedureTypeToUpdate.procedureTypeName = e.target.value;\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          maxWidth: 'fit-content',\n          background: '#6c3636',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          border: '6px solid #f7f6f6',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.updateProcedureTypeModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setProcedureTypeUpdateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title\",\n          children: \"Service type menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"procedureTypeBody\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"procedureTypePhoto\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.props.procedureTypePhoto,\n              alt: \"There is no data...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), procedureTypeInfoArea]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    procedureTypePhoto: state.procedureTypePhoto,\n    isEditing: state.isEditing,\n    singleResponseData: state.singleResponseData,\n    updateProcedureTypeModalOpen: state.updateProcedureTypeModalOpen,\n    activeId: state.activeId\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    uploadPhoto: (procedureTypeId, procedureTypePhoto) => dispatch(actions.UploadProcedureTypePhoto(procedureTypeId, procedureTypePhoto)),\n    onEdit: () => dispatch(actions.SetEditModalState()),\n    setProcedureTypeUpdateModalState: () => dispatch(actions.SetProcedureTypeUpdateModalState()),\n    onUpdate: data => dispatch(actions.UpdateProcedureType(data)),\n    onDelete: id => dispatch(actions.DeleteServiceType(id))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateServiceTypeModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/project/React_project/react-application/src/Components/ModalWindowsComponents/UpdateServiceTypeModal.js"],"names":["React","connect","Modal","actions","UpdateServiceTypeModal","PureComponent","render","procedureTypeInfoArea","actionButtons","singleData","props","singleResponseData","procedureTypeName","procedureTypeToUpdate","procedureTypeId","mediaFile","isEditing","onEdit","onDelete","activeId","setProcedureTypeUpdateModalState","onSubmit","formData","FormData","procedureTypePhoto","document","getElementById","append","files","uploadPhoto","onUpdate","e","target","value","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","updateProcedureTypeModalOpen","mapStateToProps","state","mapDispatchToProps","dispatch","UploadProcedureTypePhoto","SetEditModalState","SetProcedureTypeUpdateModalState","data","UpdateProcedureType","id","DeleteServiceType"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\n\r\nclass UpdateServiceTypeModal extends React.PureComponent {\r\n  render() {\r\n    var procedureTypeInfoArea;\r\n    var actionButtons;\r\n    var singleData = this.props.singleResponseData;\r\n    var procedureTypeName = '';\r\n    if (singleData !== '') procedureTypeName = singleData.procedureTypeName;\r\n    var procedureTypeToUpdate = {\r\n      procedureTypeId: singleData.procedureTypeId,\r\n      procedureTypeName: singleData.procedureTypeName,\r\n      mediaFile: singleData.mediaFile,\r\n    };\r\n\r\n    if (!this.props.isEditing) {\r\n      actionButtons = (\r\n        <div className=\"editProcedureTypeInfo\">\r\n          <button className=\"modalButton\" onClick={this.props.onEdit}>\r\n            Edit type\r\n          </button>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.onDelete(this.props.activeId);\r\n              this.props.setProcedureTypeUpdateModalState();\r\n            }}\r\n          >\r\n            Delete type\r\n          </button>\r\n        </div>\r\n      );\r\n      procedureTypeInfoArea = (\r\n        <>\r\n          <div className=\"profileText\">\r\n            <div className=\"profileTextItem\">\r\n              <p>Procedure type name: {procedureTypeName}</p>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      actionButtons = (\r\n        <div className=\"confirmUserInfo\">\r\n          <div>\r\n            <form onSubmit={this.onSubmit} id=\"submForm\">\r\n              <input\r\n                className=\"procedureTypePhotoInput\"\r\n                id=\"procedureTypePhoto\"\r\n                name=\"procedureTypePhoto\"\r\n                type=\"file\"\r\n              />\r\n              <button\r\n                className=\"modalButton\"\r\n                type=\"submit\"\r\n                onClick={() => {\r\n                  const formData = new FormData();\r\n                  var procedureTypePhoto =\r\n                    document.getElementById('procedureTypePhoto');\r\n                  formData.append(\r\n                    'procedureTypePhoto',\r\n                    procedureTypePhoto.files[0],\r\n                  );\r\n                  this.props.uploadPhoto(this.props.activeId, formData);\r\n                  this.props.onEdit();\r\n                  this.props.setProcedureTypeUpdateModalState();\r\n                }}\r\n              >\r\n                Save photo\r\n              </button>\r\n            </form>\r\n          </div>\r\n          <div>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.onEdit();\r\n                this.props.setProcedureTypeUpdateModalState();\r\n                this.props.onUpdate(procedureTypeToUpdate);\r\n              }}\r\n            >\r\n              Save changes\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      procedureTypeInfoArea = (\r\n        <>\r\n          <div className=\"profileText\">\r\n            <div className=\"profileTextItem\">\r\n              <div className=\"profileTextItem-left\">\r\n                <p>Service type name:</p>\r\n              </div>\r\n              <div className=\"profileTextItem-right\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder={procedureTypeName}\r\n                  onChange={(e) => {\r\n                    procedureTypeToUpdate.procedureTypeName = e.target.value;\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            maxWidth: 'fit-content',\r\n            background: '#6c3636',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            border: '6px solid #f7f6f6',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.updateProcedureTypeModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setProcedureTypeUpdateModalState}\r\n      >\r\n        <>\r\n          <p className=\"title\">Service type menu</p>\r\n          <div className=\"procedureTypeBody\">\r\n            <div className=\"procedureTypePhoto\">\r\n              <img\r\n                src={this.props.procedureTypePhoto}\r\n                alt=\"There is no data...\"\r\n              />\r\n            </div>\r\n            {procedureTypeInfoArea}\r\n          </div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    procedureTypePhoto: state.procedureTypePhoto,\r\n    isEditing: state.isEditing,\r\n    singleResponseData: state.singleResponseData,\r\n    updateProcedureTypeModalOpen: state.updateProcedureTypeModalOpen,\r\n    activeId: state.activeId,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    uploadPhoto: (procedureTypeId, procedureTypePhoto) =>\r\n      dispatch(\r\n        actions.UploadProcedureTypePhoto(procedureTypeId, procedureTypePhoto),\r\n      ),\r\n    onEdit: () => dispatch(actions.SetEditModalState()),\r\n    setProcedureTypeUpdateModalState: () =>\r\n      dispatch(actions.SetProcedureTypeUpdateModalState()),\r\n    onUpdate: (data) => dispatch(actions.UpdateProcedureType(data)),\r\n    onDelete: (id) => dispatch(actions.DeleteServiceType(id)),\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(UpdateServiceTypeModal);\r\n"]},"metadata":{},"sourceType":"module"}
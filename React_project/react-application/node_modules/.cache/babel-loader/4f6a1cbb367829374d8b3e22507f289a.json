{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\OrdersTable.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\nimport StyleChange from '../../Functions/ChangeStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass OrdersList extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n\n    if (data.orders !== '') {\n      var elements = [];\n      var element;\n\n      var header = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Date of service\", ' ', /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client phone number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this);\n\n      for (let i = 0; i < data.orders.length; i++) {\n        var serviceDateInfo = String(data.orders[i].dateOfService).substring(0, 10) + ' ' + String(data.orders[i].dateOfService).substring(11, 16);\n        var serviceDate = String(data.orders[i].dateOfService).substring(0, 10);\n        element = '';\n        element = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: data.orders[i].orderId // eslint-disable-next-line no-loop-func\n          ,\n          onClick: () => {\n            this.props.setActiveId(data.orders[i].orderId);\n            this.props.getOrder(data.orders[i].orderId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n            this.props.getSchedule(data.orders[i].employeeId, serviceDate, data.orders[i].procedureId, this.props.openTime, this.props.closeTime);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: serviceDateInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].clientFullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].clientPhoneNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].clientEmail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].procedureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].procedureCost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orders[i].employeeFullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, data.orders[i].orderId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this);\n        elements = elements.concat(element);\n      } //===============================\n\n\n      var pages = [];\n      let pageNumber = 1;\n\n      for (let i = 0; i < data.pagesCount; i++) {\n        pages.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page\",\n          id: i + 1,\n          onClick: e => {\n            this.props.getOrders(data.elementsPerPage, e.target.id); // StyleChange(e.target.id);\n          },\n          children: pageNumber\n        }, i + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this));\n        pageNumber++;\n      }\n\n      var initialstyle = document.getElementsByClassName('page');\n      initialstyle.foreeach; //===============================\n\n      if (data !== '') {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tableFunctionality\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"Orders\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"modalButton\",\n              onClick: () => {\n                this.props.setCreateModalState();\n              },\n              children: \"New order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  color: 'wheat'\n                },\n                children: \"Orders per page \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"recordsPerPage\",\n                id: \"12\" //======================================!!!!!!!!!!!!!!!!!!!!!!\n                ,\n                onClick: e => {\n                  this.props.getOrders(e.target.id, this.props.pageNumber);\n                  StyleChange(e.target.id);\n                },\n                children: \"12\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"recordsPerPage\",\n                id: \"24\",\n                onClick: e => {\n                  this.props.getOrders(e.target.id, this.props.pageNumber);\n                  StyleChange(e.target.id);\n                },\n                children: \"24\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"recordsPerPage\",\n                id: \"48\",\n                onClick: e => {\n                  this.props.getOrders(e.target.id, this.props.pageNumber);\n                  StyleChange(e.target.id);\n                },\n                children: \"48\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"searchArea\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dataTable\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"tableStyle\",\n              children: [header, /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: elements\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CreateOrderModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this), pages]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"There is no Data in DB...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      }\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pagedTablesData: state.pagedTablesData,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    openTime: state.openTime,\n    closeTime: state.closeTime // elementsPerPage: state.elementsPerPage,\n    // pageNumber: state.pageNumber,\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getOrders: (rowsPerPage, pageNumber) => dispatch(actions.FeetchMainTableData('ordersPage', rowsPerPage, pageNumber)),\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getOrder: (id, activeMenu) => dispatch(actions.FetchActiveRecordData(id, activeMenu)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/OrdersTable.js"],"names":["React","connect","actions","CreateOrderModal","UpdateOrderModal","StyleChange","OrdersList","PureComponent","render","data","props","pagedTablesData","orders","elements","element","header","i","length","serviceDateInfo","String","dateOfService","substring","serviceDate","orderId","setActiveId","getOrder","activeMenu","setUpdateModalState","getSchedule","employeeId","procedureId","openTime","closeTime","clientFullName","clientPhoneNumber","clientEmail","procedureName","procedureCost","employeeFullName","concat","pages","pageNumber","pagesCount","push","e","getOrders","elementsPerPage","target","id","initialstyle","document","getElementsByClassName","foreeach","setCreateModalState","color","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","rowsPerPage","FeetchMainTableData","SetUpdateModalState","SetCreateModalState","SetActiveIdentifier","FetchActiveRecordData","open","close","GetAvaliableTimes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\r\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\r\nimport StyleChange from '../../Functions/ChangeStyles';\r\n\r\nclass OrdersList extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    if (data.orders !== '') {\r\n      var elements = [];\r\n      var element;\r\n      var header = (\r\n        <thead>\r\n          <tr>\r\n            <th>\r\n              Date of service{' '}\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>Client name</th>\r\n            <th>Client phone number</th>\r\n            <th>Client email</th>\r\n            <th>Procedure name</th>\r\n            <th>Procedure cost</th>\r\n            <th>Employee</th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n      for (let i = 0; i < data.orders.length; i++) {\r\n        var serviceDateInfo =\r\n          String(data.orders[i].dateOfService).substring(0, 10) +\r\n          ' ' +\r\n          String(data.orders[i].dateOfService).substring(11, 16);\r\n\r\n        var serviceDate = String(data.orders[i].dateOfService).substring(0, 10);\r\n\r\n        element = '';\r\n        element = (\r\n          <tr\r\n            key={data.orders[i].orderId}\r\n            id={data.orders[i].orderId}\r\n            // eslint-disable-next-line no-loop-func\r\n            onClick={() => {\r\n              this.props.setActiveId(data.orders[i].orderId);\r\n              this.props.getOrder(\r\n                data.orders[i].orderId,\r\n                this.props.activeMenu,\r\n              );\r\n              this.props.setUpdateModalState();\r\n              this.props.getSchedule(\r\n                data.orders[i].employeeId,\r\n                serviceDate,\r\n                data.orders[i].procedureId,\r\n                this.props.openTime,\r\n                this.props.closeTime,\r\n              );\r\n            }}\r\n          >\r\n            <td>{serviceDateInfo}</td>\r\n            <td>{data.orders[i].clientFullName}</td>\r\n            <td>{data.orders[i].clientPhoneNumber}</td>\r\n            <td>{data.orders[i].clientEmail}</td>\r\n            <td>{data.orders[i].procedureName}</td>\r\n            <td>{data.orders[i].procedureCost}</td>\r\n            <td>{data.orders[i].employeeFullName}</td>\r\n          </tr>\r\n        );\r\n        elements = elements.concat(element);\r\n      }\r\n\r\n      //===============================\r\n      var pages = [];\r\n      let pageNumber = 1;\r\n      for (let i = 0; i < data.pagesCount; i++) {\r\n        pages.push(\r\n          <button\r\n            className=\"page\"\r\n            id={i + 1}\r\n            key={i + 1}\r\n            onClick={(e) => {\r\n              this.props.getOrders(data.elementsPerPage, e.target.id);\r\n              // StyleChange(e.target.id);\r\n            }}\r\n          >\r\n            {pageNumber}\r\n          </button>,\r\n        );\r\n        pageNumber++;\r\n      }\r\n      var initialstyle = document.getElementsByClassName('page');\r\n      initialstyle.foreeach;\r\n      //===============================\r\n\r\n      if (data !== '') {\r\n        return (\r\n          <>\r\n            <div className=\"tableFunctionality\">\r\n              <p className=\"title\">Orders</p>\r\n              <button\r\n                className=\"modalButton\"\r\n                onClick={() => {\r\n                  this.props.setCreateModalState();\r\n                }}\r\n              >\r\n                New order\r\n              </button>\r\n              <div>\r\n                <p style={{ color: 'wheat' }}>Orders per page </p>\r\n                <button\r\n                  className=\"recordsPerPage\"\r\n                  id=\"12\" //======================================!!!!!!!!!!!!!!!!!!!!!!\r\n                  onClick={(e) => {\r\n                    this.props.getOrders(e.target.id, this.props.pageNumber);\r\n                    StyleChange(e.target.id);\r\n                  }}\r\n                >\r\n                  12\r\n                </button>\r\n                <button\r\n                  className=\"recordsPerPage\"\r\n                  id=\"24\"\r\n                  onClick={(e) => {\r\n                    this.props.getOrders(e.target.id, this.props.pageNumber);\r\n                    StyleChange(e.target.id);\r\n                  }}\r\n                >\r\n                  24\r\n                </button>\r\n                <button\r\n                  className=\"recordsPerPage\"\r\n                  id=\"48\"\r\n                  onClick={(e) => {\r\n                    this.props.getOrders(e.target.id, this.props.pageNumber);\r\n                    StyleChange(e.target.id);\r\n                  }}\r\n                >\r\n                  48\r\n                </button>\r\n              </div>\r\n              <div className=\"searchArea\"></div>\r\n              <input type=\"text\" />\r\n            </div>\r\n\r\n            <div className=\"dataTable\">\r\n              <table className=\"tableStyle\">\r\n                {header}\r\n                <tbody>{elements}</tbody>\r\n                <CreateOrderModal />\r\n                {/* <UpdateOrderModal /> */}\r\n                {pages}\r\n              </table>\r\n            </div>\r\n          </>\r\n        );\r\n      } else {\r\n        return (\r\n          <>\r\n            <p>There is no Data in DB...</p>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pagedTablesData: state.pagedTablesData,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // elementsPerPage: state.elementsPerPage,\r\n    // pageNumber: state.pageNumber,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getOrders: (rowsPerPage, pageNumber) =>\r\n      dispatch(\r\n        actions.FeetchMainTableData('ordersPage', rowsPerPage, pageNumber),\r\n      ),\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getOrder: (id, activeMenu) =>\r\n      dispatch(actions.FetchActiveRecordData(id, activeMenu)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);\r\n"]},"metadata":{},"sourceType":"module"}
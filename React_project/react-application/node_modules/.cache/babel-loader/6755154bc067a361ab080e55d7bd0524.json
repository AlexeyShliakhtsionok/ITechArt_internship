{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\EmployeesNew.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateEmployeeModal from '../ModalWindowsComponents/CreateEmployeeModal.js';\nimport UpdateEmployeeModal from '../ModalWindowsComponents/UpdateEmployeeModal.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass EmployeeList extends React.PureComponent {\n  render() {\n    if (this.props.responseDataList !== '') {\n      var elements = [];\n      var element;\n      var photos = [];\n\n      for (let i = 0; i < this.props.responseDataList.employees.length; i++) {\n        console.log(typeof this.props.responseDataList.employees[0].mediaFiles[0].fileData);\n        var source = `${this.props.responseDataList.employees[i].mediaFiles[0].fileData}`;\n        var imageType = `${this.props.responseDataList.employees[i].mediaFiles[0].fileType}`;\n        var result = `data:image/gif;base64,${source}`;\n        photos.push(this.props.getProfilePhotoByEmployeeId(this.props.responseDataList.employees[i].employeeId));\n        element = '';\n        element = /*#__PURE__*/_jsxDEV(\"dir\", {\n          className: \"profileCardBody\",\n          id: this.props.responseDataList.employees[i].employeeId,\n          onClick: () => {\n            this.props.setActiveId(this.props.responseDataList.employees[i].employeeId);\n            this.props.getEmployee(this.props.responseDataList.employees[i].employeeId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n            this.props.getProfilePhotoByEmployeeId(this.props.responseDataList.employees[i].employeeId);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileCardInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.props.responseDataList.employees[i].firstName + ' ' + this.props.responseDataList.employees[i].lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profileCardPhoto\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: result,\n                alt: \"ololololo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, this.props.responseDataList.employees[i].employeeId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this);\n        elements = elements.concat(element);\n      }\n    }\n\n    if (this.props.responseDataList !== '') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.setCreateModalState();\n          },\n          children: \"New employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataTable\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"tableStyle\",\n            children: [/*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: elements\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CreateEmployeeModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(UpdateEmployeeModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There is no Data in DB...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    responseDataList: state.responseDataList,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getEmployee: (id, activeMenu) => dispatch(actions.FetchSingleData(id, activeMenu)),\n    getProfilePhotoByEmployeeId: id => dispatch(actions.GetProfilePhotoByEmployeeId(id))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/EmployeesNew.js"],"names":["React","connect","actions","CreateEmployeeModal","UpdateEmployeeModal","EmployeeList","PureComponent","render","props","responseDataList","elements","element","photos","i","employees","length","console","log","mediaFiles","fileData","source","imageType","fileType","result","push","getProfilePhotoByEmployeeId","employeeId","setActiveId","getEmployee","activeMenu","setUpdateModalState","firstName","lastName","concat","setCreateModalState","mapStateToProps","state","activeId","mapDispatchToProps","dispatch","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","FetchSingleData","GetProfilePhotoByEmployeeId"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateEmployeeModal from '../ModalWindowsComponents/CreateEmployeeModal.js';\r\nimport UpdateEmployeeModal from '../ModalWindowsComponents/UpdateEmployeeModal.js';\r\n\r\nclass EmployeeList extends React.PureComponent {\r\n  render() {\r\n    if (this.props.responseDataList !== '') {\r\n      var elements = [];\r\n      var element;\r\n      var photos = [];\r\n\r\n      for (let i = 0; i < this.props.responseDataList.employees.length; i++) {\r\n        console.log(\r\n          typeof this.props.responseDataList.employees[0].mediaFiles[0]\r\n            .fileData,\r\n        );\r\n\r\n        var source = `${this.props.responseDataList.employees[i].mediaFiles[0].fileData}`;\r\n        var imageType = `${this.props.responseDataList.employees[i].mediaFiles[0].fileType}`;\r\n        var result = `data:image/gif;base64,${source}`;\r\n\r\n        photos.push(\r\n          this.props.getProfilePhotoByEmployeeId(\r\n            this.props.responseDataList.employees[i].employeeId,\r\n          ),\r\n        );\r\n        element = '';\r\n        element = (\r\n          <dir\r\n            className=\"profileCardBody\"\r\n            key={this.props.responseDataList.employees[i].employeeId}\r\n            id={this.props.responseDataList.employees[i].employeeId}\r\n            onClick={() => {\r\n              this.props.setActiveId(\r\n                this.props.responseDataList.employees[i].employeeId,\r\n              );\r\n              this.props.getEmployee(\r\n                this.props.responseDataList.employees[i].employeeId,\r\n                this.props.activeMenu,\r\n              );\r\n              this.props.setUpdateModalState();\r\n              this.props.getProfilePhotoByEmployeeId(\r\n                this.props.responseDataList.employees[i].employeeId,\r\n              );\r\n            }}\r\n          >\r\n            <div className=\"profileCardInfo\">\r\n              <p>\r\n                {this.props.responseDataList.employees[i].firstName +\r\n                  ' ' +\r\n                  this.props.responseDataList.employees[i].lastName}\r\n              </p>\r\n              <div className=\"profileCardPhoto\">\r\n                <img src={result} alt=\"ololololo\" />\r\n              </div>\r\n            </div>\r\n          </dir>\r\n        );\r\n        elements = elements.concat(element);\r\n      }\r\n    }\r\n\r\n    if (this.props.responseDataList !== '') {\r\n      return (\r\n        <>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.setCreateModalState();\r\n            }}\r\n          >\r\n            New employee\r\n          </button>\r\n          <div className=\"dataTable\">\r\n            <table className=\"tableStyle\">\r\n              <tbody>{elements}</tbody>\r\n              <CreateEmployeeModal />\r\n              <UpdateEmployeeModal />\r\n            </table>\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <p>There is no Data in DB...</p>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    responseDataList: state.responseDataList,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getEmployee: (id, activeMenu) =>\r\n      dispatch(actions.FetchSingleData(id, activeMenu)),\r\n    getProfilePhotoByEmployeeId: (id) =>\r\n      dispatch(actions.GetProfilePhotoByEmployeeId(id)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeList);\r\n"]},"metadata":{},"sourceType":"module"}
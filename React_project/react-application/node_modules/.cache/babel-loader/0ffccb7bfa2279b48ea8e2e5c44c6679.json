{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\UpdateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { DateFormat } from '../../Functions/DateFormat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UpdateOrderModal extends React.PureComponent {\n  render() {\n    var orderInfoArea;\n    var actionButtons;\n    var minDate = DateFormat(Date());\n    var orderToUpdate = '';\n    var clientName = '';\n    var employeeName = '';\n    var procedure = '';\n    var procedureType = '';\n    var orderDate = Date();\n    var orderTime = Date();\n\n    if (this.props.singleResponseData !== '') {\n      orderToUpdate = {\n        dateOfService: this.props.activeTime,\n        client: this.props.singleResponseData.client,\n        procedure: this.props.activeProcedure,\n        employee: this.props.activeEmployee\n      };\n      clientName = this.props.singleResponseData.client.firstName + this.props.singleResponseData.client.lastName;\n      employeeName = this.props.singleResponseData.employee.firstName + this.props.singleResponseData.employee.lastName;\n      procedure = this.props.singleResponseData.procedure.procedureName;\n      orderDate = this.props.singleResponseData.dateOfService.substr(0, 10);\n      orderTime = this.props.singleResponseData.dateOfService.substr(11, 5);\n      this.props.responseDataList.procedures.forEach(procedure => {\n        if (procedure.procedureName === this.props.singleResponseData.procedure.procedureName) {\n          procedureType = procedure.procedureType.procedureTypeName;\n        }\n      });\n    }\n\n    var clientList = [];\n    this.props.responseDataList.clients.forEach(element => {\n      clientList.push({\n        value: element.clientId,\n        label: element.firstName + ' ' + element.lastName\n      });\n    });\n    var procedureTypesList = [];\n    this.props.responseDataList.procedureTypes.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var procedureList = [];\n    this.props.responseDataList.procedures.forEach(element => {\n      procedureList.push({\n        value: element.procedureId,\n        label: element.procedureName\n      });\n    });\n    var employeeList = [];\n    this.props.responseDataList.employees.forEach(element => {\n      employeeList.push({\n        value: element.employeeId,\n        label: element.firstName + ' ' + element.lastName\n      });\n    });\n    var scheduleTimesList = [];\n\n    if (this.props.schedule !== '') {\n      this.props.schedule.forEach(time => {\n        scheduleTimesList.push({\n          value: time,\n          label: time.substr(11)\n        });\n      });\n    }\n\n    if (!this.props.isEditing) {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editUserInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: this.props.onEdit,\n          children: \"Edit order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.onDelete(this.props.activeId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n          },\n          children: \"Delete order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this);\n      orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date of service: \", orderDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Client name: \", clientName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Procedure type:\", procedureType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Procedure:\", procedure]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Employee: \", employeeName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time of service: \", orderTime, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    } else {\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmUserInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.onEdit();\n              this.props.setUpdateModalState();\n              this.props.onUpdate(this.props.activeMenu, orderToUpdate);\n            },\n            children: \"Save changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this);\n      orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Date of service:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              min: minDate,\n              defaultValue: orderDate,\n              onChange: e => {\n                this.props.setOrdersDate(e.target.value); //======!!!!!!\n\n                this.props.resetSelected(); //======!!!!!!\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Client name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              maxMenuHeight: 100,\n              options: clientList,\n              value: clientName,\n              onChange: data => {\n                this.props.responseDataList.clients.forEach(client => {\n                  if (client.clientId === data.value) {\n                    this.props.setOrdersClient(client);\n                  }\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Procedure type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.procedureType,\n              maxMenuHeight: 100,\n              options: procedureTypesList,\n              onChange: data => {\n                this.props.setSelectedValue('orderProcedureType'); //=====!!!!!\n\n                this.props.getProcedures(data.value); //=====!!!!!\n\n                this.props.getEmployees(data.value); //=====!!!!!\n                // this.props.responseDataList.procedureTypes.forEach((type) => {\n                //   if (type.procedureTypeId === data.value)\n                //     orderToUpdate.procedureType = type;\n                // });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Procedure:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.procedure,\n              isDisabled: this.props.procedureInputStatus,\n              maxMenuHeight: 100,\n              options: procedureList,\n              onChange: data => {\n                this.props.setSelectedValue('orderProcedure');\n                this.props.responseDataList.procedures.forEach(procedure => {\n                  if (procedure.procedureId === data.value) orderToUpdate.procedure = procedure;\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Employee:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: employeeName,\n              isDisabled: this.props.procedureInputStatus //======!!!!!!\n              ,\n              maxMenuHeight: 100,\n              onChange: data => {\n                this.props.setSelectedValue('orderEmployee'); //=======!!!!!!\n\n                this.props.responseDataList.employees.forEach(employee => {\n                  if (employee.employeeId === data.value) orderToUpdate.employee = employee;\n                  this.props.setOrdersEmployee(employee);\n                });\n                this.props.getSchedule(data.value, this.props.activeDate, this.props.activeProcedure.procedureId, this.props.openTime, this.props.closeTime);\n              },\n              options: employeeList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Time of service:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: orderTime,\n              hideSelectedOptions: true //======!!!!!!\n              ,\n              isDisabled: this.props.procedureInputStatus //======!!!!!!\n              ,\n              maxMenuHeight: 100,\n              onChange: data => {\n                this.props.setSelectedValue('orderTime');\n                this.props.setOrdersTime(data.value);\n                orderToUpdate.employee = data.value;\n              },\n              options: scheduleTimesList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          maxWidth: 'fit-content',\n          background: '#6c3636',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          border: '6px solid #f7f6f6',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.updateModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setUpdateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: orderInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    updateModalOpen: state.updateModalOpen,\n    responseDataList: state.responseDataList,\n    singleResponseData: state.singleResponseData,\n    isEditing: state.isEditing,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    schedule: state.schedule,\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    // For order creation\n    client: state.client,\n    orderTime: state.orderTime,\n    procedure: state.procedure,\n    procedureType: state.procedureType,\n    employee: state.employee,\n    //-----All procedures of certain procedure type\n    procedures: state.procedures,\n    //-----All employees of certain procedure type\n    employees: state.employees,\n    // Flag for enabling some of inputs\n    procedureInputStatus: state.procedureInputStatus,\n    // active orders objects\n    activeProcedure: state.activeProcedure,\n    activeDate: state.activeDate,\n    activeTime: state.activeTime,\n    activeClient: state.activeClient,\n    activeEmployee: state.activeEmployee\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    onEdit: () => dispatch(actions.SetEditState()),\n    onDelete: (id, menu) => {\n      dispatch(actions.DeleteData(id, menu));\n    },\n    getProcedures: typeId => dispatch(actions.GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(actions.GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setOrdersDate: date => dispatch(actions.SetActiveDate(date)),\n    setOrdersTime: date => dispatch(actions.SetActiveTime(date)),\n    setOrdersProcedure: data => dispatch(actions.SetActiveProcedure(data)),\n    setOrdersClient: data => dispatch(actions.SetActiveClient(data)),\n    setOrdersEmployee: data => dispatch(actions.SetActiveEmployee(data)),\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\n    setSelectedValue: inputName => dispatch(actions.SetSelectedValue(inputName))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/UpdateOrderModal.js"],"names":["React","connect","Modal","actions","Select","DateFormat","UpdateOrderModal","PureComponent","render","orderInfoArea","actionButtons","minDate","Date","orderToUpdate","clientName","employeeName","procedure","procedureType","orderDate","orderTime","props","singleResponseData","dateOfService","activeTime","client","activeProcedure","employee","activeEmployee","firstName","lastName","procedureName","substr","responseDataList","procedures","forEach","procedureTypeName","clientList","clients","element","push","value","clientId","label","procedureTypesList","procedureTypes","text","procedureList","procedureId","employeeList","employees","employeeId","scheduleTimesList","schedule","time","isEditing","onEdit","onDelete","activeId","activeMenu","setUpdateModalState","onUpdate","e","setOrdersDate","target","resetSelected","data","setOrdersClient","setSelectedValue","getProcedures","getEmployees","procedureInputStatus","setOrdersEmployee","getSchedule","activeDate","openTime","closeTime","setOrdersTime","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","updateModalOpen","mapStateToProps","state","activeClient","mapDispatchToProps","dispatch","SetUpdateModalState","SetEditState","id","menu","DeleteData","typeId","GetProceduresByType","GetEmployeesByProcedureType","open","close","GetAvaliableTimes","date","SetActiveDate","SetActiveTime","setOrdersProcedure","SetActiveProcedure","SetActiveClient","SetActiveEmployee","ResetSelectedValues","inputName","SetSelectedValue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\nimport { DateFormat } from '../../Functions/DateFormat.js';\r\n\r\nclass UpdateOrderModal extends React.PureComponent {\r\n  render() {\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var minDate = DateFormat(Date());\r\n    var orderToUpdate = '';\r\n    var clientName = '';\r\n    var employeeName = '';\r\n    var procedure = '';\r\n    var procedureType = '';\r\n    var orderDate = Date();\r\n    var orderTime = Date();\r\n    if (this.props.singleResponseData !== '') {\r\n      orderToUpdate = {\r\n        dateOfService: this.props.activeTime,\r\n        client: this.props.singleResponseData.client,\r\n        procedure: this.props.activeProcedure,\r\n        employee: this.props.activeEmployee,\r\n      };\r\n      clientName =\r\n        this.props.singleResponseData.client.firstName +\r\n        this.props.singleResponseData.client.lastName;\r\n      employeeName =\r\n        this.props.singleResponseData.employee.firstName +\r\n        this.props.singleResponseData.employee.lastName;\r\n      procedure = this.props.singleResponseData.procedure.procedureName;\r\n      orderDate = this.props.singleResponseData.dateOfService.substr(0, 10);\r\n      orderTime = this.props.singleResponseData.dateOfService.substr(11, 5);\r\n      this.props.responseDataList.procedures.forEach((procedure) => {\r\n        if (\r\n          procedure.procedureName ===\r\n          this.props.singleResponseData.procedure.procedureName\r\n        ) {\r\n          procedureType = procedure.procedureType.procedureTypeName;\r\n        }\r\n      });\r\n    }\r\n\r\n    var clientList = [];\r\n    this.props.responseDataList.clients.forEach((element) => {\r\n      clientList.push({\r\n        value: element.clientId,\r\n        label: element.firstName + ' ' + element.lastName,\r\n      });\r\n    });\r\n\r\n    var procedureTypesList = [];\r\n    this.props.responseDataList.procedureTypes.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var procedureList = [];\r\n    this.props.responseDataList.procedures.forEach((element) => {\r\n      procedureList.push({\r\n        value: element.procedureId,\r\n        label: element.procedureName,\r\n      });\r\n    });\r\n\r\n    var employeeList = [];\r\n    this.props.responseDataList.employees.forEach((element) => {\r\n      employeeList.push({\r\n        value: element.employeeId,\r\n        label: element.firstName + ' ' + element.lastName,\r\n      });\r\n    });\r\n\r\n    var scheduleTimesList = [];\r\n    if (this.props.schedule !== '') {\r\n      this.props.schedule.forEach((time) => {\r\n        scheduleTimesList.push({\r\n          value: time,\r\n          label: time.substr(11),\r\n        });\r\n      });\r\n    }\r\n\r\n    if (!this.props.isEditing) {\r\n      actionButtons = (\r\n        <div className=\"editUserInfo\">\r\n          <button className=\"modalButton\" onClick={this.props.onEdit}>\r\n            Edit order\r\n          </button>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.onDelete(this.props.activeId, this.props.activeMenu);\r\n              this.props.setUpdateModalState();\r\n            }}\r\n          >\r\n            Delete order\r\n          </button>\r\n        </div>\r\n      );\r\n\r\n      orderInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <p>Date of service: {orderDate}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Client name: {clientName}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>\r\n              Procedure type:\r\n              {procedureType}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>\r\n              Procedure:\r\n              {procedure}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Employee: {employeeName}</p>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <p>Time of service: {orderTime} </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      actionButtons = (\r\n        <div className=\"confirmUserInfo\">\r\n          <div>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.onEdit();\r\n                this.props.setUpdateModalState();\r\n                this.props.onUpdate(this.props.activeMenu, orderToUpdate);\r\n              }}\r\n            >\r\n              Save changes\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      orderInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Date of service:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <input\r\n                type=\"date\"\r\n                min={minDate}\r\n                defaultValue={orderDate}\r\n                onChange={(e) => {\r\n                  this.props.setOrdersDate(e.target.value); //======!!!!!!\r\n                  this.props.resetSelected(); //======!!!!!!\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Client name:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                maxMenuHeight={100}\r\n                options={clientList}\r\n                value={clientName}\r\n                onChange={(data) => {\r\n                  this.props.responseDataList.clients.forEach((client) => {\r\n                    if (client.clientId === data.value) {\r\n                      this.props.setOrdersClient(client);\r\n                    }\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Procedure type:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.procedureType}\r\n                maxMenuHeight={100}\r\n                options={procedureTypesList}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderProcedureType'); //=====!!!!!\r\n                  this.props.getProcedures(data.value); //=====!!!!!\r\n                  this.props.getEmployees(data.value); //=====!!!!!\r\n                  // this.props.responseDataList.procedureTypes.forEach((type) => {\r\n                  //   if (type.procedureTypeId === data.value)\r\n                  //     orderToUpdate.procedureType = type;\r\n                  // });\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Procedure:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.procedure}\r\n                isDisabled={this.props.procedureInputStatus}\r\n                maxMenuHeight={100}\r\n                options={procedureList}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderProcedure');\r\n                  this.props.responseDataList.procedures.forEach(\r\n                    (procedure) => {\r\n                      if (procedure.procedureId === data.value)\r\n                        orderToUpdate.procedure = procedure;\r\n                    },\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Employee:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                placeholder={employeeName}\r\n                isDisabled={this.props.procedureInputStatus} //======!!!!!!\r\n                maxMenuHeight={100}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderEmployee'); //=======!!!!!!\r\n                  this.props.responseDataList.employees.forEach((employee) => {\r\n                    if (employee.employeeId === data.value)\r\n                      orderToUpdate.employee = employee;\r\n                    this.props.setOrdersEmployee(employee);\r\n                  });\r\n                  this.props.getSchedule(\r\n                    data.value,\r\n                    this.props.activeDate,\r\n                    this.props.activeProcedure.procedureId,\r\n                    this.props.openTime,\r\n                    this.props.closeTime,\r\n                  );\r\n                }}\r\n                options={employeeList}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Time of service:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                placeholder={orderTime}\r\n                hideSelectedOptions={true} //======!!!!!!\r\n                isDisabled={this.props.procedureInputStatus} //======!!!!!!\r\n                maxMenuHeight={100}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderTime');\r\n                  this.props.setOrdersTime(data.value);\r\n                  orderToUpdate.employee = data.value;\r\n                }}\r\n                options={scheduleTimesList}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            maxWidth: 'fit-content',\r\n            background: '#6c3636',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            border: '6px solid #f7f6f6',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.updateModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setUpdateModalState}\r\n      >\r\n        <>\r\n          <div className=\"profileBody\">{orderInfoArea}</div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    updateModalOpen: state.updateModalOpen,\r\n    responseDataList: state.responseDataList,\r\n    singleResponseData: state.singleResponseData,\r\n    isEditing: state.isEditing,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    schedule: state.schedule,\r\n\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // For order creation\r\n    client: state.client,\r\n    orderTime: state.orderTime,\r\n    procedure: state.procedure,\r\n    procedureType: state.procedureType,\r\n    employee: state.employee,\r\n\r\n    //-----All procedures of certain procedure type\r\n    procedures: state.procedures,\r\n\r\n    //-----All employees of certain procedure type\r\n    employees: state.employees,\r\n\r\n    // Flag for enabling some of inputs\r\n    procedureInputStatus: state.procedureInputStatus,\r\n\r\n    // active orders objects\r\n    activeProcedure: state.activeProcedure,\r\n    activeDate: state.activeDate,\r\n    activeTime: state.activeTime,\r\n    activeClient: state.activeClient,\r\n    activeEmployee: state.activeEmployee,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    onEdit: () => dispatch(actions.SetEditState()),\r\n    onDelete: (id, menu) => {\r\n      dispatch(actions.DeleteData(id, menu));\r\n    },\r\n    getProcedures: (typeId) => dispatch(actions.GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) =>\r\n      dispatch(actions.GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n    setOrdersDate: (date) => dispatch(actions.SetActiveDate(date)),\r\n    setOrdersTime: (date) => dispatch(actions.SetActiveTime(date)),\r\n    setOrdersProcedure: (data) => dispatch(actions.SetActiveProcedure(data)),\r\n    setOrdersClient: (data) => dispatch(actions.SetActiveClient(data)),\r\n    setOrdersEmployee: (data) => dispatch(actions.SetActiveEmployee(data)),\r\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\r\n    setSelectedValue: (inputName) =>\r\n      dispatch(actions.SetSelectedValue(inputName)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
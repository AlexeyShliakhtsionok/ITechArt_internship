{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\CreateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { DateFormat } from '../../Functions/DateFormat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateOrderModal extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n    var orderInfoArea;\n    var actionButtons;\n    var minDate = DateFormat(Date());\n    var currentDate = new Date();\n    var maxDate = DateFormat(new Date(currentDate.setDate(currentDate.getDate() + 30)));\n    var orderToCreate = {\n      dateOfService: this.props.activeTime,\n      client: this.props.activeClient,\n      procedure: this.props.activeProcedure,\n      employee: this.props.activeEmployee\n    }; // Lists for the Select-dropdown\n\n    var clientList = [];\n    data.clientsSelectList.forEach(element => {\n      clientList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var procedureTypesList = [];\n    this.props.responseDataList.procedureTypes.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var procedureList = [];\n    this.props.procedures.forEach(element => {\n      procedureList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var employeeList = [];\n\n    if (this.props.employees !== '') {\n      this.props.employees.forEach(element => {\n        employeeList.push({\n          value: element.employeeId,\n          label: element.firstName + ' ' + element.lastName\n        });\n      });\n    }\n\n    var scheduleTimesList = [];\n\n    if (this.props.schedule !== '') {\n      this.props.schedule.forEach(time => {\n        scheduleTimesList.push({\n          value: time,\n          label: time.substr(11)\n        });\n      });\n    } // Buttons and main area of modal menu\n\n\n    actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmUserInfo\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.setCreateModalState();\n            this.props.onCreate(this.props.activeMenu, orderToCreate);\n          },\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n    orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileText\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Date of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: minDate,\n            max: maxDate,\n            placeholder: \"Date...\",\n            onChange: e => {\n              this.props.setOrdersDate(e.target.value);\n              this.props.resetSelected();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"ClientName:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            maxMenuHeight: 100,\n            options: clientList,\n            onChange: data => {\n              this.props.responseDataList.clients.forEach(client => {\n                if (client.clientId === data.value) {\n                  this.props.setOrdersClient(client);\n                }\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.procedureType,\n            maxMenuHeight: 100,\n            options: procedureTypesList,\n            onChange: data => {\n              this.props.setSelectedValue('orderProcedureType');\n              this.props.getProcedures(data.value);\n              this.props.getEmployees(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.procedure,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderProcedure');\n              this.props.procedures.forEach(procedure => {\n                if (procedure.procedureId === data.value) {\n                  orderToCreate.procedure = procedure;\n                  this.props.setOrdersProcedure(procedure);\n                }\n              });\n            },\n            options: procedureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Employee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.employee,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderEmployee');\n              this.props.employees.forEach(employee => {\n                if (employee.employeeId === data.value) {\n                  this.props.setOrdersEmployee(employee);\n                }\n\n                this.props.getSchedule(data.value, this.props.activeDate, this.props.activeProcedure.procedureId, this.props.openTime, this.props.closeTime);\n              });\n            },\n            options: employeeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Time of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: this.props.orderTime,\n            hideSelectedOptions: true,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setSelectedValue('orderTime');\n              this.props.setOrdersTime(data.value);\n            },\n            options: scheduleTimesList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          maxWidth: 'fit-content',\n          background: '#6c3636',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          border: '6px solid #f7f6f6',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.createModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setCreateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: orderInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    // Modal window open/close states\n    createModalOpen: state.createModalOpen,\n    // Get all data\n    responseDataList: state.responseDataList,\n    activeMenu: state.activeMenu,\n    // Get single data (unneccessary here???)\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    // For order creation\n    client: state.client,\n    orderTime: state.orderTime,\n    procedure: state.procedure,\n    procedureType: state.procedureType,\n    employee: state.employee,\n    //-----All procedures of certain procedure type\n    procedures: state.procedures,\n    //-----All employees of certain procedure type\n    employees: state.employees,\n    // Flag for enabling some of inputs\n    procedureInputStatus: state.procedureInputStatus,\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\n    schedule: state.schedule,\n    // active orders objects\n    activeProcedure: state.activeProcedure,\n    activeDate: state.activeDate,\n    activeTime: state.activeTime,\n    activeClient: state.activeClient,\n    activeEmployee: state.activeEmployee\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\n    getProcedures: typeId => dispatch(actions.GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(actions.GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setOrdersDate: date => dispatch(actions.SetActiveDate(date)),\n    setOrdersTime: date => dispatch(actions.SetActiveTime(date)),\n    setOrdersProcedure: data => dispatch(actions.SetActiveProcedure(data)),\n    setOrdersClient: data => dispatch(actions.SetActiveClient(data)),\n    setOrdersEmployee: data => dispatch(actions.SetActiveEmployee(data)),\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\n    setSelectedValue: inputName => dispatch(actions.SetSelectedValue(inputName))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/CreateOrderModal.js"],"names":["React","connect","Modal","actions","Select","DateFormat","CreateOrderModal","PureComponent","render","data","props","pagedTablesData","orderInfoArea","actionButtons","minDate","Date","currentDate","maxDate","setDate","getDate","orderToCreate","dateOfService","activeTime","client","activeClient","procedure","activeProcedure","employee","activeEmployee","clientList","clientsSelectList","forEach","element","push","value","label","text","procedureTypesList","responseDataList","procedureTypes","procedureList","procedures","employeeList","employees","employeeId","firstName","lastName","scheduleTimesList","schedule","time","substr","setCreateModalState","onCreate","activeMenu","e","setOrdersDate","target","resetSelected","clients","clientId","setOrdersClient","procedureType","setSelectedValue","getProcedures","getEmployees","procedureInputStatus","procedureId","setOrdersProcedure","setOrdersEmployee","getSchedule","activeDate","openTime","closeTime","orderTime","setOrdersTime","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","createModalOpen","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetCreateModalState","AddData","typeId","GetProceduresByType","GetEmployeesByProcedureType","open","close","GetAvaliableTimes","date","SetActiveDate","SetActiveTime","SetActiveProcedure","SetActiveClient","SetActiveEmployee","ResetSelectedValues","inputName","SetSelectedValue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\nimport { DateFormat } from '../../Functions/DateFormat.js';\r\n\r\nclass CreateOrderModal extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var minDate = DateFormat(Date());\r\n    var currentDate = new Date();\r\n    var maxDate = DateFormat(\r\n      new Date(currentDate.setDate(currentDate.getDate() + 30)),\r\n    );\r\n    var orderToCreate = {\r\n      dateOfService: this.props.activeTime,\r\n      client: this.props.activeClient,\r\n      procedure: this.props.activeProcedure,\r\n      employee: this.props.activeEmployee,\r\n    };\r\n\r\n    // Lists for the Select-dropdown\r\n    var clientList = [];\r\n    data.clientsSelectList.forEach((element) => {\r\n      clientList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var procedureTypesList = [];\r\n    this.props.responseDataList.procedureTypes.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var procedureList = [];\r\n\r\n    this.props.procedures.forEach((element) => {\r\n      procedureList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var employeeList = [];\r\n    if (this.props.employees !== '') {\r\n      this.props.employees.forEach((element) => {\r\n        employeeList.push({\r\n          value: element.employeeId,\r\n          label: element.firstName + ' ' + element.lastName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var scheduleTimesList = [];\r\n    if (this.props.schedule !== '') {\r\n      this.props.schedule.forEach((time) => {\r\n        scheduleTimesList.push({\r\n          value: time,\r\n          label: time.substr(11),\r\n        });\r\n      });\r\n    }\r\n\r\n    // Buttons and main area of modal menu\r\n    actionButtons = (\r\n      <div className=\"confirmUserInfo\">\r\n        <div>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.setCreateModalState();\r\n              this.props.onCreate(this.props.activeMenu, orderToCreate);\r\n            }}\r\n          >\r\n            Create\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    orderInfoArea = (\r\n      <div className=\"profileText\">\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Date of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <input\r\n              type=\"date\"\r\n              min={minDate}\r\n              max={maxDate}\r\n              placeholder=\"Date...\"\r\n              onChange={(e) => {\r\n                this.props.setOrdersDate(e.target.value);\r\n                this.props.resetSelected();\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>ClientName:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              maxMenuHeight={100}\r\n              options={clientList}\r\n              onChange={(data) => {\r\n                this.props.responseDataList.clients.forEach((client) => {\r\n                  if (client.clientId === data.value) {\r\n                    this.props.setOrdersClient(client);\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure type:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.procedureType}\r\n              maxMenuHeight={100}\r\n              options={procedureTypesList}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderProcedureType');\r\n                this.props.getProcedures(data.value);\r\n                this.props.getEmployees(data.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.procedure}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderProcedure');\r\n                this.props.procedures.forEach((procedure) => {\r\n                  if (procedure.procedureId === data.value) {\r\n                    orderToCreate.procedure = procedure;\r\n                    this.props.setOrdersProcedure(procedure);\r\n                  }\r\n                });\r\n              }}\r\n              options={procedureList}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Employee:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.employee}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderEmployee');\r\n                this.props.employees.forEach((employee) => {\r\n                  if (employee.employeeId === data.value) {\r\n                    this.props.setOrdersEmployee(employee);\r\n                  }\r\n                  this.props.getSchedule(\r\n                    data.value,\r\n                    this.props.activeDate,\r\n                    this.props.activeProcedure.procedureId,\r\n                    this.props.openTime,\r\n                    this.props.closeTime,\r\n                  );\r\n                });\r\n              }}\r\n              options={employeeList}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Time of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={this.props.orderTime}\r\n              hideSelectedOptions={true}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setSelectedValue('orderTime');\r\n                this.props.setOrdersTime(data.value);\r\n              }}\r\n              options={scheduleTimesList}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            maxWidth: 'fit-content',\r\n            background: '#6c3636',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            border: '6px solid #f7f6f6',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.createModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setCreateModalState}\r\n      >\r\n        <>\r\n          <div className=\"profileBody\">{orderInfoArea}</div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // Modal window open/close states\r\n    createModalOpen: state.createModalOpen,\r\n    // Get all data\r\n    responseDataList: state.responseDataList,\r\n    activeMenu: state.activeMenu,\r\n    // Get single data (unneccessary here???)\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n\r\n    // For order creation\r\n    client: state.client,\r\n    orderTime: state.orderTime,\r\n    procedure: state.procedure,\r\n    procedureType: state.procedureType,\r\n    employee: state.employee,\r\n\r\n    //-----All procedures of certain procedure type\r\n    procedures: state.procedures,\r\n\r\n    //-----All employees of certain procedure type\r\n    employees: state.employees,\r\n\r\n    // Flag for enabling some of inputs\r\n    procedureInputStatus: state.procedureInputStatus,\r\n\r\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\r\n    schedule: state.schedule,\r\n\r\n    // active orders objects\r\n    activeProcedure: state.activeProcedure,\r\n    activeDate: state.activeDate,\r\n    activeTime: state.activeTime,\r\n    activeClient: state.activeClient,\r\n    activeEmployee: state.activeEmployee,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\r\n    getProcedures: (typeId) => dispatch(actions.GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) =>\r\n      dispatch(actions.GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n    setOrdersDate: (date) => dispatch(actions.SetActiveDate(date)),\r\n    setOrdersTime: (date) => dispatch(actions.SetActiveTime(date)),\r\n    setOrdersProcedure: (data) => dispatch(actions.SetActiveProcedure(data)),\r\n    setOrdersClient: (data) => dispatch(actions.SetActiveClient(data)),\r\n    setOrdersEmployee: (data) => dispatch(actions.SetActiveEmployee(data)),\r\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\r\n    setSelectedValue: (inputName) =>\r\n      dispatch(actions.SetSelectedValue(inputName)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
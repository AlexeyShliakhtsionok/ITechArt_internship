{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\ServicesTable.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateServiceModal from '../ModalWindowsComponents/CreateServiceModal.js';\nimport UpdateServiceModal from '../ModalWindowsComponents/UpdateServiceModal';\nimport RecordsPerPage from './PagesCountAndNavigationComponrnts/RecordsPerPageButtons';\nimport PageButtons from './PagesCountAndNavigationComponrnts/PagesButtons';\nimport SearchInput from './PagesCountAndNavigationComponrnts/SearchInput.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ServicesList extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData.procedures;\n\n    if (data !== '') {\n      var serviceElements = [];\n      var serviceTypesElements = [];\n      var serviceElement;\n      var serviceTypeElement;\n\n      var servicesHeader = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"tableRow\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Name\", ' ', /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Type\", ' ', /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Time amount\", ' ', /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Price\", ' ', /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this);\n\n      var serviceTypesHeader = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"tableRow\",\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Service type\", ' ', /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"sortIcon\",\n              src: \"../../Images/sort.png\",\n              alt: \"sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n\n      for (let j = 0; j < this.props.procedureTypesSelectList; j++) {\n        serviceTypeElement = '';\n        serviceTypeElement = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: this.props.procedureTypesSelectList.value,\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].procedureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, this.props.procedureTypesSelectList.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this);\n        serviceElements = serviceElements.concat(serviceElement);\n      }\n\n      for (let i = 0; i < data.length; i++) {\n        serviceElement = '';\n        serviceElement = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: data[i].procedureId,\n          onClick: () => {\n            if (this.props.isEditing) {\n              this.props.onEdit();\n            }\n\n            this.props.setActiveId(data[i].procedureId);\n            this.props.getService(data[i].procedureId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].procedureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].procedureType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].timeAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[i].procedurePrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, data[i].procedureId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this);\n        serviceElements = serviceElements.concat(serviceElement);\n      }\n    }\n\n    if (data !== '') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tableFunctionality\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title\",\n            children: \"Services\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.setCreateModalState();\n            },\n            children: \"New service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.setServiceTypeCreateModalState();\n            },\n            children: \"New service type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RecordsPerPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SearchInput, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"tableStyle\",\n            children: [servicesHeader, /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: serviceElements\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateServiceModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(UpdateServiceModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PageButtons, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There is no Data in DB...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pagedTablesData: state.pagedTablesData,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu,\n    isEditing: state.isEditing\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onEdit: () => dispatch(actions.SetEditModalState()),\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getService: (id, activeMenu) => dispatch(actions.FetchActiveRecordData(id, activeMenu))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServicesList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/ServicesTable.js"],"names":["React","connect","actions","CreateServiceModal","UpdateServiceModal","RecordsPerPage","PageButtons","SearchInput","ServicesList","PureComponent","render","data","props","pagedTablesData","procedures","serviceElements","serviceTypesElements","serviceElement","serviceTypeElement","servicesHeader","serviceTypesHeader","j","procedureTypesSelectList","value","i","procedureName","concat","length","procedureId","isEditing","onEdit","setActiveId","getService","activeMenu","setUpdateModalState","procedureType","timeAmount","procedurePrice","setCreateModalState","setServiceTypeCreateModalState","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetEditModalState","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","FetchActiveRecordData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateServiceModal from '../ModalWindowsComponents/CreateServiceModal.js';\r\nimport UpdateServiceModal from '../ModalWindowsComponents/UpdateServiceModal';\r\nimport RecordsPerPage from './PagesCountAndNavigationComponrnts/RecordsPerPageButtons';\r\nimport PageButtons from './PagesCountAndNavigationComponrnts/PagesButtons';\r\nimport SearchInput from './PagesCountAndNavigationComponrnts/SearchInput.js';\r\n\r\nclass ServicesList extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData.procedures;\r\n    if (data !== '') {\r\n      var serviceElements = [];\r\n      var serviceTypesElements = [];\r\n      var serviceElement;\r\n      var serviceTypeElement;\r\n\r\n      var servicesHeader = (\r\n        <thead>\r\n          <tr className=\"tableRow\">\r\n            <th>\r\n              Name{' '}\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>\r\n              Type{' '}\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>\r\n              Time amount{' '}\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n            <th>\r\n              Price{' '}\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n\r\n      var serviceTypesHeader = (\r\n        <thead>\r\n          <tr className=\"tableRow\">\r\n            <th>\r\n              Service type{' '}\r\n              <img\r\n                className=\"sortIcon\"\r\n                src=\"../../Images/sort.png\"\r\n                alt=\"sorting\"\r\n              />\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n\r\n      for (let j = 0; j < this.props.procedureTypesSelectList; j++) {\r\n        serviceTypeElement = '';\r\n        serviceTypeElement = (\r\n          <tr\r\n            key={this.props.procedureTypesSelectList.value}\r\n            id={this.props.procedureTypesSelectList.value}\r\n          >\r\n            <td>{data[i].procedureName}</td>\r\n          </tr>\r\n        );\r\n        serviceElements = serviceElements.concat(serviceElement);\r\n      }\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        serviceElement = '';\r\n        serviceElement = (\r\n          <tr\r\n            key={data[i].procedureId}\r\n            id={data[i].procedureId}\r\n            onClick={() => {\r\n              if (this.props.isEditing) {\r\n                this.props.onEdit();\r\n              }\r\n              this.props.setActiveId(data[i].procedureId);\r\n              this.props.getService(data[i].procedureId, this.props.activeMenu);\r\n              this.props.setUpdateModalState();\r\n            }}\r\n          >\r\n            <td>{data[i].procedureName}</td>\r\n            <td>{data[i].procedureType}</td>\r\n            <td>{data[i].timeAmount}</td>\r\n            <td>{data[i].procedurePrice}</td>\r\n          </tr>\r\n        );\r\n        serviceElements = serviceElements.concat(serviceElement);\r\n      }\r\n    }\r\n\r\n    if (data !== '') {\r\n      return (\r\n        <>\r\n          <div className=\"tableFunctionality\">\r\n            <p className=\"title\">Services</p>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.setCreateModalState();\r\n              }}\r\n            >\r\n              New service\r\n            </button>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.setServiceTypeCreateModalState();\r\n              }}\r\n            >\r\n              New service type\r\n            </button>\r\n            <RecordsPerPage />\r\n            <SearchInput />\r\n          </div>\r\n          <div className=\"dataTable\">\r\n            <table className=\"tableStyle\">\r\n              {servicesHeader}\r\n              <tbody>{serviceElements}</tbody>\r\n            </table>\r\n            <CreateServiceModal />\r\n            <UpdateServiceModal />\r\n          </div>\r\n          <PageButtons />\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <p>There is no Data in DB...</p>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pagedTablesData: state.pagedTablesData,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n    isEditing: state.isEditing,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onEdit: () => dispatch(actions.SetEditModalState()),\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getService: (id, activeMenu) =>\r\n      dispatch(actions.FetchActiveRecordData(id, activeMenu)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ServicesList);\r\n"]},"metadata":{},"sourceType":"module"}
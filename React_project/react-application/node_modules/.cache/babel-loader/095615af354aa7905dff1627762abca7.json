{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isImageLoaded_1 = require(\"./isImageLoaded\");\n\nvar noOp_1 = require(\"./noOp\");\n/**\n * Creates a DOM image object and set its onload and onerror properties.\n * If the image was already cached, onload is set immediatly.\n * @param  src     the source of the image, You may leave it blank if you want to set it later\n * @param  onLoad  callback to call when the image loads (or has loaded). Receives the image object as a parameter\n * @param  onError callback to call when the image has an error. Receives the image object as a parameter.\n *                 Optional, but note that `onload` will never be called if an error occurs\n * @return         the image object\n */\n\n\nexports.createHTMLImageElement = function (src, onLoad, onError) {\n  var img = new Image();\n  var called = false;\n  img.alt = '';\n\n  var callback = function () {\n    if (!called) {\n      called = true;\n      img.onload = noOp_1.noOp;\n      img.onerror = noOp_1.noOp;\n      return true;\n    }\n\n    ;\n    return false;\n  };\n\n  var onLoadWrapped = function () {\n    return callback() && onLoad && onLoad(img);\n  };\n\n  var onErrorWrapped = function (err) {\n    return callback() && onError && onError(img, err);\n  };\n\n  img.onload = onLoadWrapped;\n  img.onerror = onErrorWrapped;\n\n  if (src) {\n    img.src = src;\n  }\n\n  ;\n\n  if (isImageLoaded_1.isImageLoaded(img)) {\n    setTimeout(onLoadWrapped);\n  }\n\n  ;\n  return img;\n};\n\nexports.default = exports.createHTMLImageElement;","map":{"version":3,"sources":["C:\\Users\\aries\\Desktop\\React project\\react-application\\node_modules\\react-image-file\\src\\createHTMLImageElement.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAgBA;;;;;;;;AAQG;;;AACU,OAAA,CAAA,sBAAA,GACX,UAAE,GAAF,EAAe,MAAf,EAA4C,OAA5C,EAAsE;AACpE,MAAM,GAAG,GAAG,IAAI,KAAJ,EAAZ;AACA,MAAI,MAAM,GAAG,KAAb;AACA,EAAA,GAAG,CAAC,GAAJ,GAAU,EAAV;;AACA,MAAM,QAAQ,GAAG,YAAA;AACf,QAAG,CAAC,MAAJ,EACA;AAAE,MAAA,MAAM,GAAG,IAAT;AACA,MAAA,GAAG,CAAC,MAAJ,GAAa,MAAA,CAAA,IAAb;AACA,MAAA,GAAG,CAAC,OAAJ,GAAc,MAAA,CAAA,IAAd;AACA,aAAO,IAAP;AACD;;AACH;AAAE,WAAO,KAAP;AACD,GARD;;AASA,MAAM,aAAa,GAAG,YAAA;AAAM,WAAA,QAAQ,MAAM,MAAd,IAAwB,MAAM,CAA9B,GAA8B,CAA9B;AAAmC,GAA/D;;AACA,MAAM,cAAc,GAAG,UAAE,GAAF,EAAiB;AAAM,WAAA,QAAQ,MAAM,OAAd,IAAyB,OAAO,CAAE,GAAF,EAAhC,GAAgC,CAAhC;AAA4C,GAA1F;;AACA,EAAA,GAAG,CAAC,MAAJ,GAAa,aAAb;AACA,EAAA,GAAG,CAAC,OAAJ,GAAc,cAAd;;AACA,MAAG,GAAH,EACA;AAAE,IAAA,GAAG,CAAC,GAAJ,GAAU,GAAV;AACD;;AACH;;AAAE,MAAI,eAAA,CAAA,aAAA,CAAe,GAAf,CAAJ,EACA;AAAE,IAAA,UAAU,CAAE,aAAF,CAAV;AACD;;AACH;AAAE,SAAO,GAAP;AACD,CAzBU;;AA2Bb,OAAA,CAAA,OAAA,GAAe,OAAA,CAAA,sBAAf","sourcesContent":["import { isImageLoaded } from './isImageLoaded'\nimport { noOp } from './noOp'\n\n/** \n * callback used when the image loads successfully\n */\nexport interface OnImageLoadSuccess\n  { ( img:HTMLImageElement ):void\n  }\n\n/** \n * callback used when the image loading process produces an error\n */\nexport interface OnImageLoadError\n  { ( img:HTMLImageElement, err:ErrorEvent ):void\n  }\n\n/**\n * Creates a DOM image object and set its onload and onerror properties.\n * If the image was already cached, onload is set immediatly.\n * @param  src     the source of the image, You may leave it blank if you want to set it later\n * @param  onLoad  callback to call when the image loads (or has loaded). Receives the image object as a parameter\n * @param  onError callback to call when the image has an error. Receives the image object as a parameter.\n *                 Optional, but note that `onload` will never be called if an error occurs\n * @return         the image object\n */\nexport const createHTMLImageElement = \n  ( src: string, onLoad?: OnImageLoadSuccess, onError?: OnImageLoadError ):HTMLImageElement =>\n  { const img = new Image()\n  ; let called = false\n  ; img.alt = ''\n  ; const callback = () => \n    { if(!called)\n      { called = true\n      ; img.onload = noOp\n      ; img.onerror = noOp\n      ; return true\n      }\n    ; return false\n    }\n  ; const onLoadWrapped = () => callback() && onLoad && onLoad(img)\n  ; const onErrorWrapped = ( err: ErrorEvent ) => callback() && onError && onError( img, err )\n  ; img.onload = onLoadWrapped\n  ; img.onerror = onErrorWrapped\n  ; if(src)\n    { img.src = src\n    }\n  ; if( isImageLoaded( img ) )\n    { setTimeout( onLoadWrapped )\n    }\n  ; return img\n  }\n\nexport default createHTMLImageElement"]},"metadata":{},"sourceType":"script"}
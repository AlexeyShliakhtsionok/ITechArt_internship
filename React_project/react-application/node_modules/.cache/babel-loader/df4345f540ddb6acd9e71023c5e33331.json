{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\Services.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateServiceModal from '../ModalWindowsComponents/CreateServiceModal.js';\nimport UpdateServiceModal from '../ModalWindowsComponents/UpdateServiceModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ServicesList extends React.PureComponent {\n  render() {\n    if (this.props.responseDataList.procedures !== '') {\n      var elements = [];\n      var element;\n\n      var header = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Time amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this);\n\n      for (let i = 0; i < this.props.responseDataList.procedures.length; i++) {\n        element = '';\n        element = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: this.props.responseDataList.procedures[i].procedureId,\n          onClick: () => {\n            this.props.setActiveId(this.props.responseDataList.procedures[i].procedureId);\n            this.props.getService(this.props.responseDataList.procedures[i].procedureId, console.log('ProcedureId: ', this.props.responseDataList.procedures[i].procedureId), this.props.activeMenu);\n            this.props.setUpdateModalState();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.procedures[i].procedureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.procedures[i].procedureType.procedureTypeName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.procedures[i].timeAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.procedures[i].procedurePrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, this.props.responseDataList.procedures[i].procedureId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this);\n        elements = elements.concat(element);\n      }\n    }\n\n    if (this.props.responseDataList !== '') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.setCreateModalState();\n          },\n          children: \"New service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"tableStyle\",\n            children: [header, /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: elements\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateServiceModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(UpdateServiceModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There is no Data in DB...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    responseDataList: state.responseDataList,\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getService: (id, activeMenu) => dispatch(actions.FetchSingleData(id, activeMenu))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServicesList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/Services.js"],"names":["React","connect","actions","CreateServiceModal","UpdateServiceModal","ServicesList","PureComponent","render","props","responseDataList","procedures","elements","element","header","i","length","procedureId","setActiveId","getService","console","log","activeMenu","setUpdateModalState","procedureName","procedureType","procedureTypeName","timeAmount","procedurePrice","concat","setCreateModalState","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","FetchSingleData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateServiceModal from '../ModalWindowsComponents/CreateServiceModal.js';\r\nimport UpdateServiceModal from '../ModalWindowsComponents/UpdateServiceModal';\r\n\r\nclass ServicesList extends React.PureComponent {\r\n  render() {\r\n    if (this.props.responseDataList.procedures !== '') {\r\n      var elements = [];\r\n      var element;\r\n      var header = (\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Type</th>\r\n            <th>Time amount</th>\r\n            <th>Price</th>\r\n          </tr>\r\n        </thead>\r\n      );\r\n\r\n      for (let i = 0; i < this.props.responseDataList.procedures.length; i++) {\r\n        element = '';\r\n        element = (\r\n          <tr\r\n            key={this.props.responseDataList.procedures[i].procedureId}\r\n            id={this.props.responseDataList.procedures[i].procedureId}\r\n            onClick={() => {\r\n              this.props.setActiveId(\r\n                this.props.responseDataList.procedures[i].procedureId,\r\n              );\r\n              this.props.getService(\r\n                this.props.responseDataList.procedures[i].procedureId,\r\n                console.log(\r\n                  'ProcedureId: ',\r\n                  this.props.responseDataList.procedures[i].procedureId,\r\n                ),\r\n                this.props.activeMenu,\r\n              );\r\n              this.props.setUpdateModalState();\r\n            }}\r\n          >\r\n            <td>{this.props.responseDataList.procedures[i].procedureName}</td>\r\n            <td>\r\n              {\r\n                this.props.responseDataList.procedures[i].procedureType\r\n                  .procedureTypeName\r\n              }\r\n            </td>\r\n            <td>{this.props.responseDataList.procedures[i].timeAmount}</td>\r\n            <td>{this.props.responseDataList.procedures[i].procedurePrice}</td>\r\n          </tr>\r\n        );\r\n        elements = elements.concat(element);\r\n      }\r\n    }\r\n\r\n    if (this.props.responseDataList !== '') {\r\n      return (\r\n        <>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.setCreateModalState();\r\n            }}\r\n          >\r\n            New service\r\n          </button>\r\n          <div className=\"dataTable\">\r\n            <table className=\"tableStyle\">\r\n              {header}\r\n              <tbody>{elements}</tbody>\r\n            </table>\r\n            <CreateServiceModal />\r\n            <UpdateServiceModal />\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <p>There is no Data in DB...</p>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    responseDataList: state.responseDataList,\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getService: (id, activeMenu) =>\r\n      dispatch(actions.FetchSingleData(id, activeMenu)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ServicesList);\r\n"]},"metadata":{},"sourceType":"module"}
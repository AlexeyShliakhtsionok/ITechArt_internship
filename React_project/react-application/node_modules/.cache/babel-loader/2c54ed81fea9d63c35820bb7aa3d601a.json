{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\CreateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { DateFormat } from '../../Functions/DateFormat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateOrderModal extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption\n      });\n    };\n  }\n\n  render() {\n    const {\n      selectedOption\n    } = this.props.orderTime;\n    var orderInfoArea;\n    var actionButtons;\n    var minDate = DateFormat(Date());\n    var orderToCreate = {\n      dateOfService: this.props.activeDate,\n      client: this.props.activeClient,\n      procedure: this.props.activeProcedure,\n      employee: this.props.activeEmployee\n    }; // Lists for the Select-dropdown\n\n    var clientList = [];\n    this.props.responseDataList.clients.forEach(element => {\n      clientList.push({\n        value: element.clientId,\n        label: element.firstName + ' ' + element.lastName\n      });\n    });\n    var procedureTypesList = [];\n    this.props.responseDataList.procedureTypes.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var procedureList = [];\n\n    if (this.props.procedures !== '') {\n      this.props.procedures.forEach(element => {\n        procedureList.push({\n          value: element.procedureId,\n          label: element.procedureName\n        });\n      });\n    }\n\n    var employeeList = [];\n\n    if (this.props.employees !== '') {\n      this.props.employees.forEach(element => {\n        employeeList.push({\n          value: element.employeeId,\n          label: element.firstName + ' ' + element.lastName\n        });\n      });\n    }\n\n    var scheduleTimesList = [];\n\n    if (this.props.schedule !== '') {\n      this.props.schedule.forEach(time => {\n        scheduleTimesList.push({\n          value: time,\n          label: time.substr(11)\n        });\n      });\n    } // Buttons and main area of modal menu\n\n\n    actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmUserInfo\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            console.log(orderToCreate);\n            this.props.setCreateModalState(); // close the modal\n\n            this.props.onCreate(this.props.activeMenu, orderToCreate);\n          },\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n    orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileText\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Date of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            min: minDate,\n            type: \"date\",\n            placeholder: \"Date...\",\n            onChange: e => {\n              this.props.setOrdersDate(e.target.value);\n              this.props.resetSelected();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"ClientName:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            maxMenuHeight: 100,\n            options: clientList,\n            onChange: data => {\n              this.props.responseDataList.clients.forEach(client => {\n                if (client.clientId === data.value) {\n                  this.props.setOrdersClient(client);\n                }\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            ref: ref => {\n              this.selectRef = ref;\n            },\n            maxMenuHeight: 100,\n            options: procedureTypesList,\n            onChange: data => {\n              this.props.getProcedures(data.value);\n              this.props.getEmployees(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            ref: ref => {\n              this.selectRef = ref;\n            },\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.procedures.forEach(procedure => {\n                if (procedure.procedureId === data.value) {\n                  orderToCreate.procedure = procedure;\n                  this.props.setOrdersProcedure(procedure);\n                }\n              });\n            },\n            options: procedureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Employee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedOption,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.employees.forEach(employee => {\n                if (employee.employeeId === data.value) {\n                  this.props.setOrdersEmployee(employee);\n                }\n\n                this.props.getSchedule(data.value, this.props.activeDate, this.props.activeProcedure.procedureId, this.props.openTime, this.props.closeTime);\n              });\n            },\n            options: employeeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Time of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            ref: ref => {\n              this.selectRef = ref;\n            },\n            hideSelectedOptions: true,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setOrdersDate(data.value);\n            },\n            options: scheduleTimesList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          maxWidth: 'fit-content',\n          background: '#6c3636',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          border: '6px solid #f7f6f6',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.createModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setCreateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: orderInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.clearValue,\n          children: \"clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    // Modal window open/close states\n    createModalOpen: state.createModalOpen,\n    // Get all data\n    responseDataList: state.responseDataList,\n    activeMenu: state.activeMenu,\n    // Get single data (unneccessary here???)\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    // For order creation\n    client: state.client,\n    orderTime: state.orderTime,\n    //-----All procedures of certain procedure type\n    procedures: state.procedures,\n    //-----All employees of certain procedure type\n    employees: state.employees,\n    // Flag for enabling some of inputs\n    procedureInputStatus: state.procedureInputStatus,\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\n    schedule: state.schedule,\n    // active orders objects\n    activeProcedure: state.activeProcedure,\n    activeDate: state.activeDate,\n    activeClient: state.activeClient,\n    activeEmployee: state.activeEmployee\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\n    getProcedures: typeId => dispatch(actions.GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(actions.GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setOrdersDate: date => dispatch(actions.SetActiveDate(date)),\n    setOrdersProcedure: data => dispatch(actions.SetActiveProcedure(data)),\n    setOrdersClient: data => dispatch(actions.SetActiveClient(data)),\n    setOrdersEmployee: data => dispatch(actions.SetActiveEmployee(data)),\n    resetSelected: () => dispatch(actions.ResetSelectedValues())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/CreateOrderModal.js"],"names":["React","connect","Modal","actions","Select","DateFormat","CreateOrderModal","PureComponent","handleChange","selectedOption","setState","render","props","orderTime","orderInfoArea","actionButtons","minDate","Date","orderToCreate","dateOfService","activeDate","client","activeClient","procedure","activeProcedure","employee","activeEmployee","clientList","responseDataList","clients","forEach","element","push","value","clientId","label","firstName","lastName","procedureTypesList","procedureTypes","text","procedureList","procedures","procedureId","procedureName","employeeList","employees","employeeId","scheduleTimesList","schedule","time","substr","console","log","setCreateModalState","onCreate","activeMenu","e","setOrdersDate","target","resetSelected","data","setOrdersClient","ref","selectRef","getProcedures","getEmployees","procedureInputStatus","setOrdersProcedure","setOrdersEmployee","getSchedule","openTime","closeTime","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","createModalOpen","clearValue","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetCreateModalState","AddData","typeId","GetProceduresByType","GetEmployeesByProcedureType","open","close","GetAvaliableTimes","date","SetActiveDate","SetActiveProcedure","SetActiveClient","SetActiveEmployee","ResetSelectedValues"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\nimport { DateFormat } from '../../Functions/DateFormat.js';\r\n\r\nclass CreateOrderModal extends React.PureComponent {\r\n  handleChange = (selectedOption) => {\r\n    this.setState({ selectedOption });\r\n  };\r\n\r\n  render() {\r\n    const { selectedOption } = this.props.orderTime;\r\n\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var minDate = DateFormat(Date());\r\n    var orderToCreate = {\r\n      dateOfService: this.props.activeDate,\r\n      client: this.props.activeClient,\r\n      procedure: this.props.activeProcedure,\r\n      employee: this.props.activeEmployee,\r\n    };\r\n\r\n    // Lists for the Select-dropdown\r\n    var clientList = [];\r\n    this.props.responseDataList.clients.forEach((element) => {\r\n      clientList.push({\r\n        value: element.clientId,\r\n        label: element.firstName + ' ' + element.lastName,\r\n      });\r\n    });\r\n\r\n    var procedureTypesList = [];\r\n    this.props.responseDataList.procedureTypes.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var procedureList = [];\r\n    if (this.props.procedures !== '') {\r\n      this.props.procedures.forEach((element) => {\r\n        procedureList.push({\r\n          value: element.procedureId,\r\n          label: element.procedureName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var employeeList = [];\r\n    if (this.props.employees !== '') {\r\n      this.props.employees.forEach((element) => {\r\n        employeeList.push({\r\n          value: element.employeeId,\r\n          label: element.firstName + ' ' + element.lastName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var scheduleTimesList = [];\r\n    if (this.props.schedule !== '') {\r\n      this.props.schedule.forEach((time) => {\r\n        scheduleTimesList.push({\r\n          value: time,\r\n          label: time.substr(11),\r\n        });\r\n      });\r\n    }\r\n\r\n    // Buttons and main area of modal menu\r\n    actionButtons = (\r\n      <div className=\"confirmUserInfo\">\r\n        <div>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              console.log(orderToCreate);\r\n              this.props.setCreateModalState(); // close the modal\r\n              this.props.onCreate(this.props.activeMenu, orderToCreate);\r\n            }}\r\n          >\r\n            Create\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    orderInfoArea = (\r\n      <div className=\"profileText\">\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Date of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <input\r\n              min={minDate}\r\n              type=\"date\"\r\n              placeholder=\"Date...\"\r\n              onChange={(e) => {\r\n                this.props.setOrdersDate(e.target.value);\r\n                this.props.resetSelected();\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>ClientName:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              maxMenuHeight={100}\r\n              options={clientList}\r\n              onChange={(data) => {\r\n                this.props.responseDataList.clients.forEach((client) => {\r\n                  if (client.clientId === data.value) {\r\n                    this.props.setOrdersClient(client);\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure type:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              ref={(ref) => {\r\n                this.selectRef = ref;\r\n              }}\r\n              maxMenuHeight={100}\r\n              options={procedureTypesList}\r\n              onChange={(data) => {\r\n                this.props.getProcedures(data.value);\r\n                this.props.getEmployees(data.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              ref={(ref) => {\r\n                this.selectRef = ref;\r\n              }}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.procedures.forEach((procedure) => {\r\n                  if (procedure.procedureId === data.value) {\r\n                    orderToCreate.procedure = procedure;\r\n                    this.props.setOrdersProcedure(procedure);\r\n                  }\r\n                });\r\n              }}\r\n              options={procedureList}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Employee:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              value={selectedOption}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.employees.forEach((employee) => {\r\n                  if (employee.employeeId === data.value) {\r\n                    this.props.setOrdersEmployee(employee);\r\n                  }\r\n                  this.props.getSchedule(\r\n                    data.value,\r\n                    this.props.activeDate,\r\n                    this.props.activeProcedure.procedureId,\r\n                    this.props.openTime,\r\n                    this.props.closeTime,\r\n                  );\r\n                });\r\n              }}\r\n              options={employeeList}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Time of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              ref={(ref) => {\r\n                this.selectRef = ref;\r\n              }}\r\n              hideSelectedOptions={true}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setOrdersDate(data.value);\r\n              }}\r\n              options={scheduleTimesList}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            maxWidth: 'fit-content',\r\n            background: '#6c3636',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            border: '6px solid #f7f6f6',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.createModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setCreateModalState}\r\n      >\r\n        <>\r\n          <div className=\"profileBody\">{orderInfoArea}</div>\r\n\r\n          <button onClick={this.clearValue}>clear</button>\r\n\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // Modal window open/close states\r\n    createModalOpen: state.createModalOpen,\r\n    // Get all data\r\n    responseDataList: state.responseDataList,\r\n    activeMenu: state.activeMenu,\r\n    // Get single data (unneccessary here???)\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n\r\n    // For order creation\r\n    client: state.client,\r\n    orderTime: state.orderTime,\r\n    //-----All procedures of certain procedure type\r\n    procedures: state.procedures,\r\n\r\n    //-----All employees of certain procedure type\r\n    employees: state.employees,\r\n\r\n    // Flag for enabling some of inputs\r\n    procedureInputStatus: state.procedureInputStatus,\r\n\r\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\r\n    schedule: state.schedule,\r\n\r\n    // active orders objects\r\n    activeProcedure: state.activeProcedure,\r\n    activeDate: state.activeDate,\r\n    activeClient: state.activeClient,\r\n    activeEmployee: state.activeEmployee,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\r\n    getProcedures: (typeId) => dispatch(actions.GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) =>\r\n      dispatch(actions.GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n    setOrdersDate: (date) => dispatch(actions.SetActiveDate(date)),\r\n    setOrdersProcedure: (data) => dispatch(actions.SetActiveProcedure(data)),\r\n    setOrdersClient: (data) => dispatch(actions.SetActiveClient(data)),\r\n    setOrdersEmployee: (data) => dispatch(actions.SetActiveEmployee(data)),\r\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
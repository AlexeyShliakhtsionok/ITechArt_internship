{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\CreateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { DateFormat } from '../../Functions/DateFormat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateOrderModal extends React.PureComponent {\n  render() {\n    function resetSelected() {\n      var input = document.getElementById('resettable');\n      input.value = 'olololololo';\n    }\n\n    var orderInfoArea;\n    var actionButtons;\n    var minDate = DateFormat(Date());\n    var orderToCreate = {\n      dateOfService: this.props.activeDate,\n      client: this.props.activeClient,\n      procedure: this.props.activeProcedure,\n      employee: this.props.activeEmployee\n    }; // Lists for the Select-dropdown\n\n    var clientList = [];\n    this.props.responseDataList.clients.forEach(element => {\n      clientList.push({\n        value: element.clientId,\n        label: element.firstName + ' ' + element.lastName\n      });\n    });\n    var procedureTypesList = [];\n    this.props.responseDataList.procedureTypes.forEach(element => {\n      procedureTypesList.push({\n        value: element.value,\n        label: element.text\n      });\n    });\n    var procedureList = [];\n\n    if (this.props.procedures !== '') {\n      this.props.procedures.forEach(element => {\n        procedureList.push({\n          value: element.procedureId,\n          label: element.procedureName\n        });\n      });\n    }\n\n    var employeeList = [];\n\n    if (this.props.employees !== '') {\n      this.props.employees.forEach(element => {\n        employeeList.push({\n          value: element.employeeId,\n          label: element.firstName + ' ' + element.lastName\n        });\n      });\n    }\n\n    var scheduleTimesList = [];\n\n    if (this.props.schedule !== '') {\n      this.props.schedule.forEach(time => {\n        scheduleTimesList.push({\n          value: time,\n          label: time.substr(11)\n        });\n      });\n    } // Buttons and main area of modal menu\n\n\n    actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmUserInfo\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            console.log(orderToCreate);\n            this.props.setCreateModalState(); // close the modal\n\n            this.props.onCreate(this.props.activeMenu, orderToCreate);\n          },\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n    orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileText\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Date of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            min: minDate,\n            type: \"date\",\n            placeholder: \"Date...\",\n            onChange: e => {\n              this.props.setOrdersDate(e.target.value);\n              this.props.resetSelected();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"ClientName:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            maxMenuHeight: 100,\n            options: clientList,\n            onChange: data => {\n              this.props.responseDataList.clients.forEach(client => {\n                if (client.clientId === data.value) {\n                  this.props.setOrdersClient(client);\n                }\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            inputId: \"resettable\",\n            maxMenuHeight: 100,\n            options: procedureTypesList,\n            onChange: data => {\n              this.props.getProcedures(data.value);\n              this.props.getEmployees(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Procedure:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            inputId: \"resettable\",\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.procedures.forEach(procedure => {\n                if (procedure.procedureId === data.value) {\n                  orderToCreate.procedure = procedure;\n                  this.props.setOrdersProcedure(procedure);\n                }\n              });\n            },\n            options: procedureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Employee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            inputId: \"resettable\",\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.employees.forEach(employee => {\n                if (employee.employeeId === data.value) {\n                  this.props.setOrdersEmployee(employee);\n                }\n\n                this.props.getSchedule(data.value, this.props.activeDate, this.props.activeProcedure.procedureId, this.props.openTime, this.props.closeTime);\n              });\n            },\n            options: employeeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileTextItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-left\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Time of service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem-right\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            inputId: \"resettable\",\n            hideSelectedOptions: true,\n            defaultValue: this.props.defaultSelectValue,\n            isDisabled: this.props.procedureInputStatus,\n            maxMenuHeight: 100,\n            onChange: data => {\n              this.props.setOrdersDate(data.value);\n            },\n            options: scheduleTimesList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      styles: {\n        modal: {\n          maxWidth: 'fit-content',\n          background: '#6c3636',\n          padding: '40px',\n          fontFamily: 'Play',\n          alignItems: 'center',\n          textAlign: 'center',\n          border: '6px solid #f7f6f6',\n          borderRadius: '10px'\n        }\n      },\n      open: this.props.createModalOpen,\n      center: true,\n      showCloseIcon: false,\n      onOverlayClick: this.props.setCreateModalState,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileBody\",\n          children: orderInfoArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), actionButtons]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    // Modal window open/close states\n    createModalOpen: state.createModalOpen,\n    // Get all data\n    responseDataList: state.responseDataList,\n    activeMenu: state.activeMenu,\n    // Get single data (unneccessary here???)\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    // For order creation\n    resetSelectedTrigger: state.resetSelectedTrigger,\n    defaultSelectValue: state.defaultSelectValue,\n    //-----All procedures of certain procedure type\n    procedures: state.procedures,\n    //-----All employees of certain procedure type\n    employees: state.employees,\n    // Flag for enabling some of inputs\n    procedureInputStatus: state.procedureInputStatus,\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\n    schedule: state.schedule,\n    // active orders objects\n    activeProcedure: state.activeProcedure,\n    activeDate: state.activeDate,\n    activeClient: state.activeClient,\n    activeEmployee: state.activeEmployee\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\n    getProcedures: typeId => dispatch(actions.GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(actions.GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setOrdersDate: date => dispatch(actions.SetActiveDate(date)),\n    setOrdersProcedure: data => dispatch(actions.SetActiveProcedure(data)),\n    setOrdersClient: data => dispatch(actions.SetActiveClient(data)),\n    setOrdersEmployee: data => dispatch(actions.SetActiveEmployee(data)),\n    resetSelected: () => dispatch(actions.ResetSelectedValues())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/CreateOrderModal.js"],"names":["React","connect","Modal","actions","Select","DateFormat","CreateOrderModal","PureComponent","render","resetSelected","input","document","getElementById","value","orderInfoArea","actionButtons","minDate","Date","orderToCreate","dateOfService","props","activeDate","client","activeClient","procedure","activeProcedure","employee","activeEmployee","clientList","responseDataList","clients","forEach","element","push","clientId","label","firstName","lastName","procedureTypesList","procedureTypes","text","procedureList","procedures","procedureId","procedureName","employeeList","employees","employeeId","scheduleTimesList","schedule","time","substr","console","log","setCreateModalState","onCreate","activeMenu","e","setOrdersDate","target","data","setOrdersClient","getProcedures","getEmployees","setOrdersProcedure","setOrdersEmployee","getSchedule","openTime","closeTime","defaultSelectValue","procedureInputStatus","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","createModalOpen","mapStateToProps","state","singleResponseData","activeId","resetSelectedTrigger","mapDispatchToProps","dispatch","SetCreateModalState","AddData","typeId","GetProceduresByType","GetEmployeesByProcedureType","open","close","GetAvaliableTimes","date","SetActiveDate","SetActiveProcedure","SetActiveClient","SetActiveEmployee","ResetSelectedValues"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\nimport { DateFormat } from '../../Functions/DateFormat.js';\r\n\r\nclass CreateOrderModal extends React.PureComponent {\r\n  render() {\r\n    function resetSelected() {\r\n      var input = document.getElementById('resettable');\r\n      input.value = 'olololololo';\r\n    }\r\n\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var minDate = DateFormat(Date());\r\n    var orderToCreate = {\r\n      dateOfService: this.props.activeDate,\r\n      client: this.props.activeClient,\r\n      procedure: this.props.activeProcedure,\r\n      employee: this.props.activeEmployee,\r\n    };\r\n\r\n    // Lists for the Select-dropdown\r\n    var clientList = [];\r\n    this.props.responseDataList.clients.forEach((element) => {\r\n      clientList.push({\r\n        value: element.clientId,\r\n        label: element.firstName + ' ' + element.lastName,\r\n      });\r\n    });\r\n\r\n    var procedureTypesList = [];\r\n    this.props.responseDataList.procedureTypes.forEach((element) => {\r\n      procedureTypesList.push({\r\n        value: element.value,\r\n        label: element.text,\r\n      });\r\n    });\r\n\r\n    var procedureList = [];\r\n    if (this.props.procedures !== '') {\r\n      this.props.procedures.forEach((element) => {\r\n        procedureList.push({\r\n          value: element.procedureId,\r\n          label: element.procedureName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var employeeList = [];\r\n    if (this.props.employees !== '') {\r\n      this.props.employees.forEach((element) => {\r\n        employeeList.push({\r\n          value: element.employeeId,\r\n          label: element.firstName + ' ' + element.lastName,\r\n        });\r\n      });\r\n    }\r\n\r\n    var scheduleTimesList = [];\r\n    if (this.props.schedule !== '') {\r\n      this.props.schedule.forEach((time) => {\r\n        scheduleTimesList.push({\r\n          value: time,\r\n          label: time.substr(11),\r\n        });\r\n      });\r\n    }\r\n\r\n    // Buttons and main area of modal menu\r\n    actionButtons = (\r\n      <div className=\"confirmUserInfo\">\r\n        <div>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              console.log(orderToCreate);\r\n              this.props.setCreateModalState(); // close the modal\r\n              this.props.onCreate(this.props.activeMenu, orderToCreate);\r\n            }}\r\n          >\r\n            Create\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    orderInfoArea = (\r\n      <div className=\"profileText\">\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Date of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <input\r\n              min={minDate}\r\n              type=\"date\"\r\n              placeholder=\"Date...\"\r\n              onChange={(e) => {\r\n                this.props.setOrdersDate(e.target.value);\r\n                this.props.resetSelected();\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>ClientName:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              maxMenuHeight={100}\r\n              options={clientList}\r\n              onChange={(data) => {\r\n                this.props.responseDataList.clients.forEach((client) => {\r\n                  if (client.clientId === data.value) {\r\n                    this.props.setOrdersClient(client);\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure type:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              inputId=\"resettable\"\r\n              maxMenuHeight={100}\r\n              options={procedureTypesList}\r\n              onChange={(data) => {\r\n                this.props.getProcedures(data.value);\r\n                this.props.getEmployees(data.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Procedure:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              inputId=\"resettable\"\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.procedures.forEach((procedure) => {\r\n                  if (procedure.procedureId === data.value) {\r\n                    orderToCreate.procedure = procedure;\r\n                    this.props.setOrdersProcedure(procedure);\r\n                  }\r\n                });\r\n              }}\r\n              options={procedureList}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Employee:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              inputId=\"resettable\"\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.employees.forEach((employee) => {\r\n                  if (employee.employeeId === data.value) {\r\n                    this.props.setOrdersEmployee(employee);\r\n                  }\r\n                  this.props.getSchedule(\r\n                    data.value,\r\n                    this.props.activeDate,\r\n                    this.props.activeProcedure.procedureId,\r\n                    this.props.openTime,\r\n                    this.props.closeTime,\r\n                  );\r\n                });\r\n              }}\r\n              options={employeeList}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profileTextItem\">\r\n          <div className=\"profileTextItem-left\">\r\n            <p>Time of service:</p>\r\n          </div>\r\n          <div className=\"profileTextItem-right\">\r\n            <Select\r\n              inputId=\"resettable\"\r\n              hideSelectedOptions={true}\r\n              defaultValue={this.props.defaultSelectValue}\r\n              isDisabled={this.props.procedureInputStatus}\r\n              maxMenuHeight={100}\r\n              onChange={(data) => {\r\n                this.props.setOrdersDate(data.value);\r\n              }}\r\n              options={scheduleTimesList}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <Modal\r\n        styles={{\r\n          modal: {\r\n            maxWidth: 'fit-content',\r\n            background: '#6c3636',\r\n            padding: '40px',\r\n            fontFamily: 'Play',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            border: '6px solid #f7f6f6',\r\n            borderRadius: '10px',\r\n          },\r\n        }}\r\n        open={this.props.createModalOpen}\r\n        center={true}\r\n        showCloseIcon={false}\r\n        onOverlayClick={this.props.setCreateModalState}\r\n      >\r\n        <>\r\n          <div className=\"profileBody\">{orderInfoArea}</div>\r\n          {actionButtons}\r\n        </>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // Modal window open/close states\r\n    createModalOpen: state.createModalOpen,\r\n    // Get all data\r\n    responseDataList: state.responseDataList,\r\n    activeMenu: state.activeMenu,\r\n    // Get single data (unneccessary here???)\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n\r\n    // For order creation\r\n    resetSelectedTrigger: state.resetSelectedTrigger,\r\n    defaultSelectValue: state.defaultSelectValue,\r\n    //-----All procedures of certain procedure type\r\n    procedures: state.procedures,\r\n\r\n    //-----All employees of certain procedure type\r\n    employees: state.employees,\r\n\r\n    // Flag for enabling some of inputs\r\n    procedureInputStatus: state.procedureInputStatus,\r\n\r\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\r\n    schedule: state.schedule,\r\n\r\n    // active orders objects\r\n    activeProcedure: state.activeProcedure,\r\n    activeDate: state.activeDate,\r\n    activeClient: state.activeClient,\r\n    activeEmployee: state.activeEmployee,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\r\n    getProcedures: (typeId) => dispatch(actions.GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) =>\r\n      dispatch(actions.GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n    setOrdersDate: (date) => dispatch(actions.SetActiveDate(date)),\r\n    setOrdersProcedure: (data) => dispatch(actions.SetActiveProcedure(data)),\r\n    setOrdersClient: (data) => dispatch(actions.SetActiveClient(data)),\r\n    setOrdersEmployee: (data) => dispatch(actions.SetActiveEmployee(data)),\r\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
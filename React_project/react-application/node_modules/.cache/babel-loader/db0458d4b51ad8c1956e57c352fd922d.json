{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\ModalWindowsComponents\\\\CreateOrderModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport Select from 'react-select';\nimport { DateFormat } from '../../Functions/DateFormat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateOrderModal extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n    var orderInfoArea;\n    var actionButtons;\n    var minDate = DateFormat(Date());\n    var currentDate = new Date();\n    var maxDate = DateFormat(new Date(currentDate.setDate(currentDate.getDate() + 30)));\n    var orderToCreate = {\n      dateOfService: this.props.activeTime,\n      client: this.props.activeClient,\n      procedure: this.props.activeProcedure,\n      employee: this.props.activeEmployee\n    };\n    var clientList = [];\n    var procedureTypesList = [];\n    var procedureList = [];\n    var employeeList = [];\n\n    if (data.clientsSelectList !== '') {\n      //   data.clientsSelectList.forEach((element) => {\n      //     clientList.push({\n      //       value: element.value,\n      //       label: element.text,\n      //     });\n      //   });\n      //   data.procedureTypesSelectList.forEach((element) => {\n      //     procedureTypesList.push({\n      //       value: element.value,\n      //       label: element.text,\n      //     });\n      //   });\n      //   data.proceduresSelectList.forEach((element) => {\n      //     procedureList.push({\n      //       value: element.value,\n      //       label: element.text,\n      //     });\n      //   });\n      //   this.props.employees.forEach((element) => {\n      //     employeeList.push({\n      //       value: element.value,\n      //       label: element.text,\n      //     });\n      //   });\n      // }\n      var scheduleTimesList = [];\n\n      if (this.props.schedule !== '') {\n        this.props.schedule.forEach(time => {\n          scheduleTimesList.push({\n            value: time,\n            label: time.substr(11)\n          });\n        });\n      } // Buttons and main area of modal menu\n\n\n      actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmUserInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButton\",\n            onClick: () => {\n              this.props.setCreateModalState();\n              this.props.onCreate(this.props.activeMenu, orderToCreate);\n            },\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this);\n      orderInfoArea = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileText\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Date of service:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              min: minDate,\n              max: maxDate,\n              placeholder: \"Date...\",\n              onChange: e => {\n                this.props.setOrdersDate(e.target.value);\n                this.props.resetSelected();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"ClientName:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              maxMenuHeight: 100,\n              options: clientList,\n              onChange: data => {\n                // orderToCreate.client = data.value;\n                this.props.responseDataList.clients.forEach(client => {\n                  if (client.clientId === data.value) {\n                    this.props.setOrdersClient(client);\n                  }\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Procedure type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.procedureType,\n              maxMenuHeight: 100,\n              options: procedureTypesList,\n              onChange: data => {\n                this.props.setSelectedValue('orderProcedureType');\n                this.props.getProcedures(data.value);\n                this.props.getEmployees(data.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Procedure:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.procedure,\n              isDisabled: this.props.procedureInputStatus,\n              maxMenuHeight: 100,\n              onChange: data => {\n                this.props.setSelectedValue('orderProcedure');\n                this.props.procedures.forEach(procedure => {\n                  if (procedure.procedureId === data.value) {\n                    orderToCreate.procedure = procedure;\n                    this.props.setOrdersProcedure(procedure);\n                  }\n                });\n              },\n              options: procedureList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Employee:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.employee,\n              isDisabled: this.props.procedureInputStatus,\n              maxMenuHeight: 100,\n              onChange: data => {\n                this.props.setSelectedValue('orderEmployee');\n                this.props.employees.forEach(employee => {\n                  if (employee.employeeId === data.value) {\n                    this.props.setOrdersEmployee(employee);\n                  }\n\n                  this.props.getSchedule(data.value, this.props.activeDate, this.props.activeProcedure.procedureId, this.props.openTime, this.props.closeTime);\n                });\n              },\n              options: employeeList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profileTextItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-left\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Time of service:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileTextItem-right\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: this.props.orderTime,\n              hideSelectedOptions: true,\n              isDisabled: this.props.procedureInputStatus,\n              maxMenuHeight: 100,\n              onChange: data => {\n                this.props.setSelectedValue('orderTime');\n                this.props.setOrdersTime(data.value);\n              },\n              options: scheduleTimesList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this);\n      return /*#__PURE__*/_jsxDEV(Modal, {\n        styles: {\n          modal: {\n            maxWidth: 'fit-content',\n            background: '#6c3636',\n            padding: '40px',\n            fontFamily: 'Play',\n            alignItems: 'center',\n            textAlign: 'center',\n            border: '6px solid #f7f6f6',\n            borderRadius: '10px'\n          }\n        },\n        open: this.props.createModalOpen,\n        center: true,\n        showCloseIcon: false,\n        onOverlayClick: this.props.setCreateModalState,\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileBody\",\n            children: orderInfoArea\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), actionButtons]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    // Working time of salon\n    openTime: state.openTime,\n    closeTime: state.closeTime,\n    // Modal window open/close states\n    createModalOpen: state.createModalOpen,\n    // Get all data\n    responseDataList: state.responseDataList,\n    activeMenu: state.activeMenu,\n    // Get single data (unneccessary here???)\n    singleResponseData: state.singleResponseData,\n    activeId: state.activeId,\n    // For order creation\n    client: state.client,\n    orderTime: state.orderTime,\n    procedure: state.procedure,\n    procedureType: state.procedureType,\n    employee: state.employee,\n    //-----All procedures of certain procedure type\n    procedures: state.procedures,\n    //-----All employees of certain procedure type\n    employees: state.employees,\n    // Flag for enabling some of inputs\n    procedureInputStatus: state.procedureInputStatus,\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\n    schedule: state.schedule,\n    // active orders objects\n    activeProcedure: state.activeProcedure,\n    activeDate: state.activeDate,\n    activeTime: state.activeTime,\n    activeClient: state.activeClient,\n    activeEmployee: state.activeEmployee\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\n    getProcedures: typeId => dispatch(actions.GetProceduresByType(typeId)),\n    getEmployees: typeId => dispatch(actions.GetEmployeesByProcedureType(typeId)),\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) => dispatch(actions.GetAvaliableTimes(employeeId, dateOfService, procedureId, open, close)),\n    setOrdersDate: date => dispatch(actions.SetActiveDate(date)),\n    setOrdersTime: date => dispatch(actions.SetActiveTime(date)),\n    setOrdersProcedure: data => dispatch(actions.SetActiveProcedure(data)),\n    setOrdersClient: data => dispatch(actions.SetActiveClient(data)),\n    setOrdersEmployee: data => dispatch(actions.SetActiveEmployee(data)),\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\n    setSelectedValue: inputName => dispatch(actions.SetSelectedValue(inputName))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/ModalWindowsComponents/CreateOrderModal.js"],"names":["React","connect","Modal","actions","Select","DateFormat","CreateOrderModal","PureComponent","render","data","props","pagedTablesData","orderInfoArea","actionButtons","minDate","Date","currentDate","maxDate","setDate","getDate","orderToCreate","dateOfService","activeTime","client","activeClient","procedure","activeProcedure","employee","activeEmployee","clientList","procedureTypesList","procedureList","employeeList","clientsSelectList","scheduleTimesList","schedule","forEach","time","push","value","label","substr","setCreateModalState","onCreate","activeMenu","e","setOrdersDate","target","resetSelected","responseDataList","clients","clientId","setOrdersClient","procedureType","setSelectedValue","getProcedures","getEmployees","procedureInputStatus","procedures","procedureId","setOrdersProcedure","employees","employeeId","setOrdersEmployee","getSchedule","activeDate","openTime","closeTime","orderTime","setOrdersTime","modal","maxWidth","background","padding","fontFamily","alignItems","textAlign","border","borderRadius","createModalOpen","mapStateToProps","state","singleResponseData","activeId","mapDispatchToProps","dispatch","SetCreateModalState","AddData","typeId","GetProceduresByType","GetEmployeesByProcedureType","open","close","GetAvaliableTimes","date","SetActiveDate","SetActiveTime","SetActiveProcedure","SetActiveClient","SetActiveEmployee","ResetSelectedValues","inputName","SetSelectedValue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport Select from 'react-select';\r\nimport { DateFormat } from '../../Functions/DateFormat.js';\r\n\r\nclass CreateOrderModal extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    var orderInfoArea;\r\n    var actionButtons;\r\n    var minDate = DateFormat(Date());\r\n    var currentDate = new Date();\r\n    var maxDate = DateFormat(\r\n      new Date(currentDate.setDate(currentDate.getDate() + 30)),\r\n    );\r\n    var orderToCreate = {\r\n      dateOfService: this.props.activeTime,\r\n      client: this.props.activeClient,\r\n      procedure: this.props.activeProcedure,\r\n      employee: this.props.activeEmployee,\r\n    };\r\n\r\n    var clientList = [];\r\n    var procedureTypesList = [];\r\n    var procedureList = [];\r\n    var employeeList = [];\r\n\r\n    if (data.clientsSelectList !== '') {\r\n      //   data.clientsSelectList.forEach((element) => {\r\n      //     clientList.push({\r\n      //       value: element.value,\r\n      //       label: element.text,\r\n      //     });\r\n      //   });\r\n\r\n      //   data.procedureTypesSelectList.forEach((element) => {\r\n      //     procedureTypesList.push({\r\n      //       value: element.value,\r\n      //       label: element.text,\r\n      //     });\r\n      //   });\r\n\r\n      //   data.proceduresSelectList.forEach((element) => {\r\n      //     procedureList.push({\r\n      //       value: element.value,\r\n      //       label: element.text,\r\n      //     });\r\n      //   });\r\n\r\n      //   this.props.employees.forEach((element) => {\r\n      //     employeeList.push({\r\n      //       value: element.value,\r\n      //       label: element.text,\r\n      //     });\r\n      //   });\r\n      // }\r\n      var scheduleTimesList = [];\r\n      if (this.props.schedule !== '') {\r\n        this.props.schedule.forEach((time) => {\r\n          scheduleTimesList.push({\r\n            value: time,\r\n            label: time.substr(11),\r\n          });\r\n        });\r\n      }\r\n\r\n      // Buttons and main area of modal menu\r\n      actionButtons = (\r\n        <div className=\"confirmUserInfo\">\r\n          <div>\r\n            <button\r\n              className=\"modalButton\"\r\n              onClick={() => {\r\n                this.props.setCreateModalState();\r\n                this.props.onCreate(this.props.activeMenu, orderToCreate);\r\n              }}\r\n            >\r\n              Create\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      orderInfoArea = (\r\n        <div className=\"profileText\">\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Date of service:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <input\r\n                type=\"date\"\r\n                min={minDate}\r\n                max={maxDate}\r\n                placeholder=\"Date...\"\r\n                onChange={(e) => {\r\n                  this.props.setOrdersDate(e.target.value);\r\n                  this.props.resetSelected();\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>ClientName:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                maxMenuHeight={100}\r\n                options={clientList}\r\n                onChange={(data) => {\r\n                  // orderToCreate.client = data.value;\r\n                  this.props.responseDataList.clients.forEach((client) => {\r\n                    if (client.clientId === data.value) {\r\n                      this.props.setOrdersClient(client);\r\n                    }\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Procedure type:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.procedureType}\r\n                maxMenuHeight={100}\r\n                options={procedureTypesList}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderProcedureType');\r\n                  this.props.getProcedures(data.value);\r\n                  this.props.getEmployees(data.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Procedure:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.procedure}\r\n                isDisabled={this.props.procedureInputStatus}\r\n                maxMenuHeight={100}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderProcedure');\r\n                  this.props.procedures.forEach((procedure) => {\r\n                    if (procedure.procedureId === data.value) {\r\n                      orderToCreate.procedure = procedure;\r\n                      this.props.setOrdersProcedure(procedure);\r\n                    }\r\n                  });\r\n                }}\r\n                options={procedureList}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Employee:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.employee}\r\n                isDisabled={this.props.procedureInputStatus}\r\n                maxMenuHeight={100}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderEmployee');\r\n                  this.props.employees.forEach((employee) => {\r\n                    if (employee.employeeId === data.value) {\r\n                      this.props.setOrdersEmployee(employee);\r\n                    }\r\n                    this.props.getSchedule(\r\n                      data.value,\r\n                      this.props.activeDate,\r\n                      this.props.activeProcedure.procedureId,\r\n                      this.props.openTime,\r\n                      this.props.closeTime,\r\n                    );\r\n                  });\r\n                }}\r\n                options={employeeList}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profileTextItem\">\r\n            <div className=\"profileTextItem-left\">\r\n              <p>Time of service:</p>\r\n            </div>\r\n            <div className=\"profileTextItem-right\">\r\n              <Select\r\n                value={this.props.orderTime}\r\n                hideSelectedOptions={true}\r\n                isDisabled={this.props.procedureInputStatus}\r\n                maxMenuHeight={100}\r\n                onChange={(data) => {\r\n                  this.props.setSelectedValue('orderTime');\r\n                  this.props.setOrdersTime(data.value);\r\n                }}\r\n                options={scheduleTimesList}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      return (\r\n        <Modal\r\n          styles={{\r\n            modal: {\r\n              maxWidth: 'fit-content',\r\n              background: '#6c3636',\r\n              padding: '40px',\r\n              fontFamily: 'Play',\r\n              alignItems: 'center',\r\n              textAlign: 'center',\r\n              border: '6px solid #f7f6f6',\r\n              borderRadius: '10px',\r\n            },\r\n          }}\r\n          open={this.props.createModalOpen}\r\n          center={true}\r\n          showCloseIcon={false}\r\n          onOverlayClick={this.props.setCreateModalState}\r\n        >\r\n          <>\r\n            <div className=\"profileBody\">{orderInfoArea}</div>\r\n            {actionButtons}\r\n          </>\r\n        </Modal>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // Working time of salon\r\n    openTime: state.openTime,\r\n    closeTime: state.closeTime,\r\n    // Modal window open/close states\r\n    createModalOpen: state.createModalOpen,\r\n    // Get all data\r\n    responseDataList: state.responseDataList,\r\n    activeMenu: state.activeMenu,\r\n    // Get single data (unneccessary here???)\r\n    singleResponseData: state.singleResponseData,\r\n    activeId: state.activeId,\r\n\r\n    // For order creation\r\n    client: state.client,\r\n    orderTime: state.orderTime,\r\n    procedure: state.procedure,\r\n    procedureType: state.procedureType,\r\n    employee: state.employee,\r\n\r\n    //-----All procedures of certain procedure type\r\n    procedures: state.procedures,\r\n\r\n    //-----All employees of certain procedure type\r\n    employees: state.employees,\r\n\r\n    // Flag for enabling some of inputs\r\n    procedureInputStatus: state.procedureInputStatus,\r\n\r\n    // Time-schedule of employee for certain day with taking into account the time for the execution of procedures\r\n    schedule: state.schedule,\r\n\r\n    // active orders objects\r\n    activeProcedure: state.activeProcedure,\r\n    activeDate: state.activeDate,\r\n    activeTime: state.activeTime,\r\n    activeClient: state.activeClient,\r\n    activeEmployee: state.activeEmployee,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    onCreate: (activeMenu, data) => dispatch(actions.AddData(activeMenu, data)),\r\n    getProcedures: (typeId) => dispatch(actions.GetProceduresByType(typeId)),\r\n    getEmployees: (typeId) =>\r\n      dispatch(actions.GetEmployeesByProcedureType(typeId)),\r\n    getSchedule: (employeeId, dateOfService, procedureId, open, close) =>\r\n      dispatch(\r\n        actions.GetAvaliableTimes(\r\n          employeeId,\r\n          dateOfService,\r\n          procedureId,\r\n          open,\r\n          close,\r\n        ),\r\n      ),\r\n    setOrdersDate: (date) => dispatch(actions.SetActiveDate(date)),\r\n    setOrdersTime: (date) => dispatch(actions.SetActiveTime(date)),\r\n    setOrdersProcedure: (data) => dispatch(actions.SetActiveProcedure(data)),\r\n    setOrdersClient: (data) => dispatch(actions.SetActiveClient(data)),\r\n    setOrdersEmployee: (data) => dispatch(actions.SetActiveEmployee(data)),\r\n    resetSelected: () => dispatch(actions.ResetSelectedValues()),\r\n    setSelectedValue: (inputName) =>\r\n      dispatch(actions.SetSelectedValue(inputName)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateOrderModal);\r\n"]},"metadata":{},"sourceType":"module"}
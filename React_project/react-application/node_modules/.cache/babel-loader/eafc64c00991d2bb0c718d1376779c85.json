{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\EmployeesTable.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateEmployeeModal from '../ModalWindowsComponents/CreateEmployeeModal.js';\nimport UpdateEmployeeModal from '../ModalWindowsComponents/UpdateEmployeeModal.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass EmployeeList extends React.PureComponent {\n  render() {\n    var data = this.props.pagedTablesData;\n\n    if (data !== '') {\n      var elements = [];\n      var element;\n      var profileImg = '';\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].mediaFiles.length > 0 && data[i].mediaFiles[0].isProfilePhoto === true) {\n          profileImg = `data:image/gif;base64,${data[i].mediaFiles[0].fileData}`;\n        }\n\n        element = [];\n        element = /*#__PURE__*/_jsxDEV(\"dir\", {\n          className: \"profileCardBody\",\n          id: data[i].employeeId,\n          onClick: () => {\n            this.props.setActiveId(data[i].employeeId);\n            this.props.getEmployee(data[i].employeeId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n            this.props.getProfilePhotoByEmployeeId(data[i].employeeId);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profileCardInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: data[i].fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profilePhoto\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: profileImg,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this)\n        }, data[i].employeeId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this);\n        elements.push(element);\n      }\n    }\n\n    if (data !== '') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title\",\n          children: \"Employees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.setCreateModalState();\n          },\n          children: \"New employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"dir\", {\n          className: \"employeePage\",\n          children: [elements, /*#__PURE__*/_jsxDEV(CreateEmployeeModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(UpdateEmployeeModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There is no Data in DB...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pagedTablesData: state.pagedTablesData,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getEmployee: (id, activeMenu) => dispatch(actions.FetchActiveRecordData(id, activeMenu)),\n    getProfilePhotoByEmployeeId: id => dispatch(actions.GetProfilePhotoByEmployeeId(id))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/EmployeesTable.js"],"names":["React","connect","actions","CreateEmployeeModal","UpdateEmployeeModal","EmployeeList","PureComponent","render","data","props","pagedTablesData","elements","element","profileImg","i","length","mediaFiles","isProfilePhoto","fileData","employeeId","setActiveId","getEmployee","activeMenu","setUpdateModalState","getProfilePhotoByEmployeeId","fullName","push","setCreateModalState","mapStateToProps","state","activeId","mapDispatchToProps","dispatch","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","FetchActiveRecordData","GetProfilePhotoByEmployeeId"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateEmployeeModal from '../ModalWindowsComponents/CreateEmployeeModal.js';\r\nimport UpdateEmployeeModal from '../ModalWindowsComponents/UpdateEmployeeModal.js';\r\n\r\nclass EmployeeList extends React.PureComponent {\r\n  render() {\r\n    var data = this.props.pagedTablesData;\r\n    if (data !== '') {\r\n      var elements = [];\r\n      var element;\r\n      var profileImg = '';\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (\r\n          data[i].mediaFiles.length > 0 &&\r\n          data[i].mediaFiles[0].isProfilePhoto === true\r\n        ) {\r\n          profileImg = `data:image/gif;base64,${data[i].mediaFiles[0].fileData}`;\r\n        }\r\n        element = [];\r\n        element = (\r\n          <dir\r\n            className=\"profileCardBody\"\r\n            key={data[i].employeeId}\r\n            id={data[i].employeeId}\r\n            onClick={() => {\r\n              this.props.setActiveId(data[i].employeeId);\r\n              this.props.getEmployee(data[i].employeeId, this.props.activeMenu);\r\n              this.props.setUpdateModalState();\r\n              this.props.getProfilePhotoByEmployeeId(data[i].employeeId);\r\n            }}\r\n          >\r\n            <div className=\"profileCardInfo\">\r\n              <p>{data[i].fullName}</p>\r\n              <div className=\"profilePhoto\">\r\n                <img src={profileImg} alt=\"\" />\r\n              </div>\r\n            </div>\r\n          </dir>\r\n        );\r\n        elements.push(element);\r\n      }\r\n    }\r\n\r\n    if (data !== '') {\r\n      return (\r\n        <>\r\n          <p className=\"title\">Employees</p>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.setCreateModalState();\r\n            }}\r\n          >\r\n            New employee\r\n          </button>\r\n          <dir className=\"employeePage\">\r\n            {elements}\r\n            <CreateEmployeeModal />\r\n            <UpdateEmployeeModal />\r\n          </dir>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <p>There is no Data in DB...</p>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pagedTablesData: state.pagedTablesData,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getEmployee: (id, activeMenu) =>\r\n      dispatch(actions.FetchActiveRecordData(id, activeMenu)),\r\n    getProfilePhotoByEmployeeId: (id) =>\r\n      dispatch(actions.GetProfilePhotoByEmployeeId(id)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeList);\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aries\\\\Desktop\\\\React project\\\\react-application\\\\src\\\\Components\\\\DataTablesComponents\\\\Orders.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../Redux/Actions/actions.js';\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass OrdersList extends React.PureComponent {\n  render() {\n    if (this.props.responseDataList !== '') {\n      var elements = [];\n      var element;\n\n      var header = /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date of service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client phone number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Client email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Procedure cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this);\n\n      for (let i = 0; i < this.props.responseDataList.orders.length; i++) {\n        var date = this.props.responseDataList.orders[i].dateOfService.substr(0, 10);\n        var time = this.props.responseDataList.orders[i].dateOfService.substr(11, 16);\n        element = '';\n        element = /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: this.props.responseDataList.orders[i].orderId,\n          onClick: () => {\n            this.props.setActiveId(this.props.responseDataList[i].orderId);\n            this.props.getOrder(this.props.responseDataList.orders[i].orderId, this.props.activeMenu);\n            this.props.setUpdateModalState();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.orders[i].client.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.orders[i].client.phoneNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.orders[i].client.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.orders[i].procedure.procedureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.orders[i].procedure.procedurePrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.props.responseDataList.orders[i].employee.firstName + ' ' + this.props.responseDataList.orders[i].employee.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, this.props.responseDataList.orders[i].orderId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this);\n        elements = elements.concat(element);\n      }\n    }\n\n    if (this.props.responseDataList !== '') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalButton\",\n          onClick: () => {\n            this.props.setCreateModalState();\n          },\n          children: \"New order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dataTable\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"tableStyle\",\n            children: [header, /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: elements\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CreateOrderModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There is no Data in DB...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    responseDataList: state.responseDataList,\n    activeId: state.activeId,\n    activeMenu: state.activeMenu\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\n    setActiveId: id => dispatch(actions.SetActiveIdentifier(id)),\n    getEmployee: (id, activeMenu) => dispatch(actions.FetchSingleData(id, activeMenu))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);","map":{"version":3,"sources":["C:/Users/aries/Desktop/React project/react-application/src/Components/DataTablesComponents/Orders.js"],"names":["React","connect","actions","CreateOrderModal","UpdateOrderModal","OrdersList","PureComponent","render","props","responseDataList","elements","element","header","i","orders","length","date","dateOfService","substr","time","orderId","setActiveId","getOrder","activeMenu","setUpdateModalState","client","firstName","phoneNumber","email","procedure","procedureName","procedurePrice","employee","lastName","concat","setCreateModalState","mapStateToProps","state","activeId","mapDispatchToProps","dispatch","SetUpdateModalState","SetCreateModalState","id","SetActiveIdentifier","getEmployee","FetchSingleData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../Redux/Actions/actions.js';\r\nimport CreateOrderModal from '../ModalWindowsComponents/CreateOrderModal.js';\r\nimport UpdateOrderModal from '../ModalWindowsComponents/UpdateOrderModal.js';\r\n\r\nclass OrdersList extends React.PureComponent {\r\n  render() {\r\n    if (this.props.responseDataList !== '') {\r\n      var elements = [];\r\n      var element;\r\n      var header = (\r\n        <thead>\r\n          <tr>\r\n            <th>Date of service</th>\r\n            <th>Client name</th>\r\n            <th>Client phone number</th>\r\n            <th>Client email</th>\r\n            <th>Procedure name</th>\r\n            <th>Procedure cost</th>\r\n            <th>Employee</th>\r\n            {/* <th>Employee last name</th> */}\r\n          </tr>\r\n        </thead>\r\n      );\r\n\r\n      for (let i = 0; i < this.props.responseDataList.orders.length; i++) {\r\n        var date = this.props.responseDataList.orders[i].dateOfService.substr(\r\n          0,\r\n          10,\r\n        );\r\n        var time = this.props.responseDataList.orders[i].dateOfService.substr(\r\n          11,\r\n          16,\r\n        );\r\n        element = '';\r\n        element = (\r\n          <tr\r\n            key={this.props.responseDataList.orders[i].orderId}\r\n            id={this.props.responseDataList.orders[i].orderId}\r\n            onClick={() => {\r\n              this.props.setActiveId(this.props.responseDataList[i].orderId);\r\n              this.props.getOrder(\r\n                this.props.responseDataList.orders[i].orderId,\r\n                this.props.activeMenu,\r\n              );\r\n              this.props.setUpdateModalState();\r\n            }}\r\n          >\r\n            <td>{date}</td>\r\n            <td>{this.props.responseDataList.orders[i].client.firstName}</td>\r\n            <td>{this.props.responseDataList.orders[i].client.phoneNumber}</td>\r\n            <td>{this.props.responseDataList.orders[i].client.email}</td>\r\n            <td>\r\n              {this.props.responseDataList.orders[i].procedure.procedureName}\r\n            </td>\r\n            <td>\r\n              {this.props.responseDataList.orders[i].procedure.procedurePrice}\r\n            </td>\r\n            <td>\r\n              {this.props.responseDataList.orders[i].employee.firstName +\r\n                ' ' +\r\n                this.props.responseDataList.orders[i].employee.lastName}\r\n            </td>\r\n          </tr>\r\n        );\r\n        elements = elements.concat(element);\r\n      }\r\n    }\r\n\r\n    if (this.props.responseDataList !== '') {\r\n      return (\r\n        <>\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              this.props.setCreateModalState();\r\n            }}\r\n          >\r\n            New order\r\n          </button>\r\n          <div className=\"dataTable\">\r\n            <table className=\"tableStyle\">\r\n              {header}\r\n              <tbody>{elements}</tbody>\r\n              <CreateOrderModal />\r\n            </table>\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <p>There is no Data in DB...</p>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    responseDataList: state.responseDataList,\r\n    activeId: state.activeId,\r\n    activeMenu: state.activeMenu,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setUpdateModalState: () => dispatch(actions.SetUpdateModalState()),\r\n    setCreateModalState: () => dispatch(actions.SetCreateModalState()),\r\n    setActiveId: (id) => dispatch(actions.SetActiveIdentifier(id)),\r\n    getEmployee: (id, activeMenu) =>\r\n      dispatch(actions.FetchSingleData(id, activeMenu)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);\r\n"]},"metadata":{},"sourceType":"module"}